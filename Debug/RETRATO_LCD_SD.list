
RETRATO_LCD_SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000baf8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001514  0800bcc8  0800bcc8  0001bcc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1dc  0800d1dc  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1dc  0800d1dc  0001d1dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1e4  0800d1e4  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1e4  0800d1e4  0001d1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1e8  0800d1e8  0001d1e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800d1ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000074e0  20000094  0800d280  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007574  0800d280  00027574  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cf15  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003451  00000000  00000000  0003cfd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d8  00000000  00000000  00040430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001388  00000000  00000000  00041908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002482f  00000000  00000000  00042c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001af67  00000000  00000000  000674bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6168  00000000  00000000  00082426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015858e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c44  00000000  00000000  001585e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000094 	.word	0x20000094
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bcb0 	.word	0x0800bcb0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000098 	.word	0x20000098
 800020c:	0800bcb0 	.word	0x0800bcb0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <SELECT>:
#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin GPIO_PIN_6

/* SPI Chip Select */
static void SELECT(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2140      	movs	r1, #64	; 0x40
 80005b0:	4802      	ldr	r0, [pc, #8]	; (80005bc <SELECT+0x14>)
 80005b2:	f005 ff73 	bl	800649c <HAL_GPIO_WritePin>
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40020400 	.word	0x40020400

080005c0 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	2140      	movs	r1, #64	; 0x40
 80005c8:	4802      	ldr	r0, [pc, #8]	; (80005d4 <DESELECT+0x14>)
 80005ca:	f005 ff67 	bl	800649c <HAL_GPIO_WritePin>
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40020400 	.word	0x40020400

080005d8 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80005e2:	bf00      	nop
 80005e4:	4808      	ldr	r0, [pc, #32]	; (8000608 <SPI_TxByte+0x30>)
 80005e6:	f007 f844 	bl	8007672 <HAL_SPI_GetState>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d1f9      	bne.n	80005e4 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80005f0:	1df9      	adds	r1, r7, #7
 80005f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f6:	2201      	movs	r2, #1
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <SPI_TxByte+0x30>)
 80005fa:	f006 fd5c 	bl	80070b6 <HAL_SPI_Transmit>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20005438 	.word	0x20005438

0800060c <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000612:	23ff      	movs	r3, #255	; 0xff
 8000614:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800061a:	bf00      	nop
 800061c:	4809      	ldr	r0, [pc, #36]	; (8000644 <SPI_RxByte+0x38>)
 800061e:	f007 f828 	bl	8007672 <HAL_SPI_GetState>
 8000622:	4603      	mov	r3, r0
 8000624:	2b01      	cmp	r3, #1
 8000626:	d1f9      	bne.n	800061c <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000628:	1dba      	adds	r2, r7, #6
 800062a:	1df9      	adds	r1, r7, #7
 800062c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2301      	movs	r3, #1
 8000634:	4803      	ldr	r0, [pc, #12]	; (8000644 <SPI_RxByte+0x38>)
 8000636:	f006 fe7a 	bl	800732e <HAL_SPI_TransmitReceive>

  return data;
 800063a:	79bb      	ldrb	r3, [r7, #6]
}
 800063c:	4618      	mov	r0, r3
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20005438 	.word	0x20005438

08000648 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000650:	f7ff ffdc 	bl	800060c <SPI_RxByte>
 8000654:	4603      	mov	r3, r0
 8000656:	461a      	mov	r2, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	701a      	strb	r2, [r3, #0]
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <SD_ReadyWait+0x34>)
 800066c:	2232      	movs	r2, #50	; 0x32
 800066e:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000670:	f7ff ffcc 	bl	800060c <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000674:	f7ff ffca 	bl	800060c <SPI_RxByte>
 8000678:	4603      	mov	r3, r0
 800067a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	2bff      	cmp	r3, #255	; 0xff
 8000680:	d004      	beq.n	800068c <SD_ReadyWait+0x28>
 8000682:	4b05      	ldr	r3, [pc, #20]	; (8000698 <SD_ReadyWait+0x34>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	b2db      	uxtb	r3, r3
 8000688:	2b00      	cmp	r3, #0
 800068a:	d1f3      	bne.n	8000674 <SD_ReadyWait+0x10>

  return res;
 800068c:	79fb      	ldrb	r3, [r7, #7]
}
 800068e:	4618      	mov	r0, r3
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	200054d4 	.word	0x200054d4

0800069c <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80006a2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80006a6:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 80006a8:	f7ff ff8a 	bl	80005c0 <DESELECT>

  for(int i = 0; i < 10; i++)
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	e005      	b.n	80006be <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80006b2:	20ff      	movs	r0, #255	; 0xff
 80006b4:	f7ff ff90 	bl	80005d8 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	3301      	adds	r3, #1
 80006bc:	613b      	str	r3, [r7, #16]
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	2b09      	cmp	r3, #9
 80006c2:	ddf6      	ble.n	80006b2 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 80006c4:	f7ff ff70 	bl	80005a8 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 80006c8:	2340      	movs	r3, #64	; 0x40
 80006ca:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80006dc:	2395      	movs	r3, #149	; 0x95
 80006de:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	e009      	b.n	80006fa <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80006e6:	1d3a      	adds	r2, r7, #4
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	4413      	add	r3, r2
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff72 	bl	80005d8 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	3301      	adds	r3, #1
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	2b05      	cmp	r3, #5
 80006fe:	ddf2      	ble.n	80006e6 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000700:	e002      	b.n	8000708 <SD_PowerOn+0x6c>
  {
    Count--;
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	3b01      	subs	r3, #1
 8000706:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000708:	f7ff ff80 	bl	800060c <SPI_RxByte>
 800070c:	4603      	mov	r3, r0
 800070e:	2b01      	cmp	r3, #1
 8000710:	d002      	beq.n	8000718 <SD_PowerOn+0x7c>
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d1f4      	bne.n	8000702 <SD_PowerOn+0x66>
  }

  DESELECT();
 8000718:	f7ff ff52 	bl	80005c0 <DESELECT>
  SPI_TxByte(0XFF);
 800071c:	20ff      	movs	r0, #255	; 0xff
 800071e:	f7ff ff5b 	bl	80005d8 <SPI_TxByte>

  PowerFlag = 1;
 8000722:	4b03      	ldr	r3, [pc, #12]	; (8000730 <SD_PowerOn+0x94>)
 8000724:	2201      	movs	r2, #1
 8000726:	701a      	strb	r2, [r3, #0]
}
 8000728:	bf00      	nop
 800072a:	3718      	adds	r7, #24
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200000b1 	.word	0x200000b1

08000734 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000738:	4b03      	ldr	r3, [pc, #12]	; (8000748 <SD_PowerOff+0x14>)
 800073a:	2200      	movs	r2, #0
 800073c:	701a      	strb	r2, [r3, #0]
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	200000b1 	.word	0x200000b1

0800074c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <SD_CheckPower+0x14>)
 8000752:	781b      	ldrb	r3, [r3, #0]
}
 8000754:	4618      	mov	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	200000b1 	.word	0x200000b1

08000764 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <SD_RxDataBlock+0x68>)
 8000770:	220a      	movs	r2, #10
 8000772:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000774:	f7ff ff4a 	bl	800060c <SPI_RxByte>
 8000778:	4603      	mov	r3, r0
 800077a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	2bff      	cmp	r3, #255	; 0xff
 8000780:	d104      	bne.n	800078c <SD_RxDataBlock+0x28>
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <SD_RxDataBlock+0x68>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	2b00      	cmp	r3, #0
 800078a:	d1f3      	bne.n	8000774 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 800078c:	7bfb      	ldrb	r3, [r7, #15]
 800078e:	2bfe      	cmp	r3, #254	; 0xfe
 8000790:	d001      	beq.n	8000796 <SD_RxDataBlock+0x32>
    return FALSE;
 8000792:	2300      	movs	r3, #0
 8000794:	e016      	b.n	80007c4 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	1c5a      	adds	r2, r3, #1
 800079a:	607a      	str	r2, [r7, #4]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff53 	bl	8000648 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	1c5a      	adds	r2, r3, #1
 80007a6:	607a      	str	r2, [r7, #4]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff4d 	bl	8000648 <SPI_RxBytePtr>
  } while(btr -= 2);
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	3b02      	subs	r3, #2
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d1ed      	bne.n	8000796 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 80007ba:	f7ff ff27 	bl	800060c <SPI_RxByte>
  SPI_RxByte();
 80007be:	f7ff ff25 	bl	800060c <SPI_RxByte>

  return TRUE;
 80007c2:	2301      	movs	r3, #1
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200054d5 	.word	0x200054d5

080007d0 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	460b      	mov	r3, r1
 80007da:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80007e0:	f7ff ff40 	bl	8000664 <SD_ReadyWait>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2bff      	cmp	r3, #255	; 0xff
 80007e8:	d001      	beq.n	80007ee <SD_TxDataBlock+0x1e>
    return FALSE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	e040      	b.n	8000870 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80007ee:	78fb      	ldrb	r3, [r7, #3]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fef1 	bl	80005d8 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80007f6:	78fb      	ldrb	r3, [r7, #3]
 80007f8:	2bfd      	cmp	r3, #253	; 0xfd
 80007fa:	d031      	beq.n	8000860 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	607a      	str	r2, [r7, #4]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fee5 	bl	80005d8 <SPI_TxByte>
      SPI_TxByte(*buff++);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	1c5a      	adds	r2, r3, #1
 8000812:	607a      	str	r2, [r7, #4]
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fede 	bl	80005d8 <SPI_TxByte>
    } while (--wc);
 800081c:	7bbb      	ldrb	r3, [r7, #14]
 800081e:	3b01      	subs	r3, #1
 8000820:	73bb      	strb	r3, [r7, #14]
 8000822:	7bbb      	ldrb	r3, [r7, #14]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d1eb      	bne.n	8000800 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000828:	f7ff fef0 	bl	800060c <SPI_RxByte>
    SPI_RxByte();
 800082c:	f7ff feee 	bl	800060c <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000830:	e00b      	b.n	800084a <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000832:	f7ff feeb 	bl	800060c <SPI_RxByte>
 8000836:	4603      	mov	r3, r0
 8000838:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	f003 031f 	and.w	r3, r3, #31
 8000840:	2b05      	cmp	r3, #5
 8000842:	d006      	beq.n	8000852 <SD_TxDataBlock+0x82>
        break;

      i++;
 8000844:	7b7b      	ldrb	r3, [r7, #13]
 8000846:	3301      	adds	r3, #1
 8000848:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 800084a:	7b7b      	ldrb	r3, [r7, #13]
 800084c:	2b40      	cmp	r3, #64	; 0x40
 800084e:	d9f0      	bls.n	8000832 <SD_TxDataBlock+0x62>
 8000850:	e000      	b.n	8000854 <SD_TxDataBlock+0x84>
        break;
 8000852:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000854:	bf00      	nop
 8000856:	f7ff fed9 	bl	800060c <SPI_RxByte>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d0fa      	beq.n	8000856 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000860:	7bfb      	ldrb	r3, [r7, #15]
 8000862:	f003 031f 	and.w	r3, r3, #31
 8000866:	2b05      	cmp	r3, #5
 8000868:	d101      	bne.n	800086e <SD_TxDataBlock+0x9e>
    return TRUE;
 800086a:	2301      	movs	r3, #1
 800086c:	e000      	b.n	8000870 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800086e:	2300      	movs	r3, #0
}
 8000870:	4618      	mov	r0, r3
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	6039      	str	r1, [r7, #0]
 8000882:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000884:	f7ff feee 	bl	8000664 <SD_ReadyWait>
 8000888:	4603      	mov	r3, r0
 800088a:	2bff      	cmp	r3, #255	; 0xff
 800088c:	d001      	beq.n	8000892 <SD_SendCmd+0x1a>
    return 0xFF;
 800088e:	23ff      	movs	r3, #255	; 0xff
 8000890:	e040      	b.n	8000914 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fe9f 	bl	80005d8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	0e1b      	lsrs	r3, r3, #24
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fe99 	bl	80005d8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	0c1b      	lsrs	r3, r3, #16
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fe93 	bl	80005d8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	0a1b      	lsrs	r3, r3, #8
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fe8d 	bl	80005d8 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fe88 	bl	80005d8 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	2b40      	cmp	r3, #64	; 0x40
 80008d0:	d101      	bne.n	80008d6 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80008d2:	2395      	movs	r3, #149	; 0x95
 80008d4:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	2b48      	cmp	r3, #72	; 0x48
 80008da:	d101      	bne.n	80008e0 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80008dc:	2387      	movs	r3, #135	; 0x87
 80008de:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fe78 	bl	80005d8 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	2b4c      	cmp	r3, #76	; 0x4c
 80008ec:	d101      	bne.n	80008f2 <SD_SendCmd+0x7a>
    SPI_RxByte();
 80008ee:	f7ff fe8d 	bl	800060c <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80008f2:	230a      	movs	r3, #10
 80008f4:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80008f6:	f7ff fe89 	bl	800060c <SPI_RxByte>
 80008fa:	4603      	mov	r3, r0
 80008fc:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80008fe:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000902:	2b00      	cmp	r3, #0
 8000904:	da05      	bge.n	8000912 <SD_SendCmd+0x9a>
 8000906:	7bbb      	ldrb	r3, [r7, #14]
 8000908:	3b01      	subs	r3, #1
 800090a:	73bb      	strb	r3, [r7, #14]
 800090c:	7bbb      	ldrb	r3, [r7, #14]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d1f1      	bne.n	80008f6 <SD_SendCmd+0x7e>

  return res;
 8000912:	7b7b      	ldrb	r3, [r7, #13]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 800092c:	2301      	movs	r3, #1
 800092e:	e0d5      	b.n	8000adc <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000930:	4b6c      	ldr	r3, [pc, #432]	; (8000ae4 <SD_disk_initialize+0x1c8>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	2b00      	cmp	r3, #0
 800093c:	d003      	beq.n	8000946 <SD_disk_initialize+0x2a>
    return Stat;
 800093e:	4b69      	ldr	r3, [pc, #420]	; (8000ae4 <SD_disk_initialize+0x1c8>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	e0ca      	b.n	8000adc <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000946:	f7ff fea9 	bl	800069c <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 800094a:	f7ff fe2d 	bl	80005a8 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000952:	2100      	movs	r1, #0
 8000954:	2040      	movs	r0, #64	; 0x40
 8000956:	f7ff ff8f 	bl	8000878 <SD_SendCmd>
 800095a:	4603      	mov	r3, r0
 800095c:	2b01      	cmp	r3, #1
 800095e:	f040 80a5 	bne.w	8000aac <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000962:	4b61      	ldr	r3, [pc, #388]	; (8000ae8 <SD_disk_initialize+0x1cc>)
 8000964:	2264      	movs	r2, #100	; 0x64
 8000966:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000968:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800096c:	2048      	movs	r0, #72	; 0x48
 800096e:	f7ff ff83 	bl	8000878 <SD_SendCmd>
 8000972:	4603      	mov	r3, r0
 8000974:	2b01      	cmp	r3, #1
 8000976:	d158      	bne.n	8000a2a <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000978:	2300      	movs	r3, #0
 800097a:	73fb      	strb	r3, [r7, #15]
 800097c:	e00c      	b.n	8000998 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800097e:	7bfc      	ldrb	r4, [r7, #15]
 8000980:	f7ff fe44 	bl	800060c <SPI_RxByte>
 8000984:	4603      	mov	r3, r0
 8000986:	461a      	mov	r2, r3
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	4423      	add	r3, r4
 800098e:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	3301      	adds	r3, #1
 8000996:	73fb      	strb	r3, [r7, #15]
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	2b03      	cmp	r3, #3
 800099c:	d9ef      	bls.n	800097e <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800099e:	7abb      	ldrb	r3, [r7, #10]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	f040 8083 	bne.w	8000aac <SD_disk_initialize+0x190>
 80009a6:	7afb      	ldrb	r3, [r7, #11]
 80009a8:	2baa      	cmp	r3, #170	; 0xaa
 80009aa:	d17f      	bne.n	8000aac <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80009ac:	2100      	movs	r1, #0
 80009ae:	2077      	movs	r0, #119	; 0x77
 80009b0:	f7ff ff62 	bl	8000878 <SD_SendCmd>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d807      	bhi.n	80009ca <SD_disk_initialize+0xae>
 80009ba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80009be:	2069      	movs	r0, #105	; 0x69
 80009c0:	f7ff ff5a 	bl	8000878 <SD_SendCmd>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d005      	beq.n	80009d6 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80009ca:	4b47      	ldr	r3, [pc, #284]	; (8000ae8 <SD_disk_initialize+0x1cc>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d1eb      	bne.n	80009ac <SD_disk_initialize+0x90>
 80009d4:	e000      	b.n	80009d8 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80009d6:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80009d8:	4b43      	ldr	r3, [pc, #268]	; (8000ae8 <SD_disk_initialize+0x1cc>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d064      	beq.n	8000aac <SD_disk_initialize+0x190>
 80009e2:	2100      	movs	r1, #0
 80009e4:	207a      	movs	r0, #122	; 0x7a
 80009e6:	f7ff ff47 	bl	8000878 <SD_SendCmd>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d15d      	bne.n	8000aac <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80009f0:	2300      	movs	r3, #0
 80009f2:	73fb      	strb	r3, [r7, #15]
 80009f4:	e00c      	b.n	8000a10 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80009f6:	7bfc      	ldrb	r4, [r7, #15]
 80009f8:	f7ff fe08 	bl	800060c <SPI_RxByte>
 80009fc:	4603      	mov	r3, r0
 80009fe:	461a      	mov	r2, r3
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	4423      	add	r3, r4
 8000a06:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000a0a:	7bfb      	ldrb	r3, [r7, #15]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	73fb      	strb	r3, [r7, #15]
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
 8000a12:	2b03      	cmp	r3, #3
 8000a14:	d9ef      	bls.n	80009f6 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8000a16:	7a3b      	ldrb	r3, [r7, #8]
 8000a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SD_disk_initialize+0x108>
 8000a20:	2306      	movs	r3, #6
 8000a22:	e000      	b.n	8000a26 <SD_disk_initialize+0x10a>
 8000a24:	2302      	movs	r3, #2
 8000a26:	73bb      	strb	r3, [r7, #14]
 8000a28:	e040      	b.n	8000aac <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2077      	movs	r0, #119	; 0x77
 8000a2e:	f7ff ff23 	bl	8000878 <SD_SendCmd>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d808      	bhi.n	8000a4a <SD_disk_initialize+0x12e>
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2069      	movs	r0, #105	; 0x69
 8000a3c:	f7ff ff1c 	bl	8000878 <SD_SendCmd>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d801      	bhi.n	8000a4a <SD_disk_initialize+0x12e>
 8000a46:	2302      	movs	r3, #2
 8000a48:	e000      	b.n	8000a4c <SD_disk_initialize+0x130>
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8000a4e:	7bbb      	ldrb	r3, [r7, #14]
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d10e      	bne.n	8000a72 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000a54:	2100      	movs	r1, #0
 8000a56:	2077      	movs	r0, #119	; 0x77
 8000a58:	f7ff ff0e 	bl	8000878 <SD_SendCmd>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d80e      	bhi.n	8000a80 <SD_disk_initialize+0x164>
 8000a62:	2100      	movs	r1, #0
 8000a64:	2069      	movs	r0, #105	; 0x69
 8000a66:	f7ff ff07 	bl	8000878 <SD_SendCmd>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d107      	bne.n	8000a80 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000a70:	e00d      	b.n	8000a8e <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000a72:	2100      	movs	r1, #0
 8000a74:	2041      	movs	r0, #65	; 0x41
 8000a76:	f7ff feff 	bl	8000878 <SD_SendCmd>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d005      	beq.n	8000a8c <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <SD_disk_initialize+0x1cc>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d1e1      	bne.n	8000a4e <SD_disk_initialize+0x132>
 8000a8a:	e000      	b.n	8000a8e <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000a8c:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <SD_disk_initialize+0x1cc>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d007      	beq.n	8000aa8 <SD_disk_initialize+0x18c>
 8000a98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a9c:	2050      	movs	r0, #80	; 0x50
 8000a9e:	f7ff feeb 	bl	8000878 <SD_SendCmd>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8000aac:	4a0f      	ldr	r2, [pc, #60]	; (8000aec <SD_disk_initialize+0x1d0>)
 8000aae:	7bbb      	ldrb	r3, [r7, #14]
 8000ab0:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000ab2:	f7ff fd85 	bl	80005c0 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000ab6:	f7ff fda9 	bl	800060c <SPI_RxByte>

  if (type)
 8000aba:	7bbb      	ldrb	r3, [r7, #14]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d008      	beq.n	8000ad2 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <SD_disk_initialize+0x1c8>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	f023 0301 	bic.w	r3, r3, #1
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <SD_disk_initialize+0x1c8>)
 8000ace:	701a      	strb	r2, [r3, #0]
 8000ad0:	e001      	b.n	8000ad6 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000ad2:	f7ff fe2f 	bl	8000734 <SD_PowerOff>
  }

  return Stat;
 8000ad6:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <SD_disk_initialize+0x1c8>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b2db      	uxtb	r3, r3
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd90      	pop	{r4, r7, pc}
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	200054d5 	.word	0x200054d5
 8000aec:	200000b0 	.word	0x200000b0

08000af0 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SD_disk_status+0x14>
    return STA_NOINIT;
 8000b00:	2301      	movs	r3, #1
 8000b02:	e002      	b.n	8000b0a <SD_disk_status+0x1a>

  return Stat;
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <SD_disk_status+0x28>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b2db      	uxtb	r3, r3
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	20000000 	.word	0x20000000

08000b1c <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	4603      	mov	r3, r0
 8000b2a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d102      	bne.n	8000b38 <SD_disk_read+0x1c>
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d101      	bne.n	8000b3c <SD_disk_read+0x20>
    return RES_PARERR;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	e051      	b.n	8000be0 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8000b3c:	4b2a      	ldr	r3, [pc, #168]	; (8000be8 <SD_disk_read+0xcc>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	e048      	b.n	8000be0 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8000b4e:	4b27      	ldr	r3, [pc, #156]	; (8000bec <SD_disk_read+0xd0>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	f003 0304 	and.w	r3, r3, #4
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d102      	bne.n	8000b60 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	025b      	lsls	r3, r3, #9
 8000b5e:	607b      	str	r3, [r7, #4]

  SELECT();
 8000b60:	f7ff fd22 	bl	80005a8 <SELECT>

  if (count == 1)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d111      	bne.n	8000b8e <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	2051      	movs	r0, #81	; 0x51
 8000b6e:	f7ff fe83 	bl	8000878 <SD_SendCmd>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d129      	bne.n	8000bcc <SD_disk_read+0xb0>
 8000b78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b7c:	68b8      	ldr	r0, [r7, #8]
 8000b7e:	f7ff fdf1 	bl	8000764 <SD_RxDataBlock>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d021      	beq.n	8000bcc <SD_disk_read+0xb0>
      count = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	e01e      	b.n	8000bcc <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	2052      	movs	r0, #82	; 0x52
 8000b92:	f7ff fe71 	bl	8000878 <SD_SendCmd>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d117      	bne.n	8000bcc <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000b9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba0:	68b8      	ldr	r0, [r7, #8]
 8000ba2:	f7ff fddf 	bl	8000764 <SD_RxDataBlock>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d00a      	beq.n	8000bc2 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bb2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	603b      	str	r3, [r7, #0]
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d1ed      	bne.n	8000b9c <SD_disk_read+0x80>
 8000bc0:	e000      	b.n	8000bc4 <SD_disk_read+0xa8>
          break;
 8000bc2:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	204c      	movs	r0, #76	; 0x4c
 8000bc8:	f7ff fe56 	bl	8000878 <SD_SendCmd>
    }
  }

  DESELECT();
 8000bcc:	f7ff fcf8 	bl	80005c0 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000bd0:	f7ff fd1c 	bl	800060c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	bf14      	ite	ne
 8000bda:	2301      	movne	r3, #1
 8000bdc:	2300      	moveq	r3, #0
 8000bde:	b2db      	uxtb	r3, r3
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000000 	.word	0x20000000
 8000bec:	200000b0 	.word	0x200000b0

08000bf0 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d102      	bne.n	8000c0c <SD_disk_write+0x1c>
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d101      	bne.n	8000c10 <SD_disk_write+0x20>
    return RES_PARERR;
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	e06b      	b.n	8000ce8 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8000c10:	4b37      	ldr	r3, [pc, #220]	; (8000cf0 <SD_disk_write+0x100>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	e062      	b.n	8000ce8 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8000c22:	4b33      	ldr	r3, [pc, #204]	; (8000cf0 <SD_disk_write+0x100>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	f003 0304 	and.w	r3, r3, #4
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <SD_disk_write+0x44>
    return RES_WRPRT;
 8000c30:	2302      	movs	r3, #2
 8000c32:	e059      	b.n	8000ce8 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8000c34:	4b2f      	ldr	r3, [pc, #188]	; (8000cf4 <SD_disk_write+0x104>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	f003 0304 	and.w	r3, r3, #4
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d102      	bne.n	8000c46 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	025b      	lsls	r3, r3, #9
 8000c44:	607b      	str	r3, [r7, #4]

  SELECT();
 8000c46:	f7ff fcaf 	bl	80005a8 <SELECT>

  if (count == 1)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d110      	bne.n	8000c72 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c50:	6879      	ldr	r1, [r7, #4]
 8000c52:	2058      	movs	r0, #88	; 0x58
 8000c54:	f7ff fe10 	bl	8000878 <SD_SendCmd>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d13a      	bne.n	8000cd4 <SD_disk_write+0xe4>
 8000c5e:	21fe      	movs	r1, #254	; 0xfe
 8000c60:	68b8      	ldr	r0, [r7, #8]
 8000c62:	f7ff fdb5 	bl	80007d0 <SD_TxDataBlock>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d033      	beq.n	8000cd4 <SD_disk_write+0xe4>
      count = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	e030      	b.n	8000cd4 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8000c72:	4b20      	ldr	r3, [pc, #128]	; (8000cf4 <SD_disk_write+0x104>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d007      	beq.n	8000c8e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2077      	movs	r0, #119	; 0x77
 8000c82:	f7ff fdf9 	bl	8000878 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c86:	6839      	ldr	r1, [r7, #0]
 8000c88:	2057      	movs	r0, #87	; 0x57
 8000c8a:	f7ff fdf5 	bl	8000878 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	2059      	movs	r0, #89	; 0x59
 8000c92:	f7ff fdf1 	bl	8000878 <SD_SendCmd>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d11b      	bne.n	8000cd4 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000c9c:	21fc      	movs	r1, #252	; 0xfc
 8000c9e:	68b8      	ldr	r0, [r7, #8]
 8000ca0:	f7ff fd96 	bl	80007d0 <SD_TxDataBlock>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d00a      	beq.n	8000cc0 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000cb0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1ee      	bne.n	8000c9c <SD_disk_write+0xac>
 8000cbe:	e000      	b.n	8000cc2 <SD_disk_write+0xd2>
          break;
 8000cc0:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8000cc2:	21fd      	movs	r1, #253	; 0xfd
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f7ff fd83 	bl	80007d0 <SD_TxDataBlock>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d101      	bne.n	8000cd4 <SD_disk_write+0xe4>
      {
        count = 1;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8000cd4:	f7ff fc74 	bl	80005c0 <DESELECT>
  SPI_RxByte();
 8000cd8:	f7ff fc98 	bl	800060c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	bf14      	ite	ne
 8000ce2:	2301      	movne	r3, #1
 8000ce4:	2300      	moveq	r3, #0
 8000ce6:	b2db      	uxtb	r3, r3
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000000 	.word	0x20000000
 8000cf4:	200000b0 	.word	0x200000b0

08000cf8 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b08b      	sub	sp, #44	; 0x2c
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	603a      	str	r2, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
 8000d04:	460b      	mov	r3, r1
 8000d06:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000d12:	2304      	movs	r3, #4
 8000d14:	e11b      	b.n	8000f4e <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8000d1c:	79bb      	ldrb	r3, [r7, #6]
 8000d1e:	2b05      	cmp	r3, #5
 8000d20:	d129      	bne.n	8000d76 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8000d22:	6a3b      	ldr	r3, [r7, #32]
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d017      	beq.n	8000d5a <SD_disk_ioctl+0x62>
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	dc1f      	bgt.n	8000d6e <SD_disk_ioctl+0x76>
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d002      	beq.n	8000d38 <SD_disk_ioctl+0x40>
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d00b      	beq.n	8000d4e <SD_disk_ioctl+0x56>
 8000d36:	e01a      	b.n	8000d6e <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8000d38:	f7ff fd08 	bl	800074c <SD_CheckPower>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8000d42:	f7ff fcf7 	bl	8000734 <SD_PowerOff>
      res = RES_OK;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d4c:	e0fd      	b.n	8000f4a <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8000d4e:	f7ff fca5 	bl	800069c <SD_PowerOn>
      res = RES_OK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d58:	e0f7      	b.n	8000f4a <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000d5a:	6a3b      	ldr	r3, [r7, #32]
 8000d5c:	1c5c      	adds	r4, r3, #1
 8000d5e:	f7ff fcf5 	bl	800074c <SD_CheckPower>
 8000d62:	4603      	mov	r3, r0
 8000d64:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000d66:	2300      	movs	r3, #0
 8000d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d6c:	e0ed      	b.n	8000f4a <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8000d6e:	2304      	movs	r3, #4
 8000d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d74:	e0e9      	b.n	8000f4a <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8000d76:	4b78      	ldr	r3, [pc, #480]	; (8000f58 <SD_disk_ioctl+0x260>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8000d84:	2303      	movs	r3, #3
 8000d86:	e0e2      	b.n	8000f4e <SD_disk_ioctl+0x256>

    SELECT();
 8000d88:	f7ff fc0e 	bl	80005a8 <SELECT>

    switch (ctrl)
 8000d8c:	79bb      	ldrb	r3, [r7, #6]
 8000d8e:	2b0d      	cmp	r3, #13
 8000d90:	f200 80cc 	bhi.w	8000f2c <SD_disk_ioctl+0x234>
 8000d94:	a201      	add	r2, pc, #4	; (adr r2, 8000d9c <SD_disk_ioctl+0xa4>)
 8000d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d9a:	bf00      	nop
 8000d9c:	08000e97 	.word	0x08000e97
 8000da0:	08000dd5 	.word	0x08000dd5
 8000da4:	08000e87 	.word	0x08000e87
 8000da8:	08000f2d 	.word	0x08000f2d
 8000dac:	08000f2d 	.word	0x08000f2d
 8000db0:	08000f2d 	.word	0x08000f2d
 8000db4:	08000f2d 	.word	0x08000f2d
 8000db8:	08000f2d 	.word	0x08000f2d
 8000dbc:	08000f2d 	.word	0x08000f2d
 8000dc0:	08000f2d 	.word	0x08000f2d
 8000dc4:	08000f2d 	.word	0x08000f2d
 8000dc8:	08000ea9 	.word	0x08000ea9
 8000dcc:	08000ecd 	.word	0x08000ecd
 8000dd0:	08000ef1 	.word	0x08000ef1
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2049      	movs	r0, #73	; 0x49
 8000dd8:	f7ff fd4e 	bl	8000878 <SD_SendCmd>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f040 80a8 	bne.w	8000f34 <SD_disk_ioctl+0x23c>
 8000de4:	f107 030c 	add.w	r3, r7, #12
 8000de8:	2110      	movs	r1, #16
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fcba 	bl	8000764 <SD_RxDataBlock>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f000 809e 	beq.w	8000f34 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8000df8:	7b3b      	ldrb	r3, [r7, #12]
 8000dfa:	099b      	lsrs	r3, r3, #6
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d10e      	bne.n	8000e20 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000e02:	7d7b      	ldrb	r3, [r7, #21]
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	7d3b      	ldrb	r3, [r7, #20]
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	021b      	lsls	r3, r3, #8
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	4413      	add	r3, r2
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	3301      	adds	r3, #1
 8000e14:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000e16:	8bfb      	ldrh	r3, [r7, #30]
 8000e18:	029a      	lsls	r2, r3, #10
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	e02e      	b.n	8000e7e <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e20:	7c7b      	ldrb	r3, [r7, #17]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	7dbb      	ldrb	r3, [r7, #22]
 8000e2a:	09db      	lsrs	r3, r3, #7
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	4413      	add	r3, r2
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	7d7b      	ldrb	r3, [r7, #21]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	f003 0306 	and.w	r3, r3, #6
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	4413      	add	r3, r2
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	3302      	adds	r3, #2
 8000e44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e48:	7d3b      	ldrb	r3, [r7, #20]
 8000e4a:	099b      	lsrs	r3, r3, #6
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	7cfb      	ldrb	r3, [r7, #19]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	4413      	add	r3, r2
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	7cbb      	ldrb	r3, [r7, #18]
 8000e5e:	029b      	lsls	r3, r3, #10
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	4413      	add	r3, r2
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e70:	8bfa      	ldrh	r2, [r7, #30]
 8000e72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e76:	3b09      	subs	r3, #9
 8000e78:	409a      	lsls	r2, r3
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000e84:	e056      	b.n	8000f34 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e8c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e94:	e055      	b.n	8000f42 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000e96:	f7ff fbe5 	bl	8000664 <SD_ReadyWait>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2bff      	cmp	r3, #255	; 0xff
 8000e9e:	d14b      	bne.n	8000f38 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000ea6:	e047      	b.n	8000f38 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2049      	movs	r0, #73	; 0x49
 8000eac:	f7ff fce4 	bl	8000878 <SD_SendCmd>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d142      	bne.n	8000f3c <SD_disk_ioctl+0x244>
 8000eb6:	2110      	movs	r1, #16
 8000eb8:	6a38      	ldr	r0, [r7, #32]
 8000eba:	f7ff fc53 	bl	8000764 <SD_RxDataBlock>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d03b      	beq.n	8000f3c <SD_disk_ioctl+0x244>
        res = RES_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000eca:	e037      	b.n	8000f3c <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000ecc:	2100      	movs	r1, #0
 8000ece:	204a      	movs	r0, #74	; 0x4a
 8000ed0:	f7ff fcd2 	bl	8000878 <SD_SendCmd>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d132      	bne.n	8000f40 <SD_disk_ioctl+0x248>
 8000eda:	2110      	movs	r1, #16
 8000edc:	6a38      	ldr	r0, [r7, #32]
 8000ede:	f7ff fc41 	bl	8000764 <SD_RxDataBlock>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d02b      	beq.n	8000f40 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000eee:	e027      	b.n	8000f40 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	207a      	movs	r0, #122	; 0x7a
 8000ef4:	f7ff fcc0 	bl	8000878 <SD_SendCmd>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d116      	bne.n	8000f2c <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f04:	e00b      	b.n	8000f1e <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8000f06:	6a3c      	ldr	r4, [r7, #32]
 8000f08:	1c63      	adds	r3, r4, #1
 8000f0a:	623b      	str	r3, [r7, #32]
 8000f0c:	f7ff fb7e 	bl	800060c <SPI_RxByte>
 8000f10:	4603      	mov	r3, r0
 8000f12:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000f14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f18:	3301      	adds	r3, #1
 8000f1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f22:	2b03      	cmp	r3, #3
 8000f24:	d9ef      	bls.n	8000f06 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f32:	e006      	b.n	8000f42 <SD_disk_ioctl+0x24a>
      break;
 8000f34:	bf00      	nop
 8000f36:	e004      	b.n	8000f42 <SD_disk_ioctl+0x24a>
      break;
 8000f38:	bf00      	nop
 8000f3a:	e002      	b.n	8000f42 <SD_disk_ioctl+0x24a>
      break;
 8000f3c:	bf00      	nop
 8000f3e:	e000      	b.n	8000f42 <SD_disk_ioctl+0x24a>
      break;
 8000f40:	bf00      	nop
    }

    DESELECT();
 8000f42:	f7ff fb3d 	bl	80005c0 <DESELECT>
    SPI_RxByte();
 8000f46:	f7ff fb61 	bl	800060c <SPI_RxByte>
  }

  return res;
 8000f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	372c      	adds	r7, #44	; 0x2c
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd90      	pop	{r4, r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000000 	.word	0x20000000

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b092      	sub	sp, #72	; 0x48
 8000f60:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f62:	f004 ff8b 	bl	8005e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f66:	f000 fa83 	bl	8001470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6a:	f000 fb9f 	bl	80016ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f6e:	f000 fb73 	bl	8001658 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000f72:	f000 faeb 	bl	800154c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000f76:	f000 fb1f 	bl	80015b8 <MX_TIM1_Init>
  MX_FATFS_Init();
 8000f7a:	f007 fa9f 	bl	80084bc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

	tft_gpio_init(); 			//Inicializa os GPIOs do LCD (evita uso do CubeMX)
 8000f7e:	f004 fee1 	bl	8005d44 <tft_gpio_init>
	HAL_TIM_Base_Start(&htim1); //Inicializa o Timer1 (base de tempo de us do LCD)
 8000f82:	4829      	ldr	r0, [pc, #164]	; (8001028 <main+0xcc>)
 8000f84:	f006 fc9e 	bl	80078c4 <HAL_TIM_Base_Start>
	HAL_Delay(100);
 8000f88:	2064      	movs	r0, #100	; 0x64
 8000f8a:	f004 ffe9 	bl	8005f60 <HAL_Delay>
	uint16_t ID = tft_readID();
 8000f8e:	f002 fb7f 	bl	8003690 <readID>
 8000f92:	4603      	mov	r3, r0
 8000f94:	877b      	strh	r3, [r7, #58]	; 0x3a
	tft_init(ID); 				//Inicializa o LCD de acordo com seu ID
 8000f96:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f001 fff3 	bl	8002f84 <tft_init>
	setRotation(0);
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f003 faa6 	bl	80044f0 <setRotation>
	HAL_Delay(100);				//Ajusta a orientação da tela
 8000fa4:	2064      	movs	r0, #100	; 0x64
 8000fa6:	f004 ffdb 	bl	8005f60 <HAL_Delay>
	fillScreen(BLACK);			//Preenche a tela em uma só cor
 8000faa:	2000      	movs	r0, #0
 8000fac:	f004 f876 	bl	800509c <fillScreen>
	HAL_Delay(100);							//Mensagem de texto
 8000fb0:	2064      	movs	r0, #100	; 0x64
 8000fb2:	f004 ffd5 	bl	8005f60 <HAL_Delay>
 *
 *
 *
 */

	size = sprintf(texto, "Exemplo de LEITURA de BITMAP e escrita no LCD\r\n");
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	491c      	ldr	r1, [pc, #112]	; (800102c <main+0xd0>)
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f00a fa49 	bl	800b454 <siprintf>
 8000fc2:	6378      	str	r0, [r7, #52]	; 0x34
	HAL_UART_Transmit(&huart2, (uint8_t *)texto, size, 100);
 8000fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	f107 010c 	add.w	r1, r7, #12
 8000fcc:	2364      	movs	r3, #100	; 0x64
 8000fce:	4818      	ldr	r0, [pc, #96]	; (8001030 <main+0xd4>)
 8000fd0:	f006 ffab 	bl	8007f2a <HAL_UART_Transmit>

	//Prepara a área de trabalho para o FatFs
	fr = f_mount(&fs0, "", 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	4917      	ldr	r1, [pc, #92]	; (8001034 <main+0xd8>)
 8000fd8:	4817      	ldr	r0, [pc, #92]	; (8001038 <main+0xdc>)
 8000fda:	f009 fccd 	bl	800a978 <f_mount>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <main+0xe0>)
 8000fe4:	701a      	strb	r2, [r3, #0]
	if(fr != FR_OK)
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <main+0xe0>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d02e      	beq.n	800104c <main+0xf0>
		{
			size = sprintf(texto, "f_mount error: %d\r\n", (int)fr);
 8000fee:	4b13      	ldr	r3, [pc, #76]	; (800103c <main+0xe0>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	4911      	ldr	r1, [pc, #68]	; (8001040 <main+0xe4>)
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f00a fa2a 	bl	800b454 <siprintf>
 8001000:	6378      	str	r0, [r7, #52]	; 0x34
			HAL_UART_Transmit(&huart2, (uint8_t *)texto, size, 100);
 8001002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001004:	b29a      	uxth	r2, r3
 8001006:	f107 010c 	add.w	r1, r7, #12
 800100a:	2364      	movs	r3, #100	; 0x64
 800100c:	4808      	ldr	r0, [pc, #32]	; (8001030 <main+0xd4>)
 800100e:	f006 ff8c 	bl	8007f2a <HAL_UART_Transmit>
			printnewtstr(100, RED, &mono12x7bold, 1,
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <main+0xe8>)
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2301      	movs	r3, #1
 8001018:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <main+0xec>)
 800101a:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 800101e:	2064      	movs	r0, #100	; 0x64
 8001020:	f004 fcc4 	bl	80059ac <printnewtstr>
			(uint8_t *)"Falha!!!");
			return 1;
 8001024:	2301      	movs	r3, #1
 8001026:	e20a      	b.n	800143e <main+0x4e2>
 8001028:	200043b0 	.word	0x200043b0
 800102c:	0800bcc8 	.word	0x0800bcc8
 8001030:	20005490 	.word	0x20005490
 8001034:	0800bcf8 	.word	0x0800bcf8
 8001038:	20003378 	.word	0x20003378
 800103c:	200043fc 	.word	0x200043fc
 8001040:	0800bcfc 	.word	0x0800bcfc
 8001044:	0800bd10 	.word	0x0800bd10
 8001048:	0800c840 	.word	0x0800c840

	while(1)
{
	// Primeira Imagem - A noite estrelada

	first = 1;
 800104c:	2301      	movs	r3, #1
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
						//"Limpa" o buffer
	buffer[0] = 0;
 8001050:	4bb8      	ldr	r3, [pc, #736]	; (8001334 <main+0x3d8>)
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
						//Define o nome do arquivo BMP 24 bits a ser aberto
	strcpy(nome, "van.bmp");
 8001056:	463b      	mov	r3, r7
 8001058:	4ab7      	ldr	r2, [pc, #732]	; (8001338 <main+0x3dc>)
 800105a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800105e:	e883 0003 	stmia.w	r3, {r0, r1}
						//strcpy(buffer, "Imagens/Lisa.bmp");
						//Abre o arquivo como leitura
	fr = f_open(&fsrc, nome, FA_READ);
 8001062:	463b      	mov	r3, r7
 8001064:	2201      	movs	r2, #1
 8001066:	4619      	mov	r1, r3
 8001068:	48b4      	ldr	r0, [pc, #720]	; (800133c <main+0x3e0>)
 800106a:	f009 fccb 	bl	800aa04 <f_open>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	4bb3      	ldr	r3, [pc, #716]	; (8001340 <main+0x3e4>)
 8001074:	701a      	strb	r2, [r3, #0]
						//Se teve sucesso
	if(fr == FR_OK)
 8001076:	4bb2      	ldr	r3, [pc, #712]	; (8001340 <main+0x3e4>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d14a      	bne.n	8001114 <main+0x1b8>
	{
						//Loop de leitura de setores (512 bytes), lê até acabar o arquivo
		do
			{
				//Lê um setor do arquivo e armazena no buffer temporário
				fr = f_read(&fsrc,	// [IN] File object
 800107e:	4bb1      	ldr	r3, [pc, #708]	; (8001344 <main+0x3e8>)
 8001080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001084:	49ab      	ldr	r1, [pc, #684]	; (8001334 <main+0x3d8>)
 8001086:	48ad      	ldr	r0, [pc, #692]	; (800133c <main+0x3e0>)
 8001088:	f009 fe88 	bl	800ad9c <f_read>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	4bab      	ldr	r3, [pc, #684]	; (8001340 <main+0x3e4>)
 8001092:	701a      	strb	r2, [r3, #0]
				buffer, 			// [OUT] Buffer to store read data
				512, 				// [IN] Number of bytes to read
				(UINT *)&br); 		// [OUT] Number of bytes read

				//Se ocorrer algum erro mostra na UART e aborta
				if(fr != FR_OK)
 8001094:	4baa      	ldr	r3, [pc, #680]	; (8001340 <main+0x3e4>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d011      	beq.n	80010c0 <main+0x164>
					{
						size = sprintf(texto, "f_read error: %d\r\n", (int)fr);
 800109c:	4ba8      	ldr	r3, [pc, #672]	; (8001340 <main+0x3e4>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	49a8      	ldr	r1, [pc, #672]	; (8001348 <main+0x3ec>)
 80010a8:	4618      	mov	r0, r3
 80010aa:	f00a f9d3 	bl	800b454 <siprintf>
 80010ae:	6378      	str	r0, [r7, #52]	; 0x34
						HAL_UART_Transmit(&huart2, (uint8_t *)texto, size, 100);
 80010b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	f107 010c 	add.w	r1, r7, #12
 80010b8:	2364      	movs	r3, #100	; 0x64
 80010ba:	48a4      	ldr	r0, [pc, #656]	; (800134c <main+0x3f0>)
 80010bc:	f006 ff35 	bl	8007f2a <HAL_UART_Transmit>
					}
				//Termina o bloco lido com um caractere nulo (sem efeito para o LCD)
				buffer[br] = 0;
 80010c0:	4ba0      	ldr	r3, [pc, #640]	; (8001344 <main+0x3e8>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a9b      	ldr	r2, [pc, #620]	; (8001334 <main+0x3d8>)
 80010c6:	2100      	movs	r1, #0
 80010c8:	54d1      	strb	r1, [r2, r3]

				//Envia o setor para o LCD
				LCD_TxBMP((unsigned char*)buffer, first);
 80010ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80010cc:	4899      	ldr	r0, [pc, #612]	; (8001334 <main+0x3d8>)
 80010ce:	f000 fb5b 	bl	8001788 <LCD_TxBMP>

				//Limpa a flag de primeiro setor (cabeçalho nos primeiros 54 bytes)
				first = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	63fb      	str	r3, [r7, #60]	; 0x3c
			}	while(br == 512);
 80010d6:	4b9b      	ldr	r3, [pc, #620]	; (8001344 <main+0x3e8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010de:	d0ce      	beq.n	800107e <main+0x122>
				//Repete até a quantidade lida for menor que o buffer, indicação que acabou o arquivo (último pacote)

		//Fecha o arquivo (não é necessário para leitura, mas recomendado para compatibilidade futura)
		fr = f_close(&fsrc);
 80010e0:	4896      	ldr	r0, [pc, #600]	; (800133c <main+0x3e0>)
 80010e2:	f00a f838 	bl	800b156 <f_close>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b95      	ldr	r3, [pc, #596]	; (8001340 <main+0x3e4>)
 80010ec:	701a      	strb	r2, [r3, #0]

		//Se teve sucesso
		if (fr == FR_OK)
 80010ee:	4b94      	ldr	r3, [pc, #592]	; (8001340 <main+0x3e4>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d10e      	bne.n	8001114 <main+0x1b8>
			{
				size = sprintf(texto, "\r\nArquivo fechado com sucesso\r\n");
 80010f6:	f107 030c 	add.w	r3, r7, #12
 80010fa:	4995      	ldr	r1, [pc, #596]	; (8001350 <main+0x3f4>)
 80010fc:	4618      	mov	r0, r3
 80010fe:	f00a f9a9 	bl	800b454 <siprintf>
 8001102:	6378      	str	r0, [r7, #52]	; 0x34
				HAL_UART_Transmit(&huart2, (uint8_t *)texto, size, 100);
 8001104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001106:	b29a      	uxth	r2, r3
 8001108:	f107 010c 	add.w	r1, r7, #12
 800110c:	2364      	movs	r3, #100	; 0x64
 800110e:	488f      	ldr	r0, [pc, #572]	; (800134c <main+0x3f0>)
 8001110:	f006 ff0b 	bl	8007f2a <HAL_UART_Transmit>
			}
	}
	if (fr == FR_OK)
 8001114:	4b8a      	ldr	r3, [pc, #552]	; (8001340 <main+0x3e4>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d10e      	bne.n	800113a <main+0x1de>
		{
			size = sprintf(texto, "\r\nArquivo 1 lido com sucesso\r\n");
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	498c      	ldr	r1, [pc, #560]	; (8001354 <main+0x3f8>)
 8001122:	4618      	mov	r0, r3
 8001124:	f00a f996 	bl	800b454 <siprintf>
 8001128:	6378      	str	r0, [r7, #52]	; 0x34
			HAL_UART_Transmit(&huart2, (uint8_t *)texto, size, 100);
 800112a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800112c:	b29a      	uxth	r2, r3
 800112e:	f107 010c 	add.w	r1, r7, #12
 8001132:	2364      	movs	r3, #100	; 0x64
 8001134:	4885      	ldr	r0, [pc, #532]	; (800134c <main+0x3f0>)
 8001136:	f006 fef8 	bl	8007f2a <HAL_UART_Transmit>
		}
	HAL_Delay(3000);
 800113a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800113e:	f004 ff0f 	bl	8005f60 <HAL_Delay>
	printnewtstr(20, YELLOW, &mono12x7bold, 1,	(uint8_t *)"A Noite Estrelada");
 8001142:	4b85      	ldr	r3, [pc, #532]	; (8001358 <main+0x3fc>)
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2301      	movs	r3, #1
 8001148:	4a84      	ldr	r2, [pc, #528]	; (800135c <main+0x400>)
 800114a:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 800114e:	2014      	movs	r0, #20
 8001150:	f004 fc2c 	bl	80059ac <printnewtstr>
	printnewtstr(50, YELLOW, &mono12x7bold, 1,	(uint8_t *)"Vincent Van Gogh");
 8001154:	4b82      	ldr	r3, [pc, #520]	; (8001360 <main+0x404>)
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2301      	movs	r3, #1
 800115a:	4a80      	ldr	r2, [pc, #512]	; (800135c <main+0x400>)
 800115c:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8001160:	2032      	movs	r0, #50	; 0x32
 8001162:	f004 fc23 	bl	80059ac <printnewtstr>
	printnewtstr(70, YELLOW, &mono12x7bold, 1, 	(uint8_t *)"Junho 1889");
 8001166:	4b7f      	ldr	r3, [pc, #508]	; (8001364 <main+0x408>)
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2301      	movs	r3, #1
 800116c:	4a7b      	ldr	r2, [pc, #492]	; (800135c <main+0x400>)
 800116e:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8001172:	2046      	movs	r0, #70	; 0x46
 8001174:	f004 fc1a 	bl	80059ac <printnewtstr>
	HAL_Delay(2000);
 8001178:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800117c:	f004 fef0 	bl	8005f60 <HAL_Delay>
	fillScreen(BLACK);
 8001180:	2000      	movs	r0, #0
 8001182:	f003 ff8b 	bl	800509c <fillScreen>
	HAL_Delay(2000);
 8001186:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800118a:	f004 fee9 	bl	8005f60 <HAL_Delay>

	//2ª Imagem - Mona Lisa

	first = 1;
 800118e:	2301      	movs	r3, #1
 8001190:	63fb      	str	r3, [r7, #60]	; 0x3c
	//"Limpa" o buffer
	buffer[0] = 0;
 8001192:	4b68      	ldr	r3, [pc, #416]	; (8001334 <main+0x3d8>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
	//Define o nome do arquivo BMP 24 bits a ser aberto

	strcpy(nome, "mona.bmp");
 8001198:	463b      	mov	r3, r7
 800119a:	4a73      	ldr	r2, [pc, #460]	; (8001368 <main+0x40c>)
 800119c:	ca07      	ldmia	r2, {r0, r1, r2}
 800119e:	c303      	stmia	r3!, {r0, r1}
 80011a0:	701a      	strb	r2, [r3, #0]

	//Abre o arquivo como leitura
	fr = f_open(&fsrc, nome, FA_READ);
 80011a2:	463b      	mov	r3, r7
 80011a4:	2201      	movs	r2, #1
 80011a6:	4619      	mov	r1, r3
 80011a8:	4864      	ldr	r0, [pc, #400]	; (800133c <main+0x3e0>)
 80011aa:	f009 fc2b 	bl	800aa04 <f_open>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b63      	ldr	r3, [pc, #396]	; (8001340 <main+0x3e4>)
 80011b4:	701a      	strb	r2, [r3, #0]

	//Se teve sucesso
	if(fr == FR_OK)
 80011b6:	4b62      	ldr	r3, [pc, #392]	; (8001340 <main+0x3e4>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d14a      	bne.n	8001254 <main+0x2f8>
		{
			//Loop de leitura de setores (512 bytes), lê até acabar o arquivo
			do
				{
					//Lê um setor do arquivo e armazena no buffer temporário
					fr = f_read(&fsrc, 	// [IN] File object
 80011be:	4b61      	ldr	r3, [pc, #388]	; (8001344 <main+0x3e8>)
 80011c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c4:	495b      	ldr	r1, [pc, #364]	; (8001334 <main+0x3d8>)
 80011c6:	485d      	ldr	r0, [pc, #372]	; (800133c <main+0x3e0>)
 80011c8:	f009 fde8 	bl	800ad9c <f_read>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b5b      	ldr	r3, [pc, #364]	; (8001340 <main+0x3e4>)
 80011d2:	701a      	strb	r2, [r3, #0]
							buffer, 			// [OUT] Buffer to store read data
							512, 				// [IN] Number of bytes to read
							(UINT *)&br); 		// [OUT] Number of bytes read

	//Se ocorrer algum erro mostra na UART e aborta
					if(fr != FR_OK)
 80011d4:	4b5a      	ldr	r3, [pc, #360]	; (8001340 <main+0x3e4>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d011      	beq.n	8001200 <main+0x2a4>
						{
							size = sprintf(texto, "f_mount error: %d\r\n", (int)fr);
 80011dc:	4b58      	ldr	r3, [pc, #352]	; (8001340 <main+0x3e4>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	4961      	ldr	r1, [pc, #388]	; (800136c <main+0x410>)
 80011e8:	4618      	mov	r0, r3
 80011ea:	f00a f933 	bl	800b454 <siprintf>
 80011ee:	6378      	str	r0, [r7, #52]	; 0x34
							HAL_UART_Transmit(&huart2, (uint8_t *)texto, size, 100);
 80011f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	f107 010c 	add.w	r1, r7, #12
 80011f8:	2364      	movs	r3, #100	; 0x64
 80011fa:	4854      	ldr	r0, [pc, #336]	; (800134c <main+0x3f0>)
 80011fc:	f006 fe95 	bl	8007f2a <HAL_UART_Transmit>
						}
					//Termina o bloco lido com um caractere nulo (sem efeito para o LCD)
					buffer[br] = 0;
 8001200:	4b50      	ldr	r3, [pc, #320]	; (8001344 <main+0x3e8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a4b      	ldr	r2, [pc, #300]	; (8001334 <main+0x3d8>)
 8001206:	2100      	movs	r1, #0
 8001208:	54d1      	strb	r1, [r2, r3]
					// {
					// size = sprintf(texto, "%02X ",buffer[i]);
					// HAL_UART_Transmit(&huart2, (uint8_t *)texto, size, 1000);
					// }
					//Envia o setor para o LCD
					LCD_TxBMP((unsigned char*)buffer, first);
 800120a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800120c:	4849      	ldr	r0, [pc, #292]	; (8001334 <main+0x3d8>)
 800120e:	f000 fabb 	bl	8001788 <LCD_TxBMP>
					//Limpa a flag de primeiro setor (cabeçalho nos primeiros 54 bytes)
					first = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	63fb      	str	r3, [r7, #60]	; 0x3c
				}while(br == 512);
 8001216:	4b4b      	ldr	r3, [pc, #300]	; (8001344 <main+0x3e8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800121e:	d0ce      	beq.n	80011be <main+0x262>
				//Repete até a quantidade lida for menor que o buffer, indicação que acabou o arquivo (último pacote)

			//Fecha o arquivo (não é necessário para leitura, mas recomendado para compatibilidade futura)
			fr = f_close(&fsrc);
 8001220:	4846      	ldr	r0, [pc, #280]	; (800133c <main+0x3e0>)
 8001222:	f009 ff98 	bl	800b156 <f_close>
 8001226:	4603      	mov	r3, r0
 8001228:	461a      	mov	r2, r3
 800122a:	4b45      	ldr	r3, [pc, #276]	; (8001340 <main+0x3e4>)
 800122c:	701a      	strb	r2, [r3, #0]

			//Se teve sucesso
			if (fr == FR_OK)
 800122e:	4b44      	ldr	r3, [pc, #272]	; (8001340 <main+0x3e4>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10e      	bne.n	8001254 <main+0x2f8>
				{
					size = sprintf(texto, "\r\nArquivo fechado com sucesso\r\n");
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	4945      	ldr	r1, [pc, #276]	; (8001350 <main+0x3f4>)
 800123c:	4618      	mov	r0, r3
 800123e:	f00a f909 	bl	800b454 <siprintf>
 8001242:	6378      	str	r0, [r7, #52]	; 0x34
					HAL_UART_Transmit(&huart2, (uint8_t *)texto, size, 100);
 8001244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001246:	b29a      	uxth	r2, r3
 8001248:	f107 010c 	add.w	r1, r7, #12
 800124c:	2364      	movs	r3, #100	; 0x64
 800124e:	483f      	ldr	r0, [pc, #252]	; (800134c <main+0x3f0>)
 8001250:	f006 fe6b 	bl	8007f2a <HAL_UART_Transmit>
				}
		}
	if (fr == FR_OK)
 8001254:	4b3a      	ldr	r3, [pc, #232]	; (8001340 <main+0x3e4>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d10e      	bne.n	800127a <main+0x31e>
		{
		size = sprintf(texto, "\r\nArquivo 2 lido com sucesso\r\n");
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	4943      	ldr	r1, [pc, #268]	; (8001370 <main+0x414>)
 8001262:	4618      	mov	r0, r3
 8001264:	f00a f8f6 	bl	800b454 <siprintf>
 8001268:	6378      	str	r0, [r7, #52]	; 0x34
		HAL_UART_Transmit(&huart2, (uint8_t *)texto, size, 100);
 800126a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800126c:	b29a      	uxth	r2, r3
 800126e:	f107 010c 	add.w	r1, r7, #12
 8001272:	2364      	movs	r3, #100	; 0x64
 8001274:	4835      	ldr	r0, [pc, #212]	; (800134c <main+0x3f0>)
 8001276:	f006 fe58 	bl	8007f2a <HAL_UART_Transmit>
		}
	HAL_Delay(3000);
 800127a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800127e:	f004 fe6f 	bl	8005f60 <HAL_Delay>
	printnewtstr(200, YELLOW, &mono12x7bold, 1,		(uint8_t *)"Gioconda");
 8001282:	4b3c      	ldr	r3, [pc, #240]	; (8001374 <main+0x418>)
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	2301      	movs	r3, #1
 8001288:	4a34      	ldr	r2, [pc, #208]	; (800135c <main+0x400>)
 800128a:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 800128e:	20c8      	movs	r0, #200	; 0xc8
 8001290:	f004 fb8c 	bl	80059ac <printnewtstr>
	printnewtstr(220, YELLOW, &mono12x7bold, 1,		(uint8_t *)"Leonardo da Vinci");
 8001294:	4b38      	ldr	r3, [pc, #224]	; (8001378 <main+0x41c>)
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	2301      	movs	r3, #1
 800129a:	4a30      	ldr	r2, [pc, #192]	; (800135c <main+0x400>)
 800129c:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80012a0:	20dc      	movs	r0, #220	; 0xdc
 80012a2:	f004 fb83 	bl	80059ac <printnewtstr>
	printnewtstr(240, YELLOW, &mono12x7bold, 1,		(uint8_t *)"Ano: 1503");
 80012a6:	4b35      	ldr	r3, [pc, #212]	; (800137c <main+0x420>)
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2301      	movs	r3, #1
 80012ac:	4a2b      	ldr	r2, [pc, #172]	; (800135c <main+0x400>)
 80012ae:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80012b2:	20f0      	movs	r0, #240	; 0xf0
 80012b4:	f004 fb7a 	bl	80059ac <printnewtstr>
	HAL_Delay(2000);
 80012b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012bc:	f004 fe50 	bl	8005f60 <HAL_Delay>
	fillScreen(BLACK);
 80012c0:	2000      	movs	r0, #0
 80012c2:	f003 feeb 	bl	800509c <fillScreen>
	HAL_Delay(2000);
 80012c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012ca:	f004 fe49 	bl	8005f60 <HAL_Delay>
/*
 * 3ª Imagem - Venus de Milo
 */

	//Primeiro bloco de dados onde está o cabeçalho
	first = 1;
 80012ce:	2301      	movs	r3, #1
 80012d0:	63fb      	str	r3, [r7, #60]	; 0x3c

	//Limpa o buffer
	buffer[0]=0;
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <main+0x3d8>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]

	//Passa o nome do arquivo BMP que será aberto
	strcpy(nome, "venus.bmp");
 80012d8:	4a29      	ldr	r2, [pc, #164]	; (8001380 <main+0x424>)
 80012da:	463b      	mov	r3, r7
 80012dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80012de:	c303      	stmia	r3!, {r0, r1}
 80012e0:	801a      	strh	r2, [r3, #0]

	//Abre o arquivo em modo somente leitura
	fr = f_open(&fsrc, nome, FA_READ);
 80012e2:	463b      	mov	r3, r7
 80012e4:	2201      	movs	r2, #1
 80012e6:	4619      	mov	r1, r3
 80012e8:	4814      	ldr	r0, [pc, #80]	; (800133c <main+0x3e0>)
 80012ea:	f009 fb8b 	bl	800aa04 <f_open>
 80012ee:	4603      	mov	r3, r0
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <main+0x3e4>)
 80012f4:	701a      	strb	r2, [r3, #0]

	if(fr == FR_OK)
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <main+0x3e4>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d15a      	bne.n	80013b4 <main+0x458>
	{
		do
		{
			fr = f_read(&fsrc, 		//[IN]	Endereço do objeto)
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <main+0x3e8>)
 8001300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001304:	490b      	ldr	r1, [pc, #44]	; (8001334 <main+0x3d8>)
 8001306:	480d      	ldr	r0, [pc, #52]	; (800133c <main+0x3e0>)
 8001308:	f009 fd48 	bl	800ad9c <f_read>
 800130c:	4603      	mov	r3, r0
 800130e:	461a      	mov	r2, r3
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <main+0x3e4>)
 8001312:	701a      	strb	r2, [r3, #0]
						buffer,		//[OUT]	Buffer para armazenar os dados
						512,		//[IN]	Quantidade de bytes a ser lida
						(UINT *)&br);//[OUT]Número de bytes lidos

			//Se ocorrer erro, informa na UART e cancela a operação
			if(fr != FR_OK)
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <main+0x3e4>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d03b      	beq.n	8001394 <main+0x438>
			{
				size = sprintf(texto, "f_read error: %d\r\n", (int)fr);
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <main+0x3e4>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	4908      	ldr	r1, [pc, #32]	; (8001348 <main+0x3ec>)
 8001328:	4618      	mov	r0, r3
 800132a:	f00a f893 	bl	800b454 <siprintf>
 800132e:	6378      	str	r0, [r7, #52]	; 0x34
 8001330:	e028      	b.n	8001384 <main+0x428>
 8001332:	bf00      	nop
 8001334:	20002378 	.word	0x20002378
 8001338:	0800bd1c 	.word	0x0800bd1c
 800133c:	20001348 	.word	0x20001348
 8001340:	200043fc 	.word	0x200043fc
 8001344:	20001344 	.word	0x20001344
 8001348:	0800bd24 	.word	0x0800bd24
 800134c:	20005490 	.word	0x20005490
 8001350:	0800bd38 	.word	0x0800bd38
 8001354:	0800bd58 	.word	0x0800bd58
 8001358:	0800bd78 	.word	0x0800bd78
 800135c:	0800c840 	.word	0x0800c840
 8001360:	0800bd8c 	.word	0x0800bd8c
 8001364:	0800bda0 	.word	0x0800bda0
 8001368:	0800bdac 	.word	0x0800bdac
 800136c:	0800bcfc 	.word	0x0800bcfc
 8001370:	0800bdb8 	.word	0x0800bdb8
 8001374:	0800bdd8 	.word	0x0800bdd8
 8001378:	0800bde4 	.word	0x0800bde4
 800137c:	0800bdf8 	.word	0x0800bdf8
 8001380:	0800be04 	.word	0x0800be04
				HAL_UART_Transmit(&huart2, (uint8_t *)texto, size, 100);
 8001384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001386:	b29a      	uxth	r2, r3
 8001388:	f107 010c 	add.w	r1, r7, #12
 800138c:	2364      	movs	r3, #100	; 0x64
 800138e:	482e      	ldr	r0, [pc, #184]	; (8001448 <main+0x4ec>)
 8001390:	f006 fdcb 	bl	8007f2a <HAL_UART_Transmit>
			}
			//Termina o bloco lido com um caractere nulo
			buffer[br] = 0;
 8001394:	4b2d      	ldr	r3, [pc, #180]	; (800144c <main+0x4f0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a2d      	ldr	r2, [pc, #180]	; (8001450 <main+0x4f4>)
 800139a:	2100      	movs	r1, #0
 800139c:	54d1      	strb	r1, [r2, r3]
					size = sprintf(texto, "%02X ",buffer[i]);
					HAL_UART_Transmit(&huart2, (uint8_t *)texto, size, 1000);
			 	}
*/
			//Envia o setor para o LCD
			LCD_TxBMP((unsigned char*)buffer, first);
 800139e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80013a0:	482b      	ldr	r0, [pc, #172]	; (8001450 <main+0x4f4>)
 80013a2:	f000 f9f1 	bl	8001788 <LCD_TxBMP>
			//Limpa a flag de 1º setor, cabeçalho nos 1ºs 54 bytes
			first = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	63fb      	str	r3, [r7, #60]	; 0x3c
			//Repete até a quantidade lida seja menor que o buffer, indicando EOF
		}	while(br == 512);
 80013aa:	4b28      	ldr	r3, [pc, #160]	; (800144c <main+0x4f0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013b2:	d0a4      	beq.n	80012fe <main+0x3a2>
	}

		//Fecha o arquivo
		fr = f_close(&fsrc);
 80013b4:	4827      	ldr	r0, [pc, #156]	; (8001454 <main+0x4f8>)
 80013b6:	f009 fece 	bl	800b156 <f_close>
 80013ba:	4603      	mov	r3, r0
 80013bc:	461a      	mov	r2, r3
 80013be:	4b26      	ldr	r3, [pc, #152]	; (8001458 <main+0x4fc>)
 80013c0:	701a      	strb	r2, [r3, #0]

		if(fr == FR_OK)
 80013c2:	4b25      	ldr	r3, [pc, #148]	; (8001458 <main+0x4fc>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10e      	bne.n	80013e8 <main+0x48c>
		{
			size = sprintf(texto, "\r\nArquivo 1 lido com sucesso\r\n");
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	4923      	ldr	r1, [pc, #140]	; (800145c <main+0x500>)
 80013d0:	4618      	mov	r0, r3
 80013d2:	f00a f83f 	bl	800b454 <siprintf>
 80013d6:	6378      	str	r0, [r7, #52]	; 0x34
			HAL_UART_Transmit(&huart2, (uint8_t *)texto, size, 100);
 80013d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013da:	b29a      	uxth	r2, r3
 80013dc:	f107 010c 	add.w	r1, r7, #12
 80013e0:	2364      	movs	r3, #100	; 0x64
 80013e2:	4819      	ldr	r0, [pc, #100]	; (8001448 <main+0x4ec>)
 80013e4:	f006 fda1 	bl	8007f2a <HAL_UART_Transmit>
		}

		HAL_Delay(3000);
 80013e8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80013ec:	f004 fdb8 	bl	8005f60 <HAL_Delay>
		printnewtstr(30, YELLOW, &mono12x7bold, 1,	(uint8_t *)"Venus");
 80013f0:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <main+0x504>)
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2301      	movs	r3, #1
 80013f6:	4a1b      	ldr	r2, [pc, #108]	; (8001464 <main+0x508>)
 80013f8:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80013fc:	201e      	movs	r0, #30
 80013fe:	f004 fad5 	bl	80059ac <printnewtstr>
		printnewtstr(60, YELLOW, &mono12x7bold, 1,	(uint8_t *)"Sandro Botticelli");
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <main+0x50c>)
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	2301      	movs	r3, #1
 8001408:	4a16      	ldr	r2, [pc, #88]	; (8001464 <main+0x508>)
 800140a:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 800140e:	203c      	movs	r0, #60	; 0x3c
 8001410:	f004 facc 	bl	80059ac <printnewtstr>
		printnewtstr(90, YELLOW, &mono12x7bold, 1,	(uint8_t *)"Ano: 1486");
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <main+0x510>)
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	2301      	movs	r3, #1
 800141a:	4a12      	ldr	r2, [pc, #72]	; (8001464 <main+0x508>)
 800141c:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8001420:	205a      	movs	r0, #90	; 0x5a
 8001422:	f004 fac3 	bl	80059ac <printnewtstr>
		HAL_Delay(2000);
 8001426:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800142a:	f004 fd99 	bl	8005f60 <HAL_Delay>
		fillScreen(BLACK);
 800142e:	2000      	movs	r0, #0
 8001430:	f003 fe34 	bl	800509c <fillScreen>
		HAL_Delay(2000);
 8001434:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001438:	f004 fd92 	bl	8005f60 <HAL_Delay>
	first = 1;
 800143c:	e606      	b.n	800104c <main+0xf0>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800143e:	4618      	mov	r0, r3
 8001440:	3740      	adds	r7, #64	; 0x40
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20005490 	.word	0x20005490
 800144c:	20001344 	.word	0x20001344
 8001450:	20002378 	.word	0x20002378
 8001454:	20001348 	.word	0x20001348
 8001458:	200043fc 	.word	0x200043fc
 800145c:	0800bd58 	.word	0x0800bd58
 8001460:	0800be10 	.word	0x0800be10
 8001464:	0800c840 	.word	0x0800c840
 8001468:	0800be18 	.word	0x0800be18
 800146c:	0800be2c 	.word	0x0800be2c

08001470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b094      	sub	sp, #80	; 0x50
 8001474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	2234      	movs	r2, #52	; 0x34
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f009 ffe0 	bl	800b444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001494:	2300      	movs	r3, #0
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <SystemClock_Config+0xd4>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	4a29      	ldr	r2, [pc, #164]	; (8001544 <SystemClock_Config+0xd4>)
 800149e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a2:	6413      	str	r3, [r2, #64]	; 0x40
 80014a4:	4b27      	ldr	r3, [pc, #156]	; (8001544 <SystemClock_Config+0xd4>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014b0:	2300      	movs	r3, #0
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	4b24      	ldr	r3, [pc, #144]	; (8001548 <SystemClock_Config+0xd8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014bc:	4a22      	ldr	r2, [pc, #136]	; (8001548 <SystemClock_Config+0xd8>)
 80014be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	4b20      	ldr	r3, [pc, #128]	; (8001548 <SystemClock_Config+0xd8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014cc:	603b      	str	r3, [r7, #0]
 80014ce:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014d0:	2302      	movs	r3, #2
 80014d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d4:	2301      	movs	r3, #1
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014d8:	2310      	movs	r3, #16
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014dc:	2302      	movs	r3, #2
 80014de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014e0:	2300      	movs	r3, #0
 80014e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014e4:	2310      	movs	r3, #16
 80014e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80014ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014ee:	2304      	movs	r3, #4
 80014f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014f2:	2302      	movs	r3, #2
 80014f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014f6:	2302      	movs	r3, #2
 80014f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	4618      	mov	r0, r3
 8001500:	f005 fab2 	bl	8006a68 <HAL_RCC_OscConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800150a:	f000 fae9 	bl	8001ae0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150e:	230f      	movs	r3, #15
 8001510:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001512:	2302      	movs	r3, #2
 8001514:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800151a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001520:	2300      	movs	r3, #0
 8001522:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001524:	f107 0308 	add.w	r3, r7, #8
 8001528:	2102      	movs	r1, #2
 800152a:	4618      	mov	r0, r3
 800152c:	f004 ffd0 	bl	80064d0 <HAL_RCC_ClockConfig>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001536:	f000 fad3 	bl	8001ae0 <Error_Handler>
  }
}
 800153a:	bf00      	nop
 800153c:	3750      	adds	r7, #80	; 0x50
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800
 8001548:	40007000 	.word	0x40007000

0800154c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001550:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <MX_SPI1_Init+0x64>)
 8001552:	4a18      	ldr	r2, [pc, #96]	; (80015b4 <MX_SPI1_Init+0x68>)
 8001554:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001556:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <MX_SPI1_Init+0x64>)
 8001558:	f44f 7282 	mov.w	r2, #260	; 0x104
 800155c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800155e:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <MX_SPI1_Init+0x64>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <MX_SPI1_Init+0x64>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <MX_SPI1_Init+0x64>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <MX_SPI1_Init+0x64>)
 8001572:	2200      	movs	r2, #0
 8001574:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <MX_SPI1_Init+0x64>)
 8001578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800157c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <MX_SPI1_Init+0x64>)
 8001580:	2210      	movs	r2, #16
 8001582:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001584:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <MX_SPI1_Init+0x64>)
 8001586:	2200      	movs	r2, #0
 8001588:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <MX_SPI1_Init+0x64>)
 800158c:	2200      	movs	r2, #0
 800158e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <MX_SPI1_Init+0x64>)
 8001592:	2200      	movs	r2, #0
 8001594:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <MX_SPI1_Init+0x64>)
 8001598:	220a      	movs	r2, #10
 800159a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800159c:	4804      	ldr	r0, [pc, #16]	; (80015b0 <MX_SPI1_Init+0x64>)
 800159e:	f005 fd01 	bl	8006fa4 <HAL_SPI_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015a8:	f000 fa9a 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20005438 	.word	0x20005438
 80015b4:	40013000 	.word	0x40013000

080015b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015cc:	463b      	mov	r3, r7
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015d4:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <MX_TIM1_Init+0x98>)
 80015d6:	4a1f      	ldr	r2, [pc, #124]	; (8001654 <MX_TIM1_Init+0x9c>)
 80015d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80015da:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <MX_TIM1_Init+0x98>)
 80015dc:	2253      	movs	r2, #83	; 0x53
 80015de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <MX_TIM1_Init+0x98>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 80015e6:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <MX_TIM1_Init+0x98>)
 80015e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <MX_TIM1_Init+0x98>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <MX_TIM1_Init+0x98>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <MX_TIM1_Init+0x98>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001600:	4813      	ldr	r0, [pc, #76]	; (8001650 <MX_TIM1_Init+0x98>)
 8001602:	f006 f90f 	bl	8007824 <HAL_TIM_Base_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800160c:	f000 fa68 	bl	8001ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001614:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	4619      	mov	r1, r3
 800161c:	480c      	ldr	r0, [pc, #48]	; (8001650 <MX_TIM1_Init+0x98>)
 800161e:	f006 f9b9 	bl	8007994 <HAL_TIM_ConfigClockSource>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001628:	f000 fa5a 	bl	8001ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162c:	2300      	movs	r3, #0
 800162e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001634:	463b      	mov	r3, r7
 8001636:	4619      	mov	r1, r3
 8001638:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_TIM1_Init+0x98>)
 800163a:	f006 fbad 	bl	8007d98 <HAL_TIMEx_MasterConfigSynchronization>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001644:	f000 fa4c 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	200043b0 	.word	0x200043b0
 8001654:	40010000 	.word	0x40010000

08001658 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_USART2_UART_Init+0x4c>)
 800165e:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <MX_USART2_UART_Init+0x50>)
 8001660:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <MX_USART2_UART_Init+0x4c>)
 8001664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001668:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <MX_USART2_UART_Init+0x4c>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <MX_USART2_UART_Init+0x4c>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <MX_USART2_UART_Init+0x4c>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <MX_USART2_UART_Init+0x4c>)
 800167e:	220c      	movs	r2, #12
 8001680:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <MX_USART2_UART_Init+0x4c>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <MX_USART2_UART_Init+0x4c>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800168e:	4805      	ldr	r0, [pc, #20]	; (80016a4 <MX_USART2_UART_Init+0x4c>)
 8001690:	f006 fbfe 	bl	8007e90 <HAL_UART_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800169a:	f000 fa21 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20005490 	.word	0x20005490
 80016a8:	40004400 	.word	0x40004400

080016ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	4b2d      	ldr	r3, [pc, #180]	; (800177c <MX_GPIO_Init+0xd0>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a2c      	ldr	r2, [pc, #176]	; (800177c <MX_GPIO_Init+0xd0>)
 80016cc:	f043 0304 	orr.w	r3, r3, #4
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b2a      	ldr	r3, [pc, #168]	; (800177c <MX_GPIO_Init+0xd0>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0304 	and.w	r3, r3, #4
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	4b26      	ldr	r3, [pc, #152]	; (800177c <MX_GPIO_Init+0xd0>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a25      	ldr	r2, [pc, #148]	; (800177c <MX_GPIO_Init+0xd0>)
 80016e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b23      	ldr	r3, [pc, #140]	; (800177c <MX_GPIO_Init+0xd0>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	4b1f      	ldr	r3, [pc, #124]	; (800177c <MX_GPIO_Init+0xd0>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a1e      	ldr	r2, [pc, #120]	; (800177c <MX_GPIO_Init+0xd0>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b1c      	ldr	r3, [pc, #112]	; (800177c <MX_GPIO_Init+0xd0>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	4b18      	ldr	r3, [pc, #96]	; (800177c <MX_GPIO_Init+0xd0>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a17      	ldr	r2, [pc, #92]	; (800177c <MX_GPIO_Init+0xd0>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <MX_GPIO_Init+0xd0>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001732:	2201      	movs	r2, #1
 8001734:	2140      	movs	r1, #64	; 0x40
 8001736:	4812      	ldr	r0, [pc, #72]	; (8001780 <MX_GPIO_Init+0xd4>)
 8001738:	f004 feb0 	bl	800649c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800173c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001742:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	4619      	mov	r1, r3
 8001752:	480c      	ldr	r0, [pc, #48]	; (8001784 <MX_GPIO_Init+0xd8>)
 8001754:	f004 fd0e 	bl	8006174 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001758:	2340      	movs	r3, #64	; 0x40
 800175a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175c:	2301      	movs	r3, #1
 800175e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001764:	2301      	movs	r3, #1
 8001766:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4619      	mov	r1, r3
 800176e:	4804      	ldr	r0, [pc, #16]	; (8001780 <MX_GPIO_Init+0xd4>)
 8001770:	f004 fd00 	bl	8006174 <HAL_GPIO_Init>

}
 8001774:	bf00      	nop
 8001776:	3728      	adds	r7, #40	; 0x28
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40023800 	.word	0x40023800
 8001780:	40020400 	.word	0x40020400
 8001784:	40020800 	.word	0x40020800

08001788 <LCD_TxBMP>:

/* USER CODE BEGIN 4 */

void LCD_TxBMP(unsigned char* data, unsigned int BitmapStart)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08e      	sub	sp, #56	; 0x38
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
static unsigned int tamanho = 0;
static unsigned char sobrou[3] = {0,0,0};
unsigned int i = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	637b      	str	r3, [r7, #52]	; 0x34
unsigned int setor = 512;
 8001796:	f44f 7300 	mov.w	r3, #512	; 0x200
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
unsigned short int cor;
unsigned char tam[11];
//Leandro (22/09/2020) - Ajuste para ler imagens com dimensões maiores que um byte (320x240)
// unsigned char altura, x = 0, y = 127, bits_por_pixel;
unsigned char bits_por_pixel;
unsigned int altura, x = 0, y = 239; //Formato "paisagem"
 800179c:	2300      	movs	r3, #0
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
 80017a0:	23ef      	movs	r3, #239	; 0xef
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
// unsigned int altura, x = 0, y = 319; //Formato "retrato"
const unsigned int lim_altura = 240, lim_largura = 320; //Formato "paisagem" - enviar comando setRotation(1);
 80017a4:	23f0      	movs	r3, #240	; 0xf0
 80017a6:	623b      	str	r3, [r7, #32]
 80017a8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80017ac:	61fb      	str	r3, [r7, #28]
// const unsigned int lim_altura = 320, lim_largura = 240; //Formato "retrato" - enviar comando setRotation(0);
// static unsigned char largura = 0, erro_bits = 0, bytes_extras = 0, pixels_por_linha = 0;
static unsigned int largura = 0, pixels_por_linha = 0;
static unsigned char erro_bits = 0, bytes_extras = 0;
//Se é o primeiro setor do arquivo, possui o cabeçalho
if(BitmapStart)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d075      	beq.n	80018a0 <LCD_TxBMP+0x118>
{
BitmapStart = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	603b      	str	r3, [r7, #0]
//Reseta variável estática
pixels_por_linha = 0;
 80017b8:	4b9e      	ldr	r3, [pc, #632]	; (8001a34 <LCD_TxBMP+0x2ac>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
//Pula o cabeçalho
i = 54;
 80017be:	2336      	movs	r3, #54	; 0x36
 80017c0:	637b      	str	r3, [r7, #52]	; 0x34
//Lê o tamanho da área de dados do arquivo em bytes
tamanho = data[0x22] + (unsigned int)(data[0x23]<<8) + (unsigned int)(data[0x24]<<16) + (unsigned int)(data[0x25]<<24);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3322      	adds	r3, #34	; 0x22
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3323      	adds	r3, #35	; 0x23
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	4413      	add	r3, r2
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	3224      	adds	r2, #36	; 0x24
 80017d8:	7812      	ldrb	r2, [r2, #0]
 80017da:	0412      	lsls	r2, r2, #16
 80017dc:	4413      	add	r3, r2
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	3225      	adds	r2, #37	; 0x25
 80017e2:	7812      	ldrb	r2, [r2, #0]
 80017e4:	0612      	lsls	r2, r2, #24
 80017e6:	4413      	add	r3, r2
 80017e8:	4a93      	ldr	r2, [pc, #588]	; (8001a38 <LCD_TxBMP+0x2b0>)
 80017ea:	6013      	str	r3, [r2, #0]
//Leandro (22/09/2020) - Ajuste para ler imagens com dimensões maiores que um byte (320x240)
// //Leandro (01/09/2019) - Lê a largura e a altura da imagem para definir o tamanho da janela
// largura = data[18];
// altura = data[22];
largura = data[18] + (unsigned int)(data[19]<<8);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3312      	adds	r3, #18
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3313      	adds	r3, #19
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	4413      	add	r3, r2
 80017fe:	4a8f      	ldr	r2, [pc, #572]	; (8001a3c <LCD_TxBMP+0x2b4>)
 8001800:	6013      	str	r3, [r2, #0]
altura = data[22] + (unsigned int)(data[23]<<8);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3316      	adds	r3, #22
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3317      	adds	r3, #23
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	4413      	add	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
//Configura a janela
setAddrWindow(x, y-altura+1, x+largura-1, y);
 8001816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	1c59      	adds	r1, r3, #1
 800181e:	4b87      	ldr	r3, [pc, #540]	; (8001a3c <LCD_TxBMP+0x2b4>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001824:	4413      	add	r3, r2
 8001826:	1e5a      	subs	r2, r3, #1
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800182c:	f003 f9ec 	bl	8004c08 <setAddrWindow>
//Envia para o LCD sinalização de início de envio de dados

inicioDados();
 8001830:	f004 f9cc 	bl	8005bcc <inicioDados>
//Verifica se existirão bytes extras no arquivo em função da largura da imagem
//Obervação: Existe uma restrição de que cada linha deva ter N bytes, sendo N um número
//divisível por 4. Caso contrário, o BMP deve ser preenchido com bytes não válidos. Por
//exemplo, se a imagem tem 1 x 100 pixels em 24 bits/pixel, o BMP teria 3 bytes válidos em
//cada linha e mais 1 byte que não tem qualquer significado.
switch((largura*3)%4)
 8001834:	4b81      	ldr	r3, [pc, #516]	; (8001a3c <LCD_TxBMP+0x2b4>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4613      	mov	r3, r2
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4413      	add	r3, r2
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	2b03      	cmp	r3, #3
 8001844:	d00e      	beq.n	8001864 <LCD_TxBMP+0xdc>
 8001846:	2b03      	cmp	r3, #3
 8001848:	d810      	bhi.n	800186c <LCD_TxBMP+0xe4>
 800184a:	2b01      	cmp	r3, #1
 800184c:	d002      	beq.n	8001854 <LCD_TxBMP+0xcc>
 800184e:	2b02      	cmp	r3, #2
 8001850:	d004      	beq.n	800185c <LCD_TxBMP+0xd4>
 8001852:	e00b      	b.n	800186c <LCD_TxBMP+0xe4>
{
case 1: bytes_extras = 3; break;
 8001854:	4b7a      	ldr	r3, [pc, #488]	; (8001a40 <LCD_TxBMP+0x2b8>)
 8001856:	2203      	movs	r2, #3
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	e00b      	b.n	8001874 <LCD_TxBMP+0xec>
case 2: bytes_extras = 2; break;
 800185c:	4b78      	ldr	r3, [pc, #480]	; (8001a40 <LCD_TxBMP+0x2b8>)
 800185e:	2202      	movs	r2, #2
 8001860:	701a      	strb	r2, [r3, #0]
 8001862:	e007      	b.n	8001874 <LCD_TxBMP+0xec>
case 3: bytes_extras = 1; break;
 8001864:	4b76      	ldr	r3, [pc, #472]	; (8001a40 <LCD_TxBMP+0x2b8>)
 8001866:	2201      	movs	r2, #1
 8001868:	701a      	strb	r2, [r3, #0]
 800186a:	e003      	b.n	8001874 <LCD_TxBMP+0xec>
default: bytes_extras = 0; break;
 800186c:	4b74      	ldr	r3, [pc, #464]	; (8001a40 <LCD_TxBMP+0x2b8>)
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
 8001872:	bf00      	nop
}
//Lê a quantidade de bits por pixel (neste caso é aceito apenas 24 bits por pixel)
bits_por_pixel = data[28];
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	7f1b      	ldrb	r3, [r3, #28]
 8001878:	75fb      	strb	r3, [r7, #23]
//Testa a quatidade de bits
//Leandro (22/09/2020) - Ajuste para ler imagens com dimensões maiores que um byte (320x240)
// if((bits_por_pixel != 24) || (largura > 128) || (altura > 128))
if((bits_por_pixel != 24) || (largura > lim_largura) || (altura > lim_altura))
 800187a:	7dfb      	ldrb	r3, [r7, #23]
 800187c:	2b18      	cmp	r3, #24
 800187e:	d108      	bne.n	8001892 <LCD_TxBMP+0x10a>
 8001880:	4b6e      	ldr	r3, [pc, #440]	; (8001a3c <LCD_TxBMP+0x2b4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	69fa      	ldr	r2, [r7, #28]
 8001886:	429a      	cmp	r2, r3
 8001888:	d303      	bcc.n	8001892 <LCD_TxBMP+0x10a>
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	6a3b      	ldr	r3, [r7, #32]
 800188e:	429a      	cmp	r2, r3
 8001890:	d903      	bls.n	800189a <LCD_TxBMP+0x112>
erro_bits = 1;
 8001892:	4b6c      	ldr	r3, [pc, #432]	; (8001a44 <LCD_TxBMP+0x2bc>)
 8001894:	2201      	movs	r2, #1
 8001896:	701a      	strb	r2, [r3, #0]
 8001898:	e002      	b.n	80018a0 <LCD_TxBMP+0x118>
else
erro_bits = 0;
 800189a:	4b6a      	ldr	r3, [pc, #424]	; (8001a44 <LCD_TxBMP+0x2bc>)
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
}
//Se houver erro na quantidade de bits retorna e não envia para o LCD
if(erro_bits)
 80018a0:	4b68      	ldr	r3, [pc, #416]	; (8001a44 <LCD_TxBMP+0x2bc>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f040 8110 	bne.w	8001aca <LCD_TxBMP+0x342>
{
return;
}
//Envia os pixels enquanto não acabar o setor ou o Bitmap
while((i <= (512-3)) && (tamanho >= 3)) //24 bits por pixels
 80018aa:	e0e4      	b.n	8001a76 <LCD_TxBMP+0x2ee>
{
//Se completou uma linha
if(pixels_por_linha == largura)
 80018ac:	4b61      	ldr	r3, [pc, #388]	; (8001a34 <LCD_TxBMP+0x2ac>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b62      	ldr	r3, [pc, #392]	; (8001a3c <LCD_TxBMP+0x2b4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d138      	bne.n	800192a <LCD_TxBMP+0x1a2>
{
//Zera o contador
pixels_por_linha = 0;
 80018b8:	4b5e      	ldr	r3, [pc, #376]	; (8001a34 <LCD_TxBMP+0x2ac>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
//Verifica se tem bytes nulos para ignorar
if(bytes_extras >= sobrou[0])
 80018be:	4b62      	ldr	r3, [pc, #392]	; (8001a48 <LCD_TxBMP+0x2c0>)
 80018c0:	781a      	ldrb	r2, [r3, #0]
 80018c2:	4b5f      	ldr	r3, [pc, #380]	; (8001a40 <LCD_TxBMP+0x2b8>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d822      	bhi.n	8001910 <LCD_TxBMP+0x188>
{
//Desconta os bytes_extras-sobrou[0] do tamanho do setor
tamanho -= (bytes_extras-sobrou[0]);
 80018ca:	4b5b      	ldr	r3, [pc, #364]	; (8001a38 <LCD_TxBMP+0x2b0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a5c      	ldr	r2, [pc, #368]	; (8001a40 <LCD_TxBMP+0x2b8>)
 80018d0:	7812      	ldrb	r2, [r2, #0]
 80018d2:	4611      	mov	r1, r2
 80018d4:	4a5c      	ldr	r2, [pc, #368]	; (8001a48 <LCD_TxBMP+0x2c0>)
 80018d6:	7812      	ldrb	r2, [r2, #0]
 80018d8:	1a8a      	subs	r2, r1, r2
 80018da:	1a9b      	subs	r3, r3, r2
 80018dc:	4a56      	ldr	r2, [pc, #344]	; (8001a38 <LCD_TxBMP+0x2b0>)
 80018de:	6013      	str	r3, [r2, #0]
//Incrementa a posição do byte a ser lido do setor
i += (bytes_extras-sobrou[0]);
 80018e0:	4b57      	ldr	r3, [pc, #348]	; (8001a40 <LCD_TxBMP+0x2b8>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b58      	ldr	r3, [pc, #352]	; (8001a48 <LCD_TxBMP+0x2c0>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	461a      	mov	r2, r3
 80018ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f0:	4413      	add	r3, r2
 80018f2:	637b      	str	r3, [r7, #52]	; 0x34
//Atualiza o valor da sobra
sobrou[0] = 0;
 80018f4:	4b54      	ldr	r3, [pc, #336]	; (8001a48 <LCD_TxBMP+0x2c0>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
//Verifica se não cabe mais nenhum pixel, encerra o loop
if((i>(512-3)) || (tamanho < 3))
 80018fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fc:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8001900:	f080 80c4 	bcs.w	8001a8c <LCD_TxBMP+0x304>
 8001904:	4b4c      	ldr	r3, [pc, #304]	; (8001a38 <LCD_TxBMP+0x2b0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b02      	cmp	r3, #2
 800190a:	f240 80bf 	bls.w	8001a8c <LCD_TxBMP+0x304>
 800190e:	e007      	b.n	8001920 <LCD_TxBMP+0x198>
break;
}
else
{
//Atualiza o valor da sobra
sobrou[0] -= bytes_extras;
 8001910:	4b4d      	ldr	r3, [pc, #308]	; (8001a48 <LCD_TxBMP+0x2c0>)
 8001912:	781a      	ldrb	r2, [r3, #0]
 8001914:	4b4a      	ldr	r3, [pc, #296]	; (8001a40 <LCD_TxBMP+0x2b8>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	b2da      	uxtb	r2, r3
 800191c:	4b4a      	ldr	r3, [pc, #296]	; (8001a48 <LCD_TxBMP+0x2c0>)
 800191e:	701a      	strb	r2, [r3, #0]
}
//break;
if(tamanho<3)
 8001920:	4b45      	ldr	r3, [pc, #276]	; (8001a38 <LCD_TxBMP+0x2b0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b02      	cmp	r3, #2
 8001926:	f240 80b0 	bls.w	8001a8a <LCD_TxBMP+0x302>
break;
}
if(sobrou[0] == 0) //Tamanho -= 3
 800192a:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <LCD_TxBMP+0x2c0>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d12a      	bne.n	8001988 <LCD_TxBMP+0x200>
{
//((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
//Seguencia BGR (24 bits) --> RGB (565)
cor = (data[i] >> 3) | ((data[i+1] & 0xFC) << 3) | ((data[i+2] & 0xF8) << 8);
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001936:	4413      	add	r3, r2
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	08db      	lsrs	r3, r3, #3
 800193c:	b2db      	uxtb	r3, r3
 800193e:	b21a      	sxth	r2, r3
 8001940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001942:	3301      	adds	r3, #1
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	440b      	add	r3, r1
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	b21b      	sxth	r3, r3
 800194e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001952:	b21b      	sxth	r3, r3
 8001954:	4313      	orrs	r3, r2
 8001956:	b21a      	sxth	r2, r3
 8001958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800195a:	3302      	adds	r3, #2
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	440b      	add	r3, r1
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	021b      	lsls	r3, r3, #8
 8001964:	b21b      	sxth	r3, r3
 8001966:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800196a:	f023 0307 	bic.w	r3, r3, #7
 800196e:	b21b      	sxth	r3, r3
 8001970:	4313      	orrs	r3, r2
 8001972:	b21b      	sxth	r3, r3
 8001974:	867b      	strh	r3, [r7, #50]	; 0x32
i += 3;
 8001976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001978:	3303      	adds	r3, #3
 800197a:	637b      	str	r3, [r7, #52]	; 0x34
tamanho -= 3;
 800197c:	4b2e      	ldr	r3, [pc, #184]	; (8001a38 <LCD_TxBMP+0x2b0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	3b03      	subs	r3, #3
 8001982:	4a2d      	ldr	r2, [pc, #180]	; (8001a38 <LCD_TxBMP+0x2b0>)
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	e06a      	b.n	8001a5e <LCD_TxBMP+0x2d6>
}
else if(sobrou[0] == 1) //Tamanho -= 2
 8001988:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <LCD_TxBMP+0x2c0>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d127      	bne.n	80019e0 <LCD_TxBMP+0x258>
{
//Sobrou a cor Azul
cor = (sobrou[2] >> 3) | ((data[i] & 0xFC) << 3) | ((data[i+1] & 0xF8) << 8);
 8001990:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <LCD_TxBMP+0x2c0>)
 8001992:	789b      	ldrb	r3, [r3, #2]
 8001994:	08db      	lsrs	r3, r3, #3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	b21a      	sxth	r2, r3
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800199e:	440b      	add	r3, r1
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	b21b      	sxth	r3, r3
 80019a6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80019aa:	b21b      	sxth	r3, r3
 80019ac:	4313      	orrs	r3, r2
 80019ae:	b21a      	sxth	r2, r3
 80019b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b2:	3301      	adds	r3, #1
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	440b      	add	r3, r1
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	021b      	lsls	r3, r3, #8
 80019bc:	b21b      	sxth	r3, r3
 80019be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80019c2:	f023 0307 	bic.w	r3, r3, #7
 80019c6:	b21b      	sxth	r3, r3
 80019c8:	4313      	orrs	r3, r2
 80019ca:	b21b      	sxth	r3, r3
 80019cc:	867b      	strh	r3, [r7, #50]	; 0x32
i += 2;
 80019ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d0:	3302      	adds	r3, #2
 80019d2:	637b      	str	r3, [r7, #52]	; 0x34
tamanho -= 2;
 80019d4:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <LCD_TxBMP+0x2b0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	3b02      	subs	r3, #2
 80019da:	4a17      	ldr	r2, [pc, #92]	; (8001a38 <LCD_TxBMP+0x2b0>)
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	e03e      	b.n	8001a5e <LCD_TxBMP+0x2d6>
}
else if(sobrou[0] == 2) //Tamanho -= 1
 80019e0:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <LCD_TxBMP+0x2c0>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d131      	bne.n	8001a4c <LCD_TxBMP+0x2c4>
{
//Sobrou a cor Azul e Verde
cor = (sobrou[1] >> 3) | ((sobrou[2] & 0xFC) << 3) | ((data[i] & 0xF8) << 8);
 80019e8:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <LCD_TxBMP+0x2c0>)
 80019ea:	785b      	ldrb	r3, [r3, #1]
 80019ec:	08db      	lsrs	r3, r3, #3
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	b21a      	sxth	r2, r3
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <LCD_TxBMP+0x2c0>)
 80019f4:	789b      	ldrb	r3, [r3, #2]
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80019fe:	b21b      	sxth	r3, r3
 8001a00:	4313      	orrs	r3, r2
 8001a02:	b21a      	sxth	r2, r3
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a08:	440b      	add	r3, r1
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	b21b      	sxth	r3, r3
 8001a10:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a14:	f023 0307 	bic.w	r3, r3, #7
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	b21b      	sxth	r3, r3
 8001a1e:	867b      	strh	r3, [r7, #50]	; 0x32
i += 1;
 8001a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a22:	3301      	adds	r3, #1
 8001a24:	637b      	str	r3, [r7, #52]	; 0x34
tamanho -= 1;
 8001a26:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <LCD_TxBMP+0x2b0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	4a02      	ldr	r2, [pc, #8]	; (8001a38 <LCD_TxBMP+0x2b0>)
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	e015      	b.n	8001a5e <LCD_TxBMP+0x2d6>
 8001a32:	bf00      	nop
 8001a34:	200000b4 	.word	0x200000b4
 8001a38:	200000b8 	.word	0x200000b8
 8001a3c:	200000bc 	.word	0x200000bc
 8001a40:	200000c0 	.word	0x200000c0
 8001a44:	200000c1 	.word	0x200000c1
 8001a48:	200000c4 	.word	0x200000c4
}
else
{
i = 512;
 8001a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a50:	637b      	str	r3, [r7, #52]	; 0x34
setor = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
tamanho = 0;
 8001a56:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <LCD_TxBMP+0x34c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
break;
 8001a5c:	e016      	b.n	8001a8c <LCD_TxBMP+0x304>
}
//Envia pixel 565 para o LCD
desenhaPixel(cor);
 8001a5e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001a60:	4618      	mov	r0, r3
 8001a62:	f004 f809 	bl	8005a78 <desenhaPixel>
sobrou[0] = 0; //Sobra algum byte apenas no final do setor (i>= 510)
 8001a66:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <LCD_TxBMP+0x350>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
//Incrementa o número de pixels enviados por linha e testa
pixels_por_linha++;
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <LCD_TxBMP+0x354>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	3301      	adds	r3, #1
 8001a72:	4a1a      	ldr	r2, [pc, #104]	; (8001adc <LCD_TxBMP+0x354>)
 8001a74:	6013      	str	r3, [r2, #0]
while((i <= (512-3)) && (tamanho >= 3)) //24 bits por pixels
 8001a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a78:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8001a7c:	d206      	bcs.n	8001a8c <LCD_TxBMP+0x304>
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <LCD_TxBMP+0x34c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	f63f af12 	bhi.w	80018ac <LCD_TxBMP+0x124>
 8001a88:	e000      	b.n	8001a8c <LCD_TxBMP+0x304>
break;
 8001a8a:	bf00      	nop
}
//Se ainda não acabou o arquivo
if(tamanho >= 3)
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <LCD_TxBMP+0x34c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d917      	bls.n	8001ac4 <LCD_TxBMP+0x33c>
{
//Salva o número de bytes que sobraram para formar um pixel
sobrou[0] = 512 - i;
 8001a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	425b      	negs	r3, r3
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <LCD_TxBMP+0x350>)
 8001a9e:	701a      	strb	r2, [r3, #0]
//Completa os 512 bytes do setor
tamanho -= sobrou[0];
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <LCD_TxBMP+0x34c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a0c      	ldr	r2, [pc, #48]	; (8001ad8 <LCD_TxBMP+0x350>)
 8001aa6:	7812      	ldrb	r2, [r2, #0]
 8001aa8:	1a9b      	subs	r3, r3, r2
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <LCD_TxBMP+0x34c>)
 8001aac:	6013      	str	r3, [r2, #0]
//Salva o penúltimo byte
sobrou[1] = data[510];
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 21fe 	ldrb.w	r2, [r3, #510]	; 0x1fe
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <LCD_TxBMP+0x350>)
 8001ab6:	705a      	strb	r2, [r3, #1]
//Salva o último byte
sobrou[2] = data[511];
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 21ff 	ldrb.w	r2, [r3, #511]	; 0x1ff
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <LCD_TxBMP+0x350>)
 8001ac0:	709a      	strb	r2, [r3, #2]
 8001ac2:	e003      	b.n	8001acc <LCD_TxBMP+0x344>
}
else
{
//Envia para o LCD sinalização de fim de envio de dados
fimDados();
 8001ac4:	f004 f934 	bl	8005d30 <fimDados>
 8001ac8:	e000      	b.n	8001acc <LCD_TxBMP+0x344>
return;
 8001aca:	bf00      	nop
}
}
 8001acc:	3738      	adds	r7, #56	; 0x38
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200000b8 	.word	0x200000b8
 8001ad8:	200000c4 	.word	0x200000c4
 8001adc:	200000b4 	.word	0x200000b4

08001ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae4:	b672      	cpsid	i
}
 8001ae6:	bf00      	nop
  __disable_irq();
// while (1)
// {
// }
  /* USER CODE END Error_Handler_Debug */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <HAL_MspInit+0x4c>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	4a0f      	ldr	r2, [pc, #60]	; (8001b40 <HAL_MspInit+0x4c>)
 8001b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b08:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <HAL_MspInit+0x4c>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	603b      	str	r3, [r7, #0]
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_MspInit+0x4c>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	4a08      	ldr	r2, [pc, #32]	; (8001b40 <HAL_MspInit+0x4c>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b24:	6413      	str	r3, [r2, #64]	; 0x40
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_MspInit+0x4c>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b32:	2007      	movs	r0, #7
 8001b34:	f004 faea 	bl	800610c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40023800 	.word	0x40023800

08001b44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	; 0x28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a19      	ldr	r2, [pc, #100]	; (8001bc8 <HAL_SPI_MspInit+0x84>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d12b      	bne.n	8001bbe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <HAL_SPI_MspInit+0x88>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	4a17      	ldr	r2, [pc, #92]	; (8001bcc <HAL_SPI_MspInit+0x88>)
 8001b70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b74:	6453      	str	r3, [r2, #68]	; 0x44
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <HAL_SPI_MspInit+0x88>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <HAL_SPI_MspInit+0x88>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a10      	ldr	r2, [pc, #64]	; (8001bcc <HAL_SPI_MspInit+0x88>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <HAL_SPI_MspInit+0x88>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b9e:	23e0      	movs	r3, #224	; 0xe0
 8001ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001baa:	2303      	movs	r3, #3
 8001bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bae:	2305      	movs	r3, #5
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <HAL_SPI_MspInit+0x8c>)
 8001bba:	f004 fadb 	bl	8006174 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001bbe:	bf00      	nop
 8001bc0:	3728      	adds	r7, #40	; 0x28
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40013000 	.word	0x40013000
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40020000 	.word	0x40020000

08001bd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0b      	ldr	r2, [pc, #44]	; (8001c10 <HAL_TIM_Base_MspInit+0x3c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d10d      	bne.n	8001c02 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_TIM_Base_MspInit+0x40>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	4a09      	ldr	r2, [pc, #36]	; (8001c14 <HAL_TIM_Base_MspInit+0x40>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf6:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <HAL_TIM_Base_MspInit+0x40>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40010000 	.word	0x40010000
 8001c14:	40023800 	.word	0x40023800

08001c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a19      	ldr	r2, [pc, #100]	; (8001c9c <HAL_UART_MspInit+0x84>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d12b      	bne.n	8001c92 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <HAL_UART_MspInit+0x88>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	4a17      	ldr	r2, [pc, #92]	; (8001ca0 <HAL_UART_MspInit+0x88>)
 8001c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c48:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <HAL_UART_MspInit+0x88>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <HAL_UART_MspInit+0x88>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <HAL_UART_MspInit+0x88>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <HAL_UART_MspInit+0x88>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c72:	230c      	movs	r3, #12
 8001c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c82:	2307      	movs	r3, #7
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <HAL_UART_MspInit+0x8c>)
 8001c8e:	f004 fa71 	bl	8006174 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c92:	bf00      	nop
 8001c94:	3728      	adds	r7, #40	; 0x28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40004400 	.word	0x40004400
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40020000 	.word	0x40020000

08001ca8 <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8001cac:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <SDTimer_Handler+0x40>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d006      	beq.n	8001cc4 <SDTimer_Handler+0x1c>
		Timer1--;
 8001cb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <SDTimer_Handler+0x40>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <SDTimer_Handler+0x40>)
 8001cc2:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 8001cc4:	4b09      	ldr	r3, [pc, #36]	; (8001cec <SDTimer_Handler+0x44>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d006      	beq.n	8001cdc <SDTimer_Handler+0x34>
		Timer2--;
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <SDTimer_Handler+0x44>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <SDTimer_Handler+0x44>)
 8001cda:	701a      	strb	r2, [r3, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	200054d5 	.word	0x200054d5
 8001cec:	200054d4 	.word	0x200054d4

08001cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <NMI_Handler+0x4>

08001cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cfa:	e7fe      	b.n	8001cfa <HardFault_Handler+0x4>

08001cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <MemManage_Handler+0x4>

08001d02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d06:	e7fe      	b.n	8001d06 <BusFault_Handler+0x4>

08001d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <UsageFault_Handler+0x4>

08001d0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <SysTick_Handler+0x30>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	3301      	adds	r3, #1
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <SysTick_Handler+0x30>)
 8001d48:	701a      	strb	r2, [r3, #0]
if(FatFsCnt >= 10)
 8001d4a:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <SysTick_Handler+0x30>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b09      	cmp	r3, #9
 8001d52:	d904      	bls.n	8001d5e <SysTick_Handler+0x26>
{
	FatFsCnt = 0;
 8001d54:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <SysTick_Handler+0x30>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
	SDTimer_Handler();
 8001d5a:	f7ff ffa5 	bl	8001ca8 <SDTimer_Handler>
}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d5e:	f004 f8df 	bl	8005f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200000c7 	.word	0x200000c7

08001d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d74:	4a14      	ldr	r2, [pc, #80]	; (8001dc8 <_sbrk+0x5c>)
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <_sbrk+0x60>)
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d80:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <_sbrk+0x64>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d102      	bne.n	8001d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <_sbrk+0x64>)
 8001d8a:	4a12      	ldr	r2, [pc, #72]	; (8001dd4 <_sbrk+0x68>)
 8001d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d8e:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <_sbrk+0x64>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d207      	bcs.n	8001dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d9c:	f009 fb28 	bl	800b3f0 <__errno>
 8001da0:	4603      	mov	r3, r0
 8001da2:	220c      	movs	r2, #12
 8001da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001da6:	f04f 33ff 	mov.w	r3, #4294967295
 8001daa:	e009      	b.n	8001dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <_sbrk+0x64>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001db2:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <_sbrk+0x64>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	4a05      	ldr	r2, [pc, #20]	; (8001dd0 <_sbrk+0x64>)
 8001dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20020000 	.word	0x20020000
 8001dcc:	00000400 	.word	0x00000400
 8001dd0:	200000c8 	.word	0x200000c8
 8001dd4:	20007578 	.word	0x20007578

08001dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <SystemInit+0x20>)
 8001dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de2:	4a05      	ldr	r2, [pc, #20]	; (8001df8 <SystemInit+0x20>)
 8001de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <PIN_LOW>:

/********************************************** NO CHNAGES AFTER THIS ************************************************/


void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001e08:	887b      	ldrh	r3, [r7, #2]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f004 fb44 	bl	800649c <HAL_GPIO_WritePin>
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8001e28:	887b      	ldrh	r3, [r7, #2]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f004 fb34 	bl	800649c <HAL_GPIO_WritePin>
}
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <PIN_INPUT>:

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8001e48:	887b      	ldrh	r3, [r7, #2]
 8001e4a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e50:	2301      	movs	r3, #1
 8001e52:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001e54:	f107 030c 	add.w	r3, r7, #12
 8001e58:	4619      	mov	r1, r3
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f004 f98a 	bl	8006174 <HAL_GPIO_Init>
}
 8001e60:	bf00      	nop
 8001e62:	3720      	adds	r7, #32
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	807b      	strh	r3, [r7, #2]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8001e74:	887b      	ldrh	r3, [r7, #2]
 8001e76:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e80:	2302      	movs	r3, #2
 8001e82:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001e84:	f107 030c 	add.w	r3, r7, #12
 8001e88:	4619      	mov	r1, r3
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f004 f972 	bl	8006174 <HAL_GPIO_Init>
}
 8001e90:	bf00      	nop
 8001e92:	3720      	adds	r7, #32
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <width+0x14>)
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000008 	.word	0x20000008

08001eb0 <height>:

uint16_t height(void)
{ return _height; }
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <height+0x14>)
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	2000000a 	.word	0x2000000a

08001ec8 <color565_to_555>:
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h);

void setReadDir (void);
void setWriteDir (void);
static uint8_t done_reset, is8347, is555, is9797;
static uint16_t color565_to_555(uint16_t color) {
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 8001ed2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ed6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001eda:	b21a      	sxth	r2, r3
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	b21b      	sxth	r3, r3
 8001ee2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001ee6:	b21b      	sxth	r3, r3
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	b21a      	sxth	r2, r3
 8001eec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	b21b      	sxth	r3, r3
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	b21b      	sxth	r3, r3
 8001efa:	b29b      	uxth	r3, r3
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <color555_to_565>:
static uint16_t color555_to_565(uint16_t color) {
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 8001f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f16:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f1a:	b21a      	sxth	r2, r3
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	115b      	asrs	r3, r3, #5
 8001f20:	b21b      	sxth	r3, r3
 8001f22:	f003 0320 	and.w	r3, r3, #32
 8001f26:	b21b      	sxth	r3, r3
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	b21a      	sxth	r2, r3
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	105b      	asrs	r3, r3, #1
 8001f30:	b21b      	sxth	r3, r3
 8001f32:	f003 031f 	and.w	r3, r3, #31
 8001f36:	b21b      	sxth	r3, r3
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	b21b      	sxth	r3, r3
 8001f3c:	b29b      	uxth	r3, r3
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <color565_to_r>:
static uint8_t color565_to_r(uint16_t color) {
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 8001f54:	88fb      	ldrh	r3, [r7, #6]
 8001f56:	121b      	asrs	r3, r3, #8
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	f023 0307 	bic.w	r3, r3, #7
 8001f5e:	b2db      	uxtb	r3, r3
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <color565_to_g>:
static uint8_t color565_to_g(uint16_t color) {
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	10db      	asrs	r3, r3, #3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f023 0303 	bic.w	r3, r3, #3
 8001f80:	b2db      	uxtb	r3, r3
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <color565_to_b>:
static uint8_t color565_to_b(uint16_t color) {
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	4603      	mov	r3, r0
 8001f96:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	b2db      	uxtb	r3, r3
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <color565>:

uint16_t color565(uint8_t r, uint8_t g, uint8_t b) { return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3); }
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	71fb      	strb	r3, [r7, #7]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	71bb      	strb	r3, [r7, #6]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	717b      	strb	r3, [r7, #5]
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	b21b      	sxth	r3, r3
 8001fc2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001fc6:	f023 0307 	bic.w	r3, r3, #7
 8001fca:	b21a      	sxth	r2, r3
 8001fcc:	79bb      	ldrb	r3, [r7, #6]
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	b21b      	sxth	r3, r3
 8001fd2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001fd6:	b21b      	sxth	r3, r3
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	b21a      	sxth	r2, r3
 8001fdc:	797b      	ldrb	r3, [r7, #5]
 8001fde:	08db      	lsrs	r3, r3, #3
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	b21b      	sxth	r3, r3
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	b21b      	sxth	r3, r3
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <readPixel>:
uint16_t readPixel(int16_t x, int16_t y) { uint16_t color; readGRAM(x, y, &color, 1, 1); return color; }
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af02      	add	r7, sp, #8
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	460a      	mov	r2, r1
 8002000:	80fb      	strh	r3, [r7, #6]
 8002002:	4613      	mov	r3, r2
 8002004:	80bb      	strh	r3, [r7, #4]
 8002006:	f107 020e 	add.w	r2, r7, #14
 800200a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800200e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002012:	2301      	movs	r3, #1
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	2301      	movs	r3, #1
 8002018:	f001 fc7a 	bl	8003910 <readGRAM>
 800201c:	89fb      	ldrh	r3, [r7, #14]
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	4603      	mov	r3, r0
 800202e:	460a      	mov	r2, r1
 8002030:	80fb      	strh	r3, [r7, #6]
 8002032:	4613      	mov	r3, r2
 8002034:	80bb      	strh	r3, [r7, #4]
 8002036:	88ba      	ldrh	r2, [r7, #4]
 8002038:	88fb      	ldrh	r3, [r7, #6]
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f000 f973 	bl	8002328 <writecmddata>
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <pushCommand>:

static void init_table(const void *table, int16_t size);

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block);

void pushCommand(uint16_t cmd, uint8_t * block, int8_t N) { WriteCmdParamN(cmd, N, block); }
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	4603      	mov	r3, r0
 8002052:	6039      	str	r1, [r7, #0]
 8002054:	80fb      	strh	r3, [r7, #6]
 8002056:	4613      	mov	r3, r2
 8002058:	717b      	strb	r3, [r7, #5]
 800205a:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f000 fab6 	bl	80025d4 <WriteCmdParamN>
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <setReadDir>:
uint16_t _lcd_ID, _lcd_rev, _lcd_madctl, _lcd_drivOut, _MC, _MP, _MW, _SC, _EC, _SP, _EP;

//extern GFXfont *gfxFont;

void setReadDir (void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 8002074:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002078:	4811      	ldr	r0, [pc, #68]	; (80020c0 <setReadDir+0x50>)
 800207a:	f7ff fedf 	bl	8001e3c <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 800207e:	2180      	movs	r1, #128	; 0x80
 8002080:	4810      	ldr	r0, [pc, #64]	; (80020c4 <setReadDir+0x54>)
 8002082:	f7ff fedb 	bl	8001e3c <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 8002086:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800208a:	480d      	ldr	r0, [pc, #52]	; (80020c0 <setReadDir+0x50>)
 800208c:	f7ff fed6 	bl	8001e3c <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 8002090:	2108      	movs	r1, #8
 8002092:	480d      	ldr	r0, [pc, #52]	; (80020c8 <setReadDir+0x58>)
 8002094:	f7ff fed2 	bl	8001e3c <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 8002098:	2120      	movs	r1, #32
 800209a:	480b      	ldr	r0, [pc, #44]	; (80020c8 <setReadDir+0x58>)
 800209c:	f7ff fece 	bl	8001e3c <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 80020a0:	2110      	movs	r1, #16
 80020a2:	4809      	ldr	r0, [pc, #36]	; (80020c8 <setReadDir+0x58>)
 80020a4:	f7ff feca 	bl	8001e3c <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 80020a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020ac:	4806      	ldr	r0, [pc, #24]	; (80020c8 <setReadDir+0x58>)
 80020ae:	f7ff fec5 	bl	8001e3c <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 80020b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020b6:	4802      	ldr	r0, [pc, #8]	; (80020c0 <setReadDir+0x50>)
 80020b8:	f7ff fec0 	bl	8001e3c <PIN_INPUT>
}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40020000 	.word	0x40020000
 80020c4:	40020800 	.word	0x40020800
 80020c8:	40020400 	.word	0x40020400

080020cc <setWriteDir>:

void setWriteDir (void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 80020d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020d4:	4811      	ldr	r0, [pc, #68]	; (800211c <setWriteDir+0x50>)
 80020d6:	f7ff fec7 	bl	8001e68 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 80020da:	2180      	movs	r1, #128	; 0x80
 80020dc:	4810      	ldr	r0, [pc, #64]	; (8002120 <setWriteDir+0x54>)
 80020de:	f7ff fec3 	bl	8001e68 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 80020e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020e6:	480d      	ldr	r0, [pc, #52]	; (800211c <setWriteDir+0x50>)
 80020e8:	f7ff febe 	bl	8001e68 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 80020ec:	2108      	movs	r1, #8
 80020ee:	480d      	ldr	r0, [pc, #52]	; (8002124 <setWriteDir+0x58>)
 80020f0:	f7ff feba 	bl	8001e68 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 80020f4:	2120      	movs	r1, #32
 80020f6:	480b      	ldr	r0, [pc, #44]	; (8002124 <setWriteDir+0x58>)
 80020f8:	f7ff feb6 	bl	8001e68 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 80020fc:	2110      	movs	r1, #16
 80020fe:	4809      	ldr	r0, [pc, #36]	; (8002124 <setWriteDir+0x58>)
 8002100:	f7ff feb2 	bl	8001e68 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8002104:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002108:	4806      	ldr	r0, [pc, #24]	; (8002124 <setWriteDir+0x58>)
 800210a:	f7ff fead 	bl	8001e68 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 800210e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002112:	4802      	ldr	r0, [pc, #8]	; (800211c <setWriteDir+0x50>)
 8002114:	f7ff fea8 	bl	8001e68 <PIN_OUTPUT>
}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40020000 	.word	0x40020000
 8002120:	40020800 	.word	0x40020800
 8002124:	40020400 	.word	0x40020400

08002128 <write24>:
    CS_IDLE;
}


static void write24(uint16_t color)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	80fb      	strh	r3, [r7, #6]
    uint8_t r = color565_to_r(color);
 8002132:	88fb      	ldrh	r3, [r7, #6]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff08 	bl	8001f4a <color565_to_r>
 800213a:	4603      	mov	r3, r0
 800213c:	73fb      	strb	r3, [r7, #15]
    uint8_t g = color565_to_g(color);
 800213e:	88fb      	ldrh	r3, [r7, #6]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ff13 	bl	8001f6c <color565_to_g>
 8002146:	4603      	mov	r3, r0
 8002148:	73bb      	strb	r3, [r7, #14]
    uint8_t b = color565_to_b(color);
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff1e 	bl	8001f8e <color565_to_b>
 8002152:	4603      	mov	r3, r0
 8002154:	737b      	strb	r3, [r7, #13]
    write8(r);
 8002156:	4b71      	ldr	r3, [pc, #452]	; (800231c <write24+0x1f4>)
 8002158:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800215c:	619a      	str	r2, [r3, #24]
 800215e:	4b70      	ldr	r3, [pc, #448]	; (8002320 <write24+0x1f8>)
 8002160:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002164:	619a      	str	r2, [r3, #24]
 8002166:	4b6f      	ldr	r3, [pc, #444]	; (8002324 <write24+0x1fc>)
 8002168:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800216c:	619a      	str	r2, [r3, #24]
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217e:	431a      	orrs	r2, r3
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	025b      	lsls	r3, r3, #9
 8002184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002188:	431a      	orrs	r2, r3
 800218a:	4b64      	ldr	r3, [pc, #400]	; (800231c <write24+0x1f4>)
 800218c:	619a      	str	r2, [r3, #24]
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	011b      	lsls	r3, r3, #4
 8002192:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	105b      	asrs	r3, r3, #1
 800219a:	f003 0310 	and.w	r3, r3, #16
 800219e:	431a      	orrs	r2, r3
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	f003 0320 	and.w	r3, r3, #32
 80021a8:	431a      	orrs	r2, r3
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	431a      	orrs	r2, r3
 80021b2:	4b5b      	ldr	r3, [pc, #364]	; (8002320 <write24+0x1f8>)
 80021b4:	619a      	str	r2, [r3, #24]
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	019b      	lsls	r3, r3, #6
 80021ba:	4a5a      	ldr	r2, [pc, #360]	; (8002324 <write24+0x1fc>)
 80021bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c0:	6193      	str	r3, [r2, #24]
 80021c2:	2102      	movs	r1, #2
 80021c4:	4855      	ldr	r0, [pc, #340]	; (800231c <write24+0x1f4>)
 80021c6:	f7ff fe19 	bl	8001dfc <PIN_LOW>
 80021ca:	2102      	movs	r1, #2
 80021cc:	4853      	ldr	r0, [pc, #332]	; (800231c <write24+0x1f4>)
 80021ce:	f7ff fe15 	bl	8001dfc <PIN_LOW>
 80021d2:	2102      	movs	r1, #2
 80021d4:	4851      	ldr	r0, [pc, #324]	; (800231c <write24+0x1f4>)
 80021d6:	f7ff fe11 	bl	8001dfc <PIN_LOW>
 80021da:	2102      	movs	r1, #2
 80021dc:	484f      	ldr	r0, [pc, #316]	; (800231c <write24+0x1f4>)
 80021de:	f7ff fe1d 	bl	8001e1c <PIN_HIGH>
 80021e2:	2102      	movs	r1, #2
 80021e4:	484d      	ldr	r0, [pc, #308]	; (800231c <write24+0x1f4>)
 80021e6:	f7ff fe19 	bl	8001e1c <PIN_HIGH>
    write8(g);
 80021ea:	4b4c      	ldr	r3, [pc, #304]	; (800231c <write24+0x1f4>)
 80021ec:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80021f0:	619a      	str	r2, [r3, #24]
 80021f2:	4b4b      	ldr	r3, [pc, #300]	; (8002320 <write24+0x1f8>)
 80021f4:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80021f8:	619a      	str	r2, [r3, #24]
 80021fa:	4b4a      	ldr	r3, [pc, #296]	; (8002324 <write24+0x1fc>)
 80021fc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002200:	619a      	str	r2, [r3, #24]
 8002202:	7bbb      	ldrb	r3, [r7, #14]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800220a:	7bbb      	ldrb	r3, [r7, #14]
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002212:	431a      	orrs	r2, r3
 8002214:	7bbb      	ldrb	r3, [r7, #14]
 8002216:	025b      	lsls	r3, r3, #9
 8002218:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800221c:	431a      	orrs	r2, r3
 800221e:	4b3f      	ldr	r3, [pc, #252]	; (800231c <write24+0x1f4>)
 8002220:	619a      	str	r2, [r3, #24]
 8002222:	7bbb      	ldrb	r3, [r7, #14]
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800222a:	7bbb      	ldrb	r3, [r7, #14]
 800222c:	105b      	asrs	r3, r3, #1
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	431a      	orrs	r2, r3
 8002234:	7bbb      	ldrb	r3, [r7, #14]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	431a      	orrs	r2, r3
 800223e:	7bbb      	ldrb	r3, [r7, #14]
 8002240:	f003 0308 	and.w	r3, r3, #8
 8002244:	431a      	orrs	r2, r3
 8002246:	4b36      	ldr	r3, [pc, #216]	; (8002320 <write24+0x1f8>)
 8002248:	619a      	str	r2, [r3, #24]
 800224a:	7bbb      	ldrb	r3, [r7, #14]
 800224c:	019b      	lsls	r3, r3, #6
 800224e:	4a35      	ldr	r2, [pc, #212]	; (8002324 <write24+0x1fc>)
 8002250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002254:	6193      	str	r3, [r2, #24]
 8002256:	2102      	movs	r1, #2
 8002258:	4830      	ldr	r0, [pc, #192]	; (800231c <write24+0x1f4>)
 800225a:	f7ff fdcf 	bl	8001dfc <PIN_LOW>
 800225e:	2102      	movs	r1, #2
 8002260:	482e      	ldr	r0, [pc, #184]	; (800231c <write24+0x1f4>)
 8002262:	f7ff fdcb 	bl	8001dfc <PIN_LOW>
 8002266:	2102      	movs	r1, #2
 8002268:	482c      	ldr	r0, [pc, #176]	; (800231c <write24+0x1f4>)
 800226a:	f7ff fdc7 	bl	8001dfc <PIN_LOW>
 800226e:	2102      	movs	r1, #2
 8002270:	482a      	ldr	r0, [pc, #168]	; (800231c <write24+0x1f4>)
 8002272:	f7ff fdd3 	bl	8001e1c <PIN_HIGH>
 8002276:	2102      	movs	r1, #2
 8002278:	4828      	ldr	r0, [pc, #160]	; (800231c <write24+0x1f4>)
 800227a:	f7ff fdcf 	bl	8001e1c <PIN_HIGH>
    write8(b);
 800227e:	4b27      	ldr	r3, [pc, #156]	; (800231c <write24+0x1f4>)
 8002280:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002284:	619a      	str	r2, [r3, #24]
 8002286:	4b26      	ldr	r3, [pc, #152]	; (8002320 <write24+0x1f8>)
 8002288:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800228c:	619a      	str	r2, [r3, #24]
 800228e:	4b25      	ldr	r3, [pc, #148]	; (8002324 <write24+0x1fc>)
 8002290:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002294:	619a      	str	r2, [r3, #24]
 8002296:	7b7b      	ldrb	r3, [r7, #13]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800229e:	7b7b      	ldrb	r3, [r7, #13]
 80022a0:	021b      	lsls	r3, r3, #8
 80022a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a6:	431a      	orrs	r2, r3
 80022a8:	7b7b      	ldrb	r3, [r7, #13]
 80022aa:	025b      	lsls	r3, r3, #9
 80022ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022b0:	431a      	orrs	r2, r3
 80022b2:	4b1a      	ldr	r3, [pc, #104]	; (800231c <write24+0x1f4>)
 80022b4:	619a      	str	r2, [r3, #24]
 80022b6:	7b7b      	ldrb	r3, [r7, #13]
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80022be:	7b7b      	ldrb	r3, [r7, #13]
 80022c0:	105b      	asrs	r3, r3, #1
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	431a      	orrs	r2, r3
 80022c8:	7b7b      	ldrb	r3, [r7, #13]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	431a      	orrs	r2, r3
 80022d2:	7b7b      	ldrb	r3, [r7, #13]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	431a      	orrs	r2, r3
 80022da:	4b11      	ldr	r3, [pc, #68]	; (8002320 <write24+0x1f8>)
 80022dc:	619a      	str	r2, [r3, #24]
 80022de:	7b7b      	ldrb	r3, [r7, #13]
 80022e0:	019b      	lsls	r3, r3, #6
 80022e2:	4a10      	ldr	r2, [pc, #64]	; (8002324 <write24+0x1fc>)
 80022e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e8:	6193      	str	r3, [r2, #24]
 80022ea:	2102      	movs	r1, #2
 80022ec:	480b      	ldr	r0, [pc, #44]	; (800231c <write24+0x1f4>)
 80022ee:	f7ff fd85 	bl	8001dfc <PIN_LOW>
 80022f2:	2102      	movs	r1, #2
 80022f4:	4809      	ldr	r0, [pc, #36]	; (800231c <write24+0x1f4>)
 80022f6:	f7ff fd81 	bl	8001dfc <PIN_LOW>
 80022fa:	2102      	movs	r1, #2
 80022fc:	4807      	ldr	r0, [pc, #28]	; (800231c <write24+0x1f4>)
 80022fe:	f7ff fd7d 	bl	8001dfc <PIN_LOW>
 8002302:	2102      	movs	r1, #2
 8002304:	4805      	ldr	r0, [pc, #20]	; (800231c <write24+0x1f4>)
 8002306:	f7ff fd89 	bl	8001e1c <PIN_HIGH>
 800230a:	2102      	movs	r1, #2
 800230c:	4803      	ldr	r0, [pc, #12]	; (800231c <write24+0x1f4>)
 800230e:	f7ff fd85 	bl	8001e1c <PIN_HIGH>
}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40020000 	.word	0x40020000
 8002320:	40020400 	.word	0x40020400
 8002324:	40020800 	.word	0x40020800

08002328 <writecmddata>:


static void writecmddata(uint16_t cmd, uint16_t dat)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	460a      	mov	r2, r1
 8002332:	80fb      	strh	r3, [r7, #6]
 8002334:	4613      	mov	r3, r2
 8002336:	80bb      	strh	r3, [r7, #4]
    CS_ACTIVE;
 8002338:	2101      	movs	r1, #1
 800233a:	48a3      	ldr	r0, [pc, #652]	; (80025c8 <writecmddata+0x2a0>)
 800233c:	f7ff fd5e 	bl	8001dfc <PIN_LOW>
    WriteCmd(cmd);
 8002340:	2110      	movs	r1, #16
 8002342:	48a2      	ldr	r0, [pc, #648]	; (80025cc <writecmddata+0x2a4>)
 8002344:	f7ff fd5a 	bl	8001dfc <PIN_LOW>
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	0a1b      	lsrs	r3, r3, #8
 800234c:	b29b      	uxth	r3, r3
 800234e:	73fb      	strb	r3, [r7, #15]
 8002350:	88fb      	ldrh	r3, [r7, #6]
 8002352:	73bb      	strb	r3, [r7, #14]
 8002354:	4b9d      	ldr	r3, [pc, #628]	; (80025cc <writecmddata+0x2a4>)
 8002356:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800235a:	619a      	str	r2, [r3, #24]
 800235c:	4b9a      	ldr	r3, [pc, #616]	; (80025c8 <writecmddata+0x2a0>)
 800235e:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002362:	619a      	str	r2, [r3, #24]
 8002364:	4b9a      	ldr	r3, [pc, #616]	; (80025d0 <writecmddata+0x2a8>)
 8002366:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800236a:	619a      	str	r2, [r3, #24]
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237c:	431a      	orrs	r2, r3
 800237e:	7bfb      	ldrb	r3, [r7, #15]
 8002380:	025b      	lsls	r3, r3, #9
 8002382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002386:	431a      	orrs	r2, r3
 8002388:	4b90      	ldr	r3, [pc, #576]	; (80025cc <writecmddata+0x2a4>)
 800238a:	619a      	str	r2, [r3, #24]
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002394:	7bfb      	ldrb	r3, [r7, #15]
 8002396:	105b      	asrs	r3, r3, #1
 8002398:	f003 0310 	and.w	r3, r3, #16
 800239c:	431a      	orrs	r2, r3
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	f003 0320 	and.w	r3, r3, #32
 80023a6:	431a      	orrs	r2, r3
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	431a      	orrs	r2, r3
 80023b0:	4b85      	ldr	r3, [pc, #532]	; (80025c8 <writecmddata+0x2a0>)
 80023b2:	619a      	str	r2, [r3, #24]
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	019b      	lsls	r3, r3, #6
 80023b8:	4a85      	ldr	r2, [pc, #532]	; (80025d0 <writecmddata+0x2a8>)
 80023ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023be:	6193      	str	r3, [r2, #24]
 80023c0:	2102      	movs	r1, #2
 80023c2:	4882      	ldr	r0, [pc, #520]	; (80025cc <writecmddata+0x2a4>)
 80023c4:	f7ff fd1a 	bl	8001dfc <PIN_LOW>
 80023c8:	2102      	movs	r1, #2
 80023ca:	4880      	ldr	r0, [pc, #512]	; (80025cc <writecmddata+0x2a4>)
 80023cc:	f7ff fd16 	bl	8001dfc <PIN_LOW>
 80023d0:	2102      	movs	r1, #2
 80023d2:	487e      	ldr	r0, [pc, #504]	; (80025cc <writecmddata+0x2a4>)
 80023d4:	f7ff fd12 	bl	8001dfc <PIN_LOW>
 80023d8:	2102      	movs	r1, #2
 80023da:	487c      	ldr	r0, [pc, #496]	; (80025cc <writecmddata+0x2a4>)
 80023dc:	f7ff fd1e 	bl	8001e1c <PIN_HIGH>
 80023e0:	2102      	movs	r1, #2
 80023e2:	487a      	ldr	r0, [pc, #488]	; (80025cc <writecmddata+0x2a4>)
 80023e4:	f7ff fd1a 	bl	8001e1c <PIN_HIGH>
 80023e8:	4b78      	ldr	r3, [pc, #480]	; (80025cc <writecmddata+0x2a4>)
 80023ea:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80023ee:	619a      	str	r2, [r3, #24]
 80023f0:	4b75      	ldr	r3, [pc, #468]	; (80025c8 <writecmddata+0x2a0>)
 80023f2:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80023f6:	619a      	str	r2, [r3, #24]
 80023f8:	4b75      	ldr	r3, [pc, #468]	; (80025d0 <writecmddata+0x2a8>)
 80023fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80023fe:	619a      	str	r2, [r3, #24]
 8002400:	7bbb      	ldrb	r3, [r7, #14]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002408:	7bbb      	ldrb	r3, [r7, #14]
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002410:	431a      	orrs	r2, r3
 8002412:	7bbb      	ldrb	r3, [r7, #14]
 8002414:	025b      	lsls	r3, r3, #9
 8002416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800241a:	431a      	orrs	r2, r3
 800241c:	4b6b      	ldr	r3, [pc, #428]	; (80025cc <writecmddata+0x2a4>)
 800241e:	619a      	str	r2, [r3, #24]
 8002420:	7bbb      	ldrb	r3, [r7, #14]
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002428:	7bbb      	ldrb	r3, [r7, #14]
 800242a:	105b      	asrs	r3, r3, #1
 800242c:	f003 0310 	and.w	r3, r3, #16
 8002430:	431a      	orrs	r2, r3
 8002432:	7bbb      	ldrb	r3, [r7, #14]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	f003 0320 	and.w	r3, r3, #32
 800243a:	431a      	orrs	r2, r3
 800243c:	7bbb      	ldrb	r3, [r7, #14]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	431a      	orrs	r2, r3
 8002444:	4b60      	ldr	r3, [pc, #384]	; (80025c8 <writecmddata+0x2a0>)
 8002446:	619a      	str	r2, [r3, #24]
 8002448:	7bbb      	ldrb	r3, [r7, #14]
 800244a:	019b      	lsls	r3, r3, #6
 800244c:	4a60      	ldr	r2, [pc, #384]	; (80025d0 <writecmddata+0x2a8>)
 800244e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002452:	6193      	str	r3, [r2, #24]
 8002454:	2102      	movs	r1, #2
 8002456:	485d      	ldr	r0, [pc, #372]	; (80025cc <writecmddata+0x2a4>)
 8002458:	f7ff fcd0 	bl	8001dfc <PIN_LOW>
 800245c:	2102      	movs	r1, #2
 800245e:	485b      	ldr	r0, [pc, #364]	; (80025cc <writecmddata+0x2a4>)
 8002460:	f7ff fccc 	bl	8001dfc <PIN_LOW>
 8002464:	2102      	movs	r1, #2
 8002466:	4859      	ldr	r0, [pc, #356]	; (80025cc <writecmddata+0x2a4>)
 8002468:	f7ff fcc8 	bl	8001dfc <PIN_LOW>
 800246c:	2102      	movs	r1, #2
 800246e:	4857      	ldr	r0, [pc, #348]	; (80025cc <writecmddata+0x2a4>)
 8002470:	f7ff fcd4 	bl	8001e1c <PIN_HIGH>
 8002474:	2102      	movs	r1, #2
 8002476:	4855      	ldr	r0, [pc, #340]	; (80025cc <writecmddata+0x2a4>)
 8002478:	f7ff fcd0 	bl	8001e1c <PIN_HIGH>
 800247c:	2110      	movs	r1, #16
 800247e:	4853      	ldr	r0, [pc, #332]	; (80025cc <writecmddata+0x2a4>)
 8002480:	f7ff fccc 	bl	8001e1c <PIN_HIGH>
    WriteData(dat);
 8002484:	88bb      	ldrh	r3, [r7, #4]
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	b29b      	uxth	r3, r3
 800248a:	737b      	strb	r3, [r7, #13]
 800248c:	88bb      	ldrh	r3, [r7, #4]
 800248e:	733b      	strb	r3, [r7, #12]
 8002490:	4b4e      	ldr	r3, [pc, #312]	; (80025cc <writecmddata+0x2a4>)
 8002492:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002496:	619a      	str	r2, [r3, #24]
 8002498:	4b4b      	ldr	r3, [pc, #300]	; (80025c8 <writecmddata+0x2a0>)
 800249a:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800249e:	619a      	str	r2, [r3, #24]
 80024a0:	4b4b      	ldr	r3, [pc, #300]	; (80025d0 <writecmddata+0x2a8>)
 80024a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80024a6:	619a      	str	r2, [r3, #24]
 80024a8:	7b7b      	ldrb	r3, [r7, #13]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80024b0:	7b7b      	ldrb	r3, [r7, #13]
 80024b2:	021b      	lsls	r3, r3, #8
 80024b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b8:	431a      	orrs	r2, r3
 80024ba:	7b7b      	ldrb	r3, [r7, #13]
 80024bc:	025b      	lsls	r3, r3, #9
 80024be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c2:	431a      	orrs	r2, r3
 80024c4:	4b41      	ldr	r3, [pc, #260]	; (80025cc <writecmddata+0x2a4>)
 80024c6:	619a      	str	r2, [r3, #24]
 80024c8:	7b7b      	ldrb	r3, [r7, #13]
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80024d0:	7b7b      	ldrb	r3, [r7, #13]
 80024d2:	105b      	asrs	r3, r3, #1
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	431a      	orrs	r2, r3
 80024da:	7b7b      	ldrb	r3, [r7, #13]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	f003 0320 	and.w	r3, r3, #32
 80024e2:	431a      	orrs	r2, r3
 80024e4:	7b7b      	ldrb	r3, [r7, #13]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	431a      	orrs	r2, r3
 80024ec:	4b36      	ldr	r3, [pc, #216]	; (80025c8 <writecmddata+0x2a0>)
 80024ee:	619a      	str	r2, [r3, #24]
 80024f0:	7b7b      	ldrb	r3, [r7, #13]
 80024f2:	019b      	lsls	r3, r3, #6
 80024f4:	4a36      	ldr	r2, [pc, #216]	; (80025d0 <writecmddata+0x2a8>)
 80024f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fa:	6193      	str	r3, [r2, #24]
 80024fc:	2102      	movs	r1, #2
 80024fe:	4833      	ldr	r0, [pc, #204]	; (80025cc <writecmddata+0x2a4>)
 8002500:	f7ff fc7c 	bl	8001dfc <PIN_LOW>
 8002504:	2102      	movs	r1, #2
 8002506:	4831      	ldr	r0, [pc, #196]	; (80025cc <writecmddata+0x2a4>)
 8002508:	f7ff fc78 	bl	8001dfc <PIN_LOW>
 800250c:	2102      	movs	r1, #2
 800250e:	482f      	ldr	r0, [pc, #188]	; (80025cc <writecmddata+0x2a4>)
 8002510:	f7ff fc74 	bl	8001dfc <PIN_LOW>
 8002514:	2102      	movs	r1, #2
 8002516:	482d      	ldr	r0, [pc, #180]	; (80025cc <writecmddata+0x2a4>)
 8002518:	f7ff fc80 	bl	8001e1c <PIN_HIGH>
 800251c:	2102      	movs	r1, #2
 800251e:	482b      	ldr	r0, [pc, #172]	; (80025cc <writecmddata+0x2a4>)
 8002520:	f7ff fc7c 	bl	8001e1c <PIN_HIGH>
 8002524:	4b29      	ldr	r3, [pc, #164]	; (80025cc <writecmddata+0x2a4>)
 8002526:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800252a:	619a      	str	r2, [r3, #24]
 800252c:	4b26      	ldr	r3, [pc, #152]	; (80025c8 <writecmddata+0x2a0>)
 800252e:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002532:	619a      	str	r2, [r3, #24]
 8002534:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <writecmddata+0x2a8>)
 8002536:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800253a:	619a      	str	r2, [r3, #24]
 800253c:	7b3b      	ldrb	r3, [r7, #12]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002544:	7b3b      	ldrb	r3, [r7, #12]
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800254c:	431a      	orrs	r2, r3
 800254e:	7b3b      	ldrb	r3, [r7, #12]
 8002550:	025b      	lsls	r3, r3, #9
 8002552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002556:	431a      	orrs	r2, r3
 8002558:	4b1c      	ldr	r3, [pc, #112]	; (80025cc <writecmddata+0x2a4>)
 800255a:	619a      	str	r2, [r3, #24]
 800255c:	7b3b      	ldrb	r3, [r7, #12]
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002564:	7b3b      	ldrb	r3, [r7, #12]
 8002566:	105b      	asrs	r3, r3, #1
 8002568:	f003 0310 	and.w	r3, r3, #16
 800256c:	431a      	orrs	r2, r3
 800256e:	7b3b      	ldrb	r3, [r7, #12]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	f003 0320 	and.w	r3, r3, #32
 8002576:	431a      	orrs	r2, r3
 8002578:	7b3b      	ldrb	r3, [r7, #12]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	431a      	orrs	r2, r3
 8002580:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <writecmddata+0x2a0>)
 8002582:	619a      	str	r2, [r3, #24]
 8002584:	7b3b      	ldrb	r3, [r7, #12]
 8002586:	019b      	lsls	r3, r3, #6
 8002588:	4a11      	ldr	r2, [pc, #68]	; (80025d0 <writecmddata+0x2a8>)
 800258a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800258e:	6193      	str	r3, [r2, #24]
 8002590:	2102      	movs	r1, #2
 8002592:	480e      	ldr	r0, [pc, #56]	; (80025cc <writecmddata+0x2a4>)
 8002594:	f7ff fc32 	bl	8001dfc <PIN_LOW>
 8002598:	2102      	movs	r1, #2
 800259a:	480c      	ldr	r0, [pc, #48]	; (80025cc <writecmddata+0x2a4>)
 800259c:	f7ff fc2e 	bl	8001dfc <PIN_LOW>
 80025a0:	2102      	movs	r1, #2
 80025a2:	480a      	ldr	r0, [pc, #40]	; (80025cc <writecmddata+0x2a4>)
 80025a4:	f7ff fc2a 	bl	8001dfc <PIN_LOW>
 80025a8:	2102      	movs	r1, #2
 80025aa:	4808      	ldr	r0, [pc, #32]	; (80025cc <writecmddata+0x2a4>)
 80025ac:	f7ff fc36 	bl	8001e1c <PIN_HIGH>
 80025b0:	2102      	movs	r1, #2
 80025b2:	4806      	ldr	r0, [pc, #24]	; (80025cc <writecmddata+0x2a4>)
 80025b4:	f7ff fc32 	bl	8001e1c <PIN_HIGH>
    CS_IDLE;
 80025b8:	2101      	movs	r1, #1
 80025ba:	4803      	ldr	r0, [pc, #12]	; (80025c8 <writecmddata+0x2a0>)
 80025bc:	f7ff fc2e 	bl	8001e1c <PIN_HIGH>
}
 80025c0:	bf00      	nop
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40020400 	.word	0x40020400
 80025cc:	40020000 	.word	0x40020000
 80025d0:	40020800 	.word	0x40020800

080025d4 <WriteCmdParamN>:


static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	603a      	str	r2, [r7, #0]
 80025de:	80fb      	strh	r3, [r7, #6]
 80025e0:	460b      	mov	r3, r1
 80025e2:	717b      	strb	r3, [r7, #5]
    CS_ACTIVE;
 80025e4:	2101      	movs	r1, #1
 80025e6:	4853      	ldr	r0, [pc, #332]	; (8002734 <WriteCmdParamN+0x160>)
 80025e8:	f7ff fc08 	bl	8001dfc <PIN_LOW>
    WriteCmd(cmd);
 80025ec:	2110      	movs	r1, #16
 80025ee:	4852      	ldr	r0, [pc, #328]	; (8002738 <WriteCmdParamN+0x164>)
 80025f0:	f7ff fc04 	bl	8001dfc <PIN_LOW>
 80025f4:	88fb      	ldrh	r3, [r7, #6]
 80025f6:	0a1b      	lsrs	r3, r3, #8
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	73fb      	strb	r3, [r7, #15]
 80025fc:	88fb      	ldrh	r3, [r7, #6]
 80025fe:	73bb      	strb	r3, [r7, #14]
 8002600:	4b4d      	ldr	r3, [pc, #308]	; (8002738 <WriteCmdParamN+0x164>)
 8002602:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002606:	619a      	str	r2, [r3, #24]
 8002608:	4b4a      	ldr	r3, [pc, #296]	; (8002734 <WriteCmdParamN+0x160>)
 800260a:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800260e:	619a      	str	r2, [r3, #24]
 8002610:	4b4a      	ldr	r3, [pc, #296]	; (800273c <WriteCmdParamN+0x168>)
 8002612:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002616:	619a      	str	r2, [r3, #24]
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002620:	7bfb      	ldrb	r3, [r7, #15]
 8002622:	021b      	lsls	r3, r3, #8
 8002624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002628:	431a      	orrs	r2, r3
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	025b      	lsls	r3, r3, #9
 800262e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002632:	431a      	orrs	r2, r3
 8002634:	4b40      	ldr	r3, [pc, #256]	; (8002738 <WriteCmdParamN+0x164>)
 8002636:	619a      	str	r2, [r3, #24]
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	105b      	asrs	r3, r3, #1
 8002644:	f003 0310 	and.w	r3, r3, #16
 8002648:	431a      	orrs	r2, r3
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	f003 0320 	and.w	r3, r3, #32
 8002652:	431a      	orrs	r2, r3
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	431a      	orrs	r2, r3
 800265c:	4b35      	ldr	r3, [pc, #212]	; (8002734 <WriteCmdParamN+0x160>)
 800265e:	619a      	str	r2, [r3, #24]
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	019b      	lsls	r3, r3, #6
 8002664:	4a35      	ldr	r2, [pc, #212]	; (800273c <WriteCmdParamN+0x168>)
 8002666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266a:	6193      	str	r3, [r2, #24]
 800266c:	2102      	movs	r1, #2
 800266e:	4832      	ldr	r0, [pc, #200]	; (8002738 <WriteCmdParamN+0x164>)
 8002670:	f7ff fbc4 	bl	8001dfc <PIN_LOW>
 8002674:	2102      	movs	r1, #2
 8002676:	4830      	ldr	r0, [pc, #192]	; (8002738 <WriteCmdParamN+0x164>)
 8002678:	f7ff fbc0 	bl	8001dfc <PIN_LOW>
 800267c:	2102      	movs	r1, #2
 800267e:	482e      	ldr	r0, [pc, #184]	; (8002738 <WriteCmdParamN+0x164>)
 8002680:	f7ff fbbc 	bl	8001dfc <PIN_LOW>
 8002684:	2102      	movs	r1, #2
 8002686:	482c      	ldr	r0, [pc, #176]	; (8002738 <WriteCmdParamN+0x164>)
 8002688:	f7ff fbc8 	bl	8001e1c <PIN_HIGH>
 800268c:	2102      	movs	r1, #2
 800268e:	482a      	ldr	r0, [pc, #168]	; (8002738 <WriteCmdParamN+0x164>)
 8002690:	f7ff fbc4 	bl	8001e1c <PIN_HIGH>
 8002694:	4b28      	ldr	r3, [pc, #160]	; (8002738 <WriteCmdParamN+0x164>)
 8002696:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800269a:	619a      	str	r2, [r3, #24]
 800269c:	4b25      	ldr	r3, [pc, #148]	; (8002734 <WriteCmdParamN+0x160>)
 800269e:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80026a2:	619a      	str	r2, [r3, #24]
 80026a4:	4b25      	ldr	r3, [pc, #148]	; (800273c <WriteCmdParamN+0x168>)
 80026a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80026aa:	619a      	str	r2, [r3, #24]
 80026ac:	7bbb      	ldrb	r3, [r7, #14]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80026b4:	7bbb      	ldrb	r3, [r7, #14]
 80026b6:	021b      	lsls	r3, r3, #8
 80026b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026bc:	431a      	orrs	r2, r3
 80026be:	7bbb      	ldrb	r3, [r7, #14]
 80026c0:	025b      	lsls	r3, r3, #9
 80026c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026c6:	431a      	orrs	r2, r3
 80026c8:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <WriteCmdParamN+0x164>)
 80026ca:	619a      	str	r2, [r3, #24]
 80026cc:	7bbb      	ldrb	r3, [r7, #14]
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80026d4:	7bbb      	ldrb	r3, [r7, #14]
 80026d6:	105b      	asrs	r3, r3, #1
 80026d8:	f003 0310 	and.w	r3, r3, #16
 80026dc:	431a      	orrs	r2, r3
 80026de:	7bbb      	ldrb	r3, [r7, #14]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	431a      	orrs	r2, r3
 80026e8:	7bbb      	ldrb	r3, [r7, #14]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	431a      	orrs	r2, r3
 80026f0:	4b10      	ldr	r3, [pc, #64]	; (8002734 <WriteCmdParamN+0x160>)
 80026f2:	619a      	str	r2, [r3, #24]
 80026f4:	7bbb      	ldrb	r3, [r7, #14]
 80026f6:	019b      	lsls	r3, r3, #6
 80026f8:	4a10      	ldr	r2, [pc, #64]	; (800273c <WriteCmdParamN+0x168>)
 80026fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fe:	6193      	str	r3, [r2, #24]
 8002700:	2102      	movs	r1, #2
 8002702:	480d      	ldr	r0, [pc, #52]	; (8002738 <WriteCmdParamN+0x164>)
 8002704:	f7ff fb7a 	bl	8001dfc <PIN_LOW>
 8002708:	2102      	movs	r1, #2
 800270a:	480b      	ldr	r0, [pc, #44]	; (8002738 <WriteCmdParamN+0x164>)
 800270c:	f7ff fb76 	bl	8001dfc <PIN_LOW>
 8002710:	2102      	movs	r1, #2
 8002712:	4809      	ldr	r0, [pc, #36]	; (8002738 <WriteCmdParamN+0x164>)
 8002714:	f7ff fb72 	bl	8001dfc <PIN_LOW>
 8002718:	2102      	movs	r1, #2
 800271a:	4807      	ldr	r0, [pc, #28]	; (8002738 <WriteCmdParamN+0x164>)
 800271c:	f7ff fb7e 	bl	8001e1c <PIN_HIGH>
 8002720:	2102      	movs	r1, #2
 8002722:	4805      	ldr	r0, [pc, #20]	; (8002738 <WriteCmdParamN+0x164>)
 8002724:	f7ff fb7a 	bl	8001e1c <PIN_HIGH>
 8002728:	2110      	movs	r1, #16
 800272a:	4803      	ldr	r0, [pc, #12]	; (8002738 <WriteCmdParamN+0x164>)
 800272c:	f7ff fb76 	bl	8001e1c <PIN_HIGH>
    while (N-- > 0) {
 8002730:	e104      	b.n	800293c <WriteCmdParamN+0x368>
 8002732:	bf00      	nop
 8002734:	40020400 	.word	0x40020400
 8002738:	40020000 	.word	0x40020000
 800273c:	40020800 	.word	0x40020800
        uint8_t u8 = *block++;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	603a      	str	r2, [r7, #0]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	737b      	strb	r3, [r7, #13]
        write8(u8);
 800274a:	4b85      	ldr	r3, [pc, #532]	; (8002960 <WriteCmdParamN+0x38c>)
 800274c:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002750:	619a      	str	r2, [r3, #24]
 8002752:	4b84      	ldr	r3, [pc, #528]	; (8002964 <WriteCmdParamN+0x390>)
 8002754:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002758:	619a      	str	r2, [r3, #24]
 800275a:	4b83      	ldr	r3, [pc, #524]	; (8002968 <WriteCmdParamN+0x394>)
 800275c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002760:	619a      	str	r2, [r3, #24]
 8002762:	7b7b      	ldrb	r3, [r7, #13]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800276a:	7b7b      	ldrb	r3, [r7, #13]
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002772:	431a      	orrs	r2, r3
 8002774:	7b7b      	ldrb	r3, [r7, #13]
 8002776:	025b      	lsls	r3, r3, #9
 8002778:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800277c:	431a      	orrs	r2, r3
 800277e:	4b78      	ldr	r3, [pc, #480]	; (8002960 <WriteCmdParamN+0x38c>)
 8002780:	619a      	str	r2, [r3, #24]
 8002782:	7b7b      	ldrb	r3, [r7, #13]
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800278a:	7b7b      	ldrb	r3, [r7, #13]
 800278c:	105b      	asrs	r3, r3, #1
 800278e:	f003 0310 	and.w	r3, r3, #16
 8002792:	431a      	orrs	r2, r3
 8002794:	7b7b      	ldrb	r3, [r7, #13]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	f003 0320 	and.w	r3, r3, #32
 800279c:	431a      	orrs	r2, r3
 800279e:	7b7b      	ldrb	r3, [r7, #13]
 80027a0:	f003 0308 	and.w	r3, r3, #8
 80027a4:	431a      	orrs	r2, r3
 80027a6:	4b6f      	ldr	r3, [pc, #444]	; (8002964 <WriteCmdParamN+0x390>)
 80027a8:	619a      	str	r2, [r3, #24]
 80027aa:	7b7b      	ldrb	r3, [r7, #13]
 80027ac:	019b      	lsls	r3, r3, #6
 80027ae:	4a6e      	ldr	r2, [pc, #440]	; (8002968 <WriteCmdParamN+0x394>)
 80027b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b4:	6193      	str	r3, [r2, #24]
 80027b6:	2102      	movs	r1, #2
 80027b8:	4869      	ldr	r0, [pc, #420]	; (8002960 <WriteCmdParamN+0x38c>)
 80027ba:	f7ff fb1f 	bl	8001dfc <PIN_LOW>
 80027be:	2102      	movs	r1, #2
 80027c0:	4867      	ldr	r0, [pc, #412]	; (8002960 <WriteCmdParamN+0x38c>)
 80027c2:	f7ff fb1b 	bl	8001dfc <PIN_LOW>
 80027c6:	2102      	movs	r1, #2
 80027c8:	4865      	ldr	r0, [pc, #404]	; (8002960 <WriteCmdParamN+0x38c>)
 80027ca:	f7ff fb17 	bl	8001dfc <PIN_LOW>
 80027ce:	2102      	movs	r1, #2
 80027d0:	4863      	ldr	r0, [pc, #396]	; (8002960 <WriteCmdParamN+0x38c>)
 80027d2:	f7ff fb23 	bl	8001e1c <PIN_HIGH>
 80027d6:	2102      	movs	r1, #2
 80027d8:	4861      	ldr	r0, [pc, #388]	; (8002960 <WriteCmdParamN+0x38c>)
 80027da:	f7ff fb1f 	bl	8001e1c <PIN_HIGH>
        if (N && is8347) {
 80027de:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 80aa 	beq.w	800293c <WriteCmdParamN+0x368>
 80027e8:	4b60      	ldr	r3, [pc, #384]	; (800296c <WriteCmdParamN+0x398>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80a5 	beq.w	800293c <WriteCmdParamN+0x368>
            cmd++;
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	3301      	adds	r3, #1
 80027f6:	80fb      	strh	r3, [r7, #6]
            WriteCmd(cmd);
 80027f8:	2110      	movs	r1, #16
 80027fa:	4859      	ldr	r0, [pc, #356]	; (8002960 <WriteCmdParamN+0x38c>)
 80027fc:	f7ff fafe 	bl	8001dfc <PIN_LOW>
 8002800:	88fb      	ldrh	r3, [r7, #6]
 8002802:	0a1b      	lsrs	r3, r3, #8
 8002804:	b29b      	uxth	r3, r3
 8002806:	733b      	strb	r3, [r7, #12]
 8002808:	88fb      	ldrh	r3, [r7, #6]
 800280a:	72fb      	strb	r3, [r7, #11]
 800280c:	4b54      	ldr	r3, [pc, #336]	; (8002960 <WriteCmdParamN+0x38c>)
 800280e:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002812:	619a      	str	r2, [r3, #24]
 8002814:	4b53      	ldr	r3, [pc, #332]	; (8002964 <WriteCmdParamN+0x390>)
 8002816:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800281a:	619a      	str	r2, [r3, #24]
 800281c:	4b52      	ldr	r3, [pc, #328]	; (8002968 <WriteCmdParamN+0x394>)
 800281e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002822:	619a      	str	r2, [r3, #24]
 8002824:	7b3b      	ldrb	r3, [r7, #12]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800282c:	7b3b      	ldrb	r3, [r7, #12]
 800282e:	021b      	lsls	r3, r3, #8
 8002830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002834:	431a      	orrs	r2, r3
 8002836:	7b3b      	ldrb	r3, [r7, #12]
 8002838:	025b      	lsls	r3, r3, #9
 800283a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800283e:	431a      	orrs	r2, r3
 8002840:	4b47      	ldr	r3, [pc, #284]	; (8002960 <WriteCmdParamN+0x38c>)
 8002842:	619a      	str	r2, [r3, #24]
 8002844:	7b3b      	ldrb	r3, [r7, #12]
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800284c:	7b3b      	ldrb	r3, [r7, #12]
 800284e:	105b      	asrs	r3, r3, #1
 8002850:	f003 0310 	and.w	r3, r3, #16
 8002854:	431a      	orrs	r2, r3
 8002856:	7b3b      	ldrb	r3, [r7, #12]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	f003 0320 	and.w	r3, r3, #32
 800285e:	431a      	orrs	r2, r3
 8002860:	7b3b      	ldrb	r3, [r7, #12]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	431a      	orrs	r2, r3
 8002868:	4b3e      	ldr	r3, [pc, #248]	; (8002964 <WriteCmdParamN+0x390>)
 800286a:	619a      	str	r2, [r3, #24]
 800286c:	7b3b      	ldrb	r3, [r7, #12]
 800286e:	019b      	lsls	r3, r3, #6
 8002870:	4a3d      	ldr	r2, [pc, #244]	; (8002968 <WriteCmdParamN+0x394>)
 8002872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002876:	6193      	str	r3, [r2, #24]
 8002878:	2102      	movs	r1, #2
 800287a:	4839      	ldr	r0, [pc, #228]	; (8002960 <WriteCmdParamN+0x38c>)
 800287c:	f7ff fabe 	bl	8001dfc <PIN_LOW>
 8002880:	2102      	movs	r1, #2
 8002882:	4837      	ldr	r0, [pc, #220]	; (8002960 <WriteCmdParamN+0x38c>)
 8002884:	f7ff faba 	bl	8001dfc <PIN_LOW>
 8002888:	2102      	movs	r1, #2
 800288a:	4835      	ldr	r0, [pc, #212]	; (8002960 <WriteCmdParamN+0x38c>)
 800288c:	f7ff fab6 	bl	8001dfc <PIN_LOW>
 8002890:	2102      	movs	r1, #2
 8002892:	4833      	ldr	r0, [pc, #204]	; (8002960 <WriteCmdParamN+0x38c>)
 8002894:	f7ff fac2 	bl	8001e1c <PIN_HIGH>
 8002898:	2102      	movs	r1, #2
 800289a:	4831      	ldr	r0, [pc, #196]	; (8002960 <WriteCmdParamN+0x38c>)
 800289c:	f7ff fabe 	bl	8001e1c <PIN_HIGH>
 80028a0:	4b2f      	ldr	r3, [pc, #188]	; (8002960 <WriteCmdParamN+0x38c>)
 80028a2:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80028a6:	619a      	str	r2, [r3, #24]
 80028a8:	4b2e      	ldr	r3, [pc, #184]	; (8002964 <WriteCmdParamN+0x390>)
 80028aa:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80028ae:	619a      	str	r2, [r3, #24]
 80028b0:	4b2d      	ldr	r3, [pc, #180]	; (8002968 <WriteCmdParamN+0x394>)
 80028b2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80028b6:	619a      	str	r2, [r3, #24]
 80028b8:	7afb      	ldrb	r3, [r7, #11]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80028c0:	7afb      	ldrb	r3, [r7, #11]
 80028c2:	021b      	lsls	r3, r3, #8
 80028c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c8:	431a      	orrs	r2, r3
 80028ca:	7afb      	ldrb	r3, [r7, #11]
 80028cc:	025b      	lsls	r3, r3, #9
 80028ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028d2:	431a      	orrs	r2, r3
 80028d4:	4b22      	ldr	r3, [pc, #136]	; (8002960 <WriteCmdParamN+0x38c>)
 80028d6:	619a      	str	r2, [r3, #24]
 80028d8:	7afb      	ldrb	r3, [r7, #11]
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80028e0:	7afb      	ldrb	r3, [r7, #11]
 80028e2:	105b      	asrs	r3, r3, #1
 80028e4:	f003 0310 	and.w	r3, r3, #16
 80028e8:	431a      	orrs	r2, r3
 80028ea:	7afb      	ldrb	r3, [r7, #11]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	f003 0320 	and.w	r3, r3, #32
 80028f2:	431a      	orrs	r2, r3
 80028f4:	7afb      	ldrb	r3, [r7, #11]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	431a      	orrs	r2, r3
 80028fc:	4b19      	ldr	r3, [pc, #100]	; (8002964 <WriteCmdParamN+0x390>)
 80028fe:	619a      	str	r2, [r3, #24]
 8002900:	7afb      	ldrb	r3, [r7, #11]
 8002902:	019b      	lsls	r3, r3, #6
 8002904:	4a18      	ldr	r2, [pc, #96]	; (8002968 <WriteCmdParamN+0x394>)
 8002906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290a:	6193      	str	r3, [r2, #24]
 800290c:	2102      	movs	r1, #2
 800290e:	4814      	ldr	r0, [pc, #80]	; (8002960 <WriteCmdParamN+0x38c>)
 8002910:	f7ff fa74 	bl	8001dfc <PIN_LOW>
 8002914:	2102      	movs	r1, #2
 8002916:	4812      	ldr	r0, [pc, #72]	; (8002960 <WriteCmdParamN+0x38c>)
 8002918:	f7ff fa70 	bl	8001dfc <PIN_LOW>
 800291c:	2102      	movs	r1, #2
 800291e:	4810      	ldr	r0, [pc, #64]	; (8002960 <WriteCmdParamN+0x38c>)
 8002920:	f7ff fa6c 	bl	8001dfc <PIN_LOW>
 8002924:	2102      	movs	r1, #2
 8002926:	480e      	ldr	r0, [pc, #56]	; (8002960 <WriteCmdParamN+0x38c>)
 8002928:	f7ff fa78 	bl	8001e1c <PIN_HIGH>
 800292c:	2102      	movs	r1, #2
 800292e:	480c      	ldr	r0, [pc, #48]	; (8002960 <WriteCmdParamN+0x38c>)
 8002930:	f7ff fa74 	bl	8001e1c <PIN_HIGH>
 8002934:	2110      	movs	r1, #16
 8002936:	480a      	ldr	r0, [pc, #40]	; (8002960 <WriteCmdParamN+0x38c>)
 8002938:	f7ff fa70 	bl	8001e1c <PIN_HIGH>
    while (N-- > 0) {
 800293c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002940:	b2da      	uxtb	r2, r3
 8002942:	3a01      	subs	r2, #1
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	717a      	strb	r2, [r7, #5]
 8002948:	2b00      	cmp	r3, #0
 800294a:	f73f aef9 	bgt.w	8002740 <WriteCmdParamN+0x16c>
        }
    }
    CS_IDLE;
 800294e:	2101      	movs	r1, #1
 8002950:	4804      	ldr	r0, [pc, #16]	; (8002964 <WriteCmdParamN+0x390>)
 8002952:	f7ff fa63 	bl	8001e1c <PIN_HIGH>
}
 8002956:	bf00      	nop
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40020000 	.word	0x40020000
 8002964:	40020400 	.word	0x40020400
 8002968:	40020800 	.word	0x40020800
 800296c:	200000cd 	.word	0x200000cd

08002970 <WriteCmdParam4>:


static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 8002970:	b590      	push	{r4, r7, lr}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	4604      	mov	r4, r0
 8002978:	4608      	mov	r0, r1
 800297a:	4611      	mov	r1, r2
 800297c:	461a      	mov	r2, r3
 800297e:	4623      	mov	r3, r4
 8002980:	71fb      	strb	r3, [r7, #7]
 8002982:	4603      	mov	r3, r0
 8002984:	71bb      	strb	r3, [r7, #6]
 8002986:	460b      	mov	r3, r1
 8002988:	717b      	strb	r3, [r7, #5]
 800298a:	4613      	mov	r3, r2
 800298c:	713b      	strb	r3, [r7, #4]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 800298e:	79bb      	ldrb	r3, [r7, #6]
 8002990:	733b      	strb	r3, [r7, #12]
 8002992:	797b      	ldrb	r3, [r7, #5]
 8002994:	737b      	strb	r3, [r7, #13]
 8002996:	793b      	ldrb	r3, [r7, #4]
 8002998:	73bb      	strb	r3, [r7, #14]
 800299a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800299e:	73fb      	strb	r3, [r7, #15]
    WriteCmdParamN(cmd, 4, d);
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	f107 020c 	add.w	r2, r7, #12
 80029a8:	2104      	movs	r1, #4
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fe12 	bl	80025d4 <WriteCmdParamN>
}
 80029b0:	bf00      	nop
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd90      	pop	{r4, r7, pc}

080029b8 <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F

static void init_table(const void *table, int16_t size)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08a      	sub	sp, #40	; 0x28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	807b      	strh	r3, [r7, #2]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24

    while (size > 0)
 80029c8:	e046      	b.n	8002a58 <init_table+0xa0>
    {
        uint8_t cmd = pgm_read_byte(p++);
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	627a      	str	r2, [r7, #36]	; 0x24
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        uint8_t len = pgm_read_byte(p++);
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	627a      	str	r2, [r7, #36]	; 0x24
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (cmd == TFTLCD_DELAY8)
 80029e2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80029e6:	2b7f      	cmp	r3, #127	; 0x7f
 80029e8:	d108      	bne.n	80029fc <init_table+0x44>
        {
            delay(len);
 80029ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029ee:	4618      	mov	r0, r3
 80029f0:	f003 f82a 	bl	8005a48 <delay>
            len = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029fa:	e024      	b.n	8002a46 <init_table+0x8e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 80029fc:	2300      	movs	r3, #0
 80029fe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002a02:	e010      	b.n	8002a26 <init_table+0x6e>
                dat[i] = pgm_read_byte(p++);
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	627a      	str	r2, [r7, #36]	; 0x24
 8002a0a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002a0e:	7819      	ldrb	r1, [r3, #0]
 8002a10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a14:	4413      	add	r3, r2
 8002a16:	460a      	mov	r2, r1
 8002a18:	f803 2c20 	strb.w	r2, [r3, #-32]
            for (uint8_t i = 0; i < len; i++)
 8002a1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002a20:	3301      	adds	r3, #1
 8002a22:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002a26:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002a2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d3e8      	bcc.n	8002a04 <init_table+0x4c>
            WriteCmdParamN(cmd, len, dat);
 8002a32:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8002a3c:	f107 0208 	add.w	r2, r7, #8
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff fdc7 	bl	80025d4 <WriteCmdParamN>
        }
        size -= len + 2;
 8002a46:	887a      	ldrh	r2, [r7, #2]
 8002a48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	3b02      	subs	r3, #2
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	807b      	strh	r3, [r7, #2]
    while (size > 0)
 8002a58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	dcb4      	bgt.n	80029ca <init_table+0x12>
    }
}
 8002a60:	bf00      	nop
 8002a62:	bf00      	nop
 8002a64:	3728      	adds	r7, #40	; 0x28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <init_table16>:


static void init_table16(const void *table, int16_t size)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b084      	sub	sp, #16
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	460b      	mov	r3, r1
 8002a74:	807b      	strh	r3, [r7, #2]
    uint16_t *p = (uint16_t *) table;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	60fb      	str	r3, [r7, #12]
    while (size > 0) {
 8002a7a:	e01d      	b.n	8002ab8 <init_table16+0x4e>
        uint16_t cmd = pgm_read_word(p++);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1c9a      	adds	r2, r3, #2
 8002a80:	60fa      	str	r2, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	817b      	strh	r3, [r7, #10]
        uint16_t d = pgm_read_word(p++);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1c9a      	adds	r2, r3, #2
 8002a8a:	60fa      	str	r2, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	813b      	strh	r3, [r7, #8]
        if (cmd == TFTLCD_DELAY)
 8002a90:	897b      	ldrh	r3, [r7, #10]
 8002a92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d104      	bne.n	8002aa4 <init_table16+0x3a>
            delay(d);
 8002a9a:	893b      	ldrh	r3, [r7, #8]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f002 ffd3 	bl	8005a48 <delay>
 8002aa2:	e005      	b.n	8002ab0 <init_table16+0x46>
        else {
			writecmddata(cmd, d);                      //static function
 8002aa4:	893a      	ldrh	r2, [r7, #8]
 8002aa6:	897b      	ldrh	r3, [r7, #10]
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fc3c 	bl	8002328 <writecmddata>
        }
        size -= 2 * sizeof(int16_t);
 8002ab0:	887b      	ldrh	r3, [r7, #2]
 8002ab2:	3b04      	subs	r3, #4
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	807b      	strh	r3, [r7, #2]
    while (size > 0) {
 8002ab8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	dcdd      	bgt.n	8002a7c <init_table16+0x12>
    }
}
 8002ac0:	bf00      	nop
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <reset>:


void reset(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
    done_reset = 1;
 8002ad0:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <reset+0x88>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 8002ad6:	f7ff faf9 	bl	80020cc <setWriteDir>
    CTL_INIT();
 8002ada:	2101      	movs	r1, #1
 8002adc:	481e      	ldr	r0, [pc, #120]	; (8002b58 <reset+0x8c>)
 8002ade:	f7ff f9c3 	bl	8001e68 <PIN_OUTPUT>
 8002ae2:	2102      	movs	r1, #2
 8002ae4:	481c      	ldr	r0, [pc, #112]	; (8002b58 <reset+0x8c>)
 8002ae6:	f7ff f9bf 	bl	8001e68 <PIN_OUTPUT>
 8002aea:	2110      	movs	r1, #16
 8002aec:	481a      	ldr	r0, [pc, #104]	; (8002b58 <reset+0x8c>)
 8002aee:	f7ff f9bb 	bl	8001e68 <PIN_OUTPUT>
 8002af2:	2101      	movs	r1, #1
 8002af4:	4819      	ldr	r0, [pc, #100]	; (8002b5c <reset+0x90>)
 8002af6:	f7ff f9b7 	bl	8001e68 <PIN_OUTPUT>
 8002afa:	2102      	movs	r1, #2
 8002afc:	4818      	ldr	r0, [pc, #96]	; (8002b60 <reset+0x94>)
 8002afe:	f7ff f9b3 	bl	8001e68 <PIN_OUTPUT>
    CS_IDLE;
 8002b02:	2101      	movs	r1, #1
 8002b04:	4815      	ldr	r0, [pc, #84]	; (8002b5c <reset+0x90>)
 8002b06:	f7ff f989 	bl	8001e1c <PIN_HIGH>
    RD_IDLE;
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	4812      	ldr	r0, [pc, #72]	; (8002b58 <reset+0x8c>)
 8002b0e:	f7ff f985 	bl	8001e1c <PIN_HIGH>
    WR_IDLE;
 8002b12:	2102      	movs	r1, #2
 8002b14:	4810      	ldr	r0, [pc, #64]	; (8002b58 <reset+0x8c>)
 8002b16:	f7ff f981 	bl	8001e1c <PIN_HIGH>
    RESET_IDLE;
 8002b1a:	2102      	movs	r1, #2
 8002b1c:	4810      	ldr	r0, [pc, #64]	; (8002b60 <reset+0x94>)
 8002b1e:	f7ff f97d 	bl	8001e1c <PIN_HIGH>
    delay(50);
 8002b22:	2032      	movs	r0, #50	; 0x32
 8002b24:	f002 ff90 	bl	8005a48 <delay>
    RESET_ACTIVE;
 8002b28:	2102      	movs	r1, #2
 8002b2a:	480d      	ldr	r0, [pc, #52]	; (8002b60 <reset+0x94>)
 8002b2c:	f7ff f966 	bl	8001dfc <PIN_LOW>
    delay(100);
 8002b30:	2064      	movs	r0, #100	; 0x64
 8002b32:	f002 ff89 	bl	8005a48 <delay>
    RESET_IDLE;
 8002b36:	2102      	movs	r1, #2
 8002b38:	4809      	ldr	r0, [pc, #36]	; (8002b60 <reset+0x94>)
 8002b3a:	f7ff f96f 	bl	8001e1c <PIN_HIGH>
    delay(1000);	//delay(100);	Poloni (28/05) Vide manual ILI9340 pg. 220
 8002b3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b42:	f002 ff81 	bl	8005a48 <delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 8002b46:	2100      	movs	r1, #0
 8002b48:	20b0      	movs	r0, #176	; 0xb0
 8002b4a:	f7ff fa6c 	bl	8002026 <WriteCmdData>
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	200000cc 	.word	0x200000cc
 8002b58:	40020000 	.word	0x40020000
 8002b5c:	40020400 	.word	0x40020400
 8002b60:	40020800 	.word	0x40020800

08002b64 <read16bits>:


static uint16_t read16bits(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	4873      	ldr	r0, [pc, #460]	; (8002d3c <read16bits+0x1d8>)
 8002b6e:	f7ff f955 	bl	8001e1c <PIN_HIGH>
 8002b72:	2101      	movs	r1, #1
 8002b74:	4871      	ldr	r0, [pc, #452]	; (8002d3c <read16bits+0x1d8>)
 8002b76:	f7ff f941 	bl	8001dfc <PIN_LOW>
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	486f      	ldr	r0, [pc, #444]	; (8002d3c <read16bits+0x1d8>)
 8002b7e:	f7ff f93d 	bl	8001dfc <PIN_LOW>
 8002b82:	2101      	movs	r1, #1
 8002b84:	486d      	ldr	r0, [pc, #436]	; (8002d3c <read16bits+0x1d8>)
 8002b86:	f7ff f939 	bl	8001dfc <PIN_LOW>
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	486b      	ldr	r0, [pc, #428]	; (8002d3c <read16bits+0x1d8>)
 8002b8e:	f7ff f935 	bl	8001dfc <PIN_LOW>
 8002b92:	2101      	movs	r1, #1
 8002b94:	4869      	ldr	r0, [pc, #420]	; (8002d3c <read16bits+0x1d8>)
 8002b96:	f7ff f931 	bl	8001dfc <PIN_LOW>
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	4867      	ldr	r0, [pc, #412]	; (8002d3c <read16bits+0x1d8>)
 8002b9e:	f7ff f92d 	bl	8001dfc <PIN_LOW>
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	4865      	ldr	r0, [pc, #404]	; (8002d3c <read16bits+0x1d8>)
 8002ba6:	f7ff f929 	bl	8001dfc <PIN_LOW>
 8002baa:	4b64      	ldr	r3, [pc, #400]	; (8002d3c <read16bits+0x1d8>)
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	085b      	lsrs	r3, r3, #1
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	4b61      	ldr	r3, [pc, #388]	; (8002d40 <read16bits+0x1dc>)
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	4b5d      	ldr	r3, [pc, #372]	; (8002d40 <read16bits+0x1dc>)
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	f003 0320 	and.w	r3, r3, #32
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	4b58      	ldr	r3, [pc, #352]	; (8002d40 <read16bits+0x1dc>)
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	085b      	lsrs	r3, r3, #1
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	4313      	orrs	r3, r2
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	4b53      	ldr	r3, [pc, #332]	; (8002d40 <read16bits+0x1dc>)
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	4b4e      	ldr	r3, [pc, #312]	; (8002d3c <read16bits+0x1d8>)
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	0a1b      	lsrs	r3, r3, #8
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	4b4c      	ldr	r3, [pc, #304]	; (8002d44 <read16bits+0x1e0>)
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	099b      	lsrs	r3, r3, #6
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	4313      	orrs	r3, r2
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	4b45      	ldr	r3, [pc, #276]	; (8002d3c <read16bits+0x1d8>)
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	0a5b      	lsrs	r3, r3, #9
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	4313      	orrs	r3, r2
 8002c34:	80fb      	strh	r3, [r7, #6]
 8002c36:	2101      	movs	r1, #1
 8002c38:	4840      	ldr	r0, [pc, #256]	; (8002d3c <read16bits+0x1d8>)
 8002c3a:	f7ff f8ef 	bl	8001e1c <PIN_HIGH>
 8002c3e:	2101      	movs	r1, #1
 8002c40:	483e      	ldr	r0, [pc, #248]	; (8002d3c <read16bits+0x1d8>)
 8002c42:	f7ff f8eb 	bl	8001e1c <PIN_HIGH>
    READ_8(lo);
 8002c46:	2101      	movs	r1, #1
 8002c48:	483c      	ldr	r0, [pc, #240]	; (8002d3c <read16bits+0x1d8>)
 8002c4a:	f7ff f8e7 	bl	8001e1c <PIN_HIGH>
 8002c4e:	2101      	movs	r1, #1
 8002c50:	483a      	ldr	r0, [pc, #232]	; (8002d3c <read16bits+0x1d8>)
 8002c52:	f7ff f8d3 	bl	8001dfc <PIN_LOW>
 8002c56:	2101      	movs	r1, #1
 8002c58:	4838      	ldr	r0, [pc, #224]	; (8002d3c <read16bits+0x1d8>)
 8002c5a:	f7ff f8cf 	bl	8001dfc <PIN_LOW>
 8002c5e:	2101      	movs	r1, #1
 8002c60:	4836      	ldr	r0, [pc, #216]	; (8002d3c <read16bits+0x1d8>)
 8002c62:	f7ff f8cb 	bl	8001dfc <PIN_LOW>
 8002c66:	2101      	movs	r1, #1
 8002c68:	4834      	ldr	r0, [pc, #208]	; (8002d3c <read16bits+0x1d8>)
 8002c6a:	f7ff f8c7 	bl	8001dfc <PIN_LOW>
 8002c6e:	2101      	movs	r1, #1
 8002c70:	4832      	ldr	r0, [pc, #200]	; (8002d3c <read16bits+0x1d8>)
 8002c72:	f7ff f8c3 	bl	8001dfc <PIN_LOW>
 8002c76:	2101      	movs	r1, #1
 8002c78:	4830      	ldr	r0, [pc, #192]	; (8002d3c <read16bits+0x1d8>)
 8002c7a:	f7ff f8bf 	bl	8001dfc <PIN_LOW>
 8002c7e:	2101      	movs	r1, #1
 8002c80:	482e      	ldr	r0, [pc, #184]	; (8002d3c <read16bits+0x1d8>)
 8002c82:	f7ff f8bb 	bl	8001dfc <PIN_LOW>
 8002c86:	4b2d      	ldr	r3, [pc, #180]	; (8002d3c <read16bits+0x1d8>)
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	085b      	lsrs	r3, r3, #1
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	4b2a      	ldr	r3, [pc, #168]	; (8002d40 <read16bits+0x1dc>)
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	4b26      	ldr	r3, [pc, #152]	; (8002d40 <read16bits+0x1dc>)
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	f003 0320 	and.w	r3, r3, #32
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	4b21      	ldr	r3, [pc, #132]	; (8002d40 <read16bits+0x1dc>)
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	085b      	lsrs	r3, r3, #1
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	4b1c      	ldr	r3, [pc, #112]	; (8002d40 <read16bits+0x1dc>)
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	4b17      	ldr	r3, [pc, #92]	; (8002d3c <read16bits+0x1d8>)
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	0a1b      	lsrs	r3, r3, #8
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	4313      	orrs	r3, r2
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	4b15      	ldr	r3, [pc, #84]	; (8002d44 <read16bits+0x1e0>)
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	099b      	lsrs	r3, r3, #6
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	4b0e      	ldr	r3, [pc, #56]	; (8002d3c <read16bits+0x1d8>)
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	0a5b      	lsrs	r3, r3, #9
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	717b      	strb	r3, [r7, #5]
 8002d12:	2101      	movs	r1, #1
 8002d14:	4809      	ldr	r0, [pc, #36]	; (8002d3c <read16bits+0x1d8>)
 8002d16:	f7ff f881 	bl	8001e1c <PIN_HIGH>
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	4807      	ldr	r0, [pc, #28]	; (8002d3c <read16bits+0x1d8>)
 8002d1e:	f7ff f87d 	bl	8001e1c <PIN_HIGH>
    return (ret << 8) | lo;
 8002d22:	88fb      	ldrh	r3, [r7, #6]
 8002d24:	021b      	lsls	r3, r3, #8
 8002d26:	b21a      	sxth	r2, r3
 8002d28:	797b      	ldrb	r3, [r7, #5]
 8002d2a:	b21b      	sxth	r3, r3
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	b21b      	sxth	r3, r3
 8002d30:	b29b      	uxth	r3, r3
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40020000 	.word	0x40020000
 8002d40:	40020400 	.word	0x40020400
 8002d44:	40020800 	.word	0x40020800

08002d48 <readReg>:


uint16_t readReg(uint16_t reg, int8_t index)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	460a      	mov	r2, r1
 8002d52:	80fb      	strh	r3, [r7, #6]
 8002d54:	4613      	mov	r3, r2
 8002d56:	717b      	strb	r3, [r7, #5]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 8002d58:	4b65      	ldr	r3, [pc, #404]	; (8002ef0 <readReg+0x1a8>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <readReg+0x1c>
        reset();
 8002d60:	f7ff feb4 	bl	8002acc <reset>
    CS_ACTIVE;
 8002d64:	2101      	movs	r1, #1
 8002d66:	4863      	ldr	r0, [pc, #396]	; (8002ef4 <readReg+0x1ac>)
 8002d68:	f7ff f848 	bl	8001dfc <PIN_LOW>
    WriteCmd(reg);
 8002d6c:	2110      	movs	r1, #16
 8002d6e:	4862      	ldr	r0, [pc, #392]	; (8002ef8 <readReg+0x1b0>)
 8002d70:	f7ff f844 	bl	8001dfc <PIN_LOW>
 8002d74:	88fb      	ldrh	r3, [r7, #6]
 8002d76:	0a1b      	lsrs	r3, r3, #8
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	73fb      	strb	r3, [r7, #15]
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	73bb      	strb	r3, [r7, #14]
 8002d80:	4b5d      	ldr	r3, [pc, #372]	; (8002ef8 <readReg+0x1b0>)
 8002d82:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002d86:	619a      	str	r2, [r3, #24]
 8002d88:	4b5a      	ldr	r3, [pc, #360]	; (8002ef4 <readReg+0x1ac>)
 8002d8a:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002d8e:	619a      	str	r2, [r3, #24]
 8002d90:	4b5a      	ldr	r3, [pc, #360]	; (8002efc <readReg+0x1b4>)
 8002d92:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002d96:	619a      	str	r2, [r3, #24]
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
 8002da2:	021b      	lsls	r3, r3, #8
 8002da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da8:	431a      	orrs	r2, r3
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	025b      	lsls	r3, r3, #9
 8002dae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db2:	431a      	orrs	r2, r3
 8002db4:	4b50      	ldr	r3, [pc, #320]	; (8002ef8 <readReg+0x1b0>)
 8002db6:	619a      	str	r2, [r3, #24]
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	105b      	asrs	r3, r3, #1
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	4b45      	ldr	r3, [pc, #276]	; (8002ef4 <readReg+0x1ac>)
 8002dde:	619a      	str	r2, [r3, #24]
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	019b      	lsls	r3, r3, #6
 8002de4:	4a45      	ldr	r2, [pc, #276]	; (8002efc <readReg+0x1b4>)
 8002de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dea:	6193      	str	r3, [r2, #24]
 8002dec:	2102      	movs	r1, #2
 8002dee:	4842      	ldr	r0, [pc, #264]	; (8002ef8 <readReg+0x1b0>)
 8002df0:	f7ff f804 	bl	8001dfc <PIN_LOW>
 8002df4:	2102      	movs	r1, #2
 8002df6:	4840      	ldr	r0, [pc, #256]	; (8002ef8 <readReg+0x1b0>)
 8002df8:	f7ff f800 	bl	8001dfc <PIN_LOW>
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	483e      	ldr	r0, [pc, #248]	; (8002ef8 <readReg+0x1b0>)
 8002e00:	f7fe fffc 	bl	8001dfc <PIN_LOW>
 8002e04:	2102      	movs	r1, #2
 8002e06:	483c      	ldr	r0, [pc, #240]	; (8002ef8 <readReg+0x1b0>)
 8002e08:	f7ff f808 	bl	8001e1c <PIN_HIGH>
 8002e0c:	2102      	movs	r1, #2
 8002e0e:	483a      	ldr	r0, [pc, #232]	; (8002ef8 <readReg+0x1b0>)
 8002e10:	f7ff f804 	bl	8001e1c <PIN_HIGH>
 8002e14:	4b38      	ldr	r3, [pc, #224]	; (8002ef8 <readReg+0x1b0>)
 8002e16:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002e1a:	619a      	str	r2, [r3, #24]
 8002e1c:	4b35      	ldr	r3, [pc, #212]	; (8002ef4 <readReg+0x1ac>)
 8002e1e:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002e22:	619a      	str	r2, [r3, #24]
 8002e24:	4b35      	ldr	r3, [pc, #212]	; (8002efc <readReg+0x1b4>)
 8002e26:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002e2a:	619a      	str	r2, [r3, #24]
 8002e2c:	7bbb      	ldrb	r3, [r7, #14]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002e34:	7bbb      	ldrb	r3, [r7, #14]
 8002e36:	021b      	lsls	r3, r3, #8
 8002e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	7bbb      	ldrb	r3, [r7, #14]
 8002e40:	025b      	lsls	r3, r3, #9
 8002e42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e46:	431a      	orrs	r2, r3
 8002e48:	4b2b      	ldr	r3, [pc, #172]	; (8002ef8 <readReg+0x1b0>)
 8002e4a:	619a      	str	r2, [r3, #24]
 8002e4c:	7bbb      	ldrb	r3, [r7, #14]
 8002e4e:	011b      	lsls	r3, r3, #4
 8002e50:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002e54:	7bbb      	ldrb	r3, [r7, #14]
 8002e56:	105b      	asrs	r3, r3, #1
 8002e58:	f003 0310 	and.w	r3, r3, #16
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	7bbb      	ldrb	r3, [r7, #14]
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	f003 0320 	and.w	r3, r3, #32
 8002e66:	431a      	orrs	r2, r3
 8002e68:	7bbb      	ldrb	r3, [r7, #14]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	4b20      	ldr	r3, [pc, #128]	; (8002ef4 <readReg+0x1ac>)
 8002e72:	619a      	str	r2, [r3, #24]
 8002e74:	7bbb      	ldrb	r3, [r7, #14]
 8002e76:	019b      	lsls	r3, r3, #6
 8002e78:	4a20      	ldr	r2, [pc, #128]	; (8002efc <readReg+0x1b4>)
 8002e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7e:	6193      	str	r3, [r2, #24]
 8002e80:	2102      	movs	r1, #2
 8002e82:	481d      	ldr	r0, [pc, #116]	; (8002ef8 <readReg+0x1b0>)
 8002e84:	f7fe ffba 	bl	8001dfc <PIN_LOW>
 8002e88:	2102      	movs	r1, #2
 8002e8a:	481b      	ldr	r0, [pc, #108]	; (8002ef8 <readReg+0x1b0>)
 8002e8c:	f7fe ffb6 	bl	8001dfc <PIN_LOW>
 8002e90:	2102      	movs	r1, #2
 8002e92:	4819      	ldr	r0, [pc, #100]	; (8002ef8 <readReg+0x1b0>)
 8002e94:	f7fe ffb2 	bl	8001dfc <PIN_LOW>
 8002e98:	2102      	movs	r1, #2
 8002e9a:	4817      	ldr	r0, [pc, #92]	; (8002ef8 <readReg+0x1b0>)
 8002e9c:	f7fe ffbe 	bl	8001e1c <PIN_HIGH>
 8002ea0:	2102      	movs	r1, #2
 8002ea2:	4815      	ldr	r0, [pc, #84]	; (8002ef8 <readReg+0x1b0>)
 8002ea4:	f7fe ffba 	bl	8001e1c <PIN_HIGH>
 8002ea8:	2110      	movs	r1, #16
 8002eaa:	4813      	ldr	r0, [pc, #76]	; (8002ef8 <readReg+0x1b0>)
 8002eac:	f7fe ffb6 	bl	8001e1c <PIN_HIGH>
    setReadDir();
 8002eb0:	f7ff f8de 	bl	8002070 <setReadDir>
    delay(1);    //1us should be adequate
 8002eb4:	2001      	movs	r0, #1
 8002eb6:	f002 fdc7 	bl	8005a48 <delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 8002eba:	f7ff fe53 	bl	8002b64 <read16bits>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	81bb      	strh	r3, [r7, #12]
 8002ec2:	797b      	ldrb	r3, [r7, #5]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	717b      	strb	r3, [r7, #5]
 8002eca:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	daf3      	bge.n	8002eba <readReg+0x172>
    RD_IDLE;
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	4808      	ldr	r0, [pc, #32]	; (8002ef8 <readReg+0x1b0>)
 8002ed6:	f7fe ffa1 	bl	8001e1c <PIN_HIGH>
    CS_IDLE;
 8002eda:	2101      	movs	r1, #1
 8002edc:	4805      	ldr	r0, [pc, #20]	; (8002ef4 <readReg+0x1ac>)
 8002ede:	f7fe ff9d 	bl	8001e1c <PIN_HIGH>
    setWriteDir();
 8002ee2:	f7ff f8f3 	bl	80020cc <setWriteDir>
    return ret;
 8002ee6:	89bb      	ldrh	r3, [r7, #12]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	200000cc 	.word	0x200000cc
 8002ef4:	40020400 	.word	0x40020400
 8002ef8:	40020000 	.word	0x40020000
 8002efc:	40020800 	.word	0x40020800

08002f00 <readReg32>:


uint32_t readReg32(uint16_t reg)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8002f0a:	88fb      	ldrh	r3, [r7, #6]
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff ff1a 	bl	8002d48 <readReg>
 8002f14:	4603      	mov	r3, r0
 8002f16:	81fb      	strh	r3, [r7, #14]
    uint16_t l = readReg(reg, 1);
 8002f18:	88fb      	ldrh	r3, [r7, #6]
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff ff13 	bl	8002d48 <readReg>
 8002f22:	4603      	mov	r3, r0
 8002f24:	81bb      	strh	r3, [r7, #12]
    return ((uint32_t) h << 16) | (l);
 8002f26:	89fb      	ldrh	r3, [r7, #14]
 8002f28:	041a      	lsls	r2, r3, #16
 8002f2a:	89bb      	ldrh	r3, [r7, #12]
 8002f2c:	4313      	orrs	r3, r2
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <readReg40>:


uint32_t readReg40(uint16_t reg)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b084      	sub	sp, #16
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8002f40:	88fb      	ldrh	r3, [r7, #6]
 8002f42:	2100      	movs	r1, #0
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff feff 	bl	8002d48 <readReg>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	81fb      	strh	r3, [r7, #14]
    uint16_t m = readReg(reg, 1);
 8002f4e:	88fb      	ldrh	r3, [r7, #6]
 8002f50:	2101      	movs	r1, #1
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff fef8 	bl	8002d48 <readReg>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	81bb      	strh	r3, [r7, #12]
    uint16_t l = readReg(reg, 2);
 8002f5c:	88fb      	ldrh	r3, [r7, #6]
 8002f5e:	2102      	movs	r1, #2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fef1 	bl	8002d48 <readReg>
 8002f66:	4603      	mov	r3, r0
 8002f68:	817b      	strh	r3, [r7, #10]
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 8002f6a:	89fb      	ldrh	r3, [r7, #14]
 8002f6c:	061b      	lsls	r3, r3, #24
 8002f6e:	89ba      	ldrh	r2, [r7, #12]
 8002f70:	0212      	lsls	r2, r2, #8
 8002f72:	4313      	orrs	r3, r2
 8002f74:	897a      	ldrh	r2, [r7, #10]
 8002f76:	0a12      	lsrs	r2, r2, #8
 8002f78:	b292      	uxth	r2, r2
 8002f7a:	4313      	orrs	r3, r2
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <tft_init>:


void tft_init(uint16_t ID)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	80fb      	strh	r3, [r7, #6]
	int dummy=0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
    int16_t table_size;
    _lcd_xor = 0;
 8002f96:	4be1      	ldr	r3, [pc, #900]	; (800331c <tft_init+0x398>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	801a      	strh	r2, [r3, #0]
    switch (_lcd_ID = ID) {
 8002f9c:	4ae0      	ldr	r2, [pc, #896]	; (8003320 <tft_init+0x39c>)
 8002f9e:	88fb      	ldrh	r3, [r7, #6]
 8002fa0:	8013      	strh	r3, [r2, #0]
 8002fa2:	4bdf      	ldr	r3, [pc, #892]	; (8003320 <tft_init+0x39c>)
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	f24c 5205 	movw	r2, #50437	; 0xc505
 8002faa:	4293      	cmp	r3, r2
 8002fac:	f000 82cc 	beq.w	8003548 <tft_init+0x5c4>
 8002fb0:	f24c 5205 	movw	r2, #50437	; 0xc505
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	f300 8303 	bgt.w	80035c0 <tft_init+0x63c>
 8002fba:	f24b 5209 	movw	r2, #46345	; 0xb509
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	f000 82cb 	beq.w	800355a <tft_init+0x5d6>
 8002fc4:	f24b 5209 	movw	r2, #46345	; 0xb509
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	f300 82f9 	bgt.w	80035c0 <tft_init+0x63c>
 8002fce:	f24b 5205 	movw	r2, #46341	; 0xb505
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	f000 82b8 	beq.w	8003548 <tft_init+0x5c4>
 8002fd8:	f24b 5205 	movw	r2, #46341	; 0xb505
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	f300 82ef 	bgt.w	80035c0 <tft_init+0x63c>
 8002fe2:	f64a 4211 	movw	r2, #44049	; 0xac11
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	f000 8239 	beq.w	800345e <tft_init+0x4da>
 8002fec:	f64a 4211 	movw	r2, #44049	; 0xac11
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	f300 82e5 	bgt.w	80035c0 <tft_init+0x63c>
 8002ff6:	f249 4288 	movw	r2, #38024	; 0x9488
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	f300 82e0 	bgt.w	80035c0 <tft_init+0x63c>
 8003000:	f249 4287 	movw	r2, #38023	; 0x9487
 8003004:	4293      	cmp	r3, r2
 8003006:	f280 8288 	bge.w	800351a <tft_init+0x596>
 800300a:	f249 4286 	movw	r2, #38022	; 0x9486
 800300e:	4293      	cmp	r3, r2
 8003010:	f000 8269 	beq.w	80034e6 <tft_init+0x562>
 8003014:	f249 4286 	movw	r2, #38022	; 0x9486
 8003018:	4293      	cmp	r3, r2
 800301a:	f300 82d1 	bgt.w	80035c0 <tft_init+0x63c>
 800301e:	f249 4281 	movw	r2, #38017	; 0x9481
 8003022:	4293      	cmp	r3, r2
 8003024:	f000 8248 	beq.w	80034b8 <tft_init+0x534>
 8003028:	f249 4281 	movw	r2, #38017	; 0x9481
 800302c:	4293      	cmp	r3, r2
 800302e:	f300 82c7 	bgt.w	80035c0 <tft_init+0x63c>
 8003032:	f249 3241 	movw	r2, #37697	; 0x9341
 8003036:	4293      	cmp	r3, r2
 8003038:	f300 82c2 	bgt.w	80035c0 <tft_init+0x63c>
 800303c:	f249 3202 	movw	r2, #37634	; 0x9302
 8003040:	4293      	cmp	r3, r2
 8003042:	f280 80a5 	bge.w	8003190 <tft_init+0x20c>
 8003046:	f249 0290 	movw	r2, #37008	; 0x9090
 800304a:	4293      	cmp	r3, r2
 800304c:	f000 818f 	beq.w	800336e <tft_init+0x3ea>
 8003050:	f249 0290 	movw	r2, #37008	; 0x9090
 8003054:	4293      	cmp	r3, r2
 8003056:	f300 82b3 	bgt.w	80035c0 <tft_init+0x63c>
 800305a:	f248 3257 	movw	r2, #33623	; 0x8357
 800305e:	4293      	cmp	r3, r2
 8003060:	f000 8180 	beq.w	8003364 <tft_init+0x3e0>
 8003064:	f248 3257 	movw	r2, #33623	; 0x8357
 8003068:	4293      	cmp	r3, r2
 800306a:	f300 82a9 	bgt.w	80035c0 <tft_init+0x63c>
 800306e:	f248 0231 	movw	r2, #32817	; 0x8031
 8003072:	4293      	cmp	r3, r2
 8003074:	f000 816d 	beq.w	8003352 <tft_init+0x3ce>
 8003078:	f248 0231 	movw	r2, #32817	; 0x8031
 800307c:	4293      	cmp	r3, r2
 800307e:	f300 829f 	bgt.w	80035c0 <tft_init+0x63c>
 8003082:	f247 7296 	movw	r2, #30614	; 0x7796
 8003086:	4293      	cmp	r3, r2
 8003088:	f000 8242 	beq.w	8003510 <tft_init+0x58c>
 800308c:	f247 7296 	movw	r2, #30614	; 0x7796
 8003090:	4293      	cmp	r3, r2
 8003092:	f300 8295 	bgt.w	80035c0 <tft_init+0x63c>
 8003096:	f247 7293 	movw	r2, #30611	; 0x7793
 800309a:	4293      	cmp	r3, r2
 800309c:	f000 825d 	beq.w	800355a <tft_init+0x5d6>
 80030a0:	f247 7293 	movw	r2, #30611	; 0x7793
 80030a4:	4293      	cmp	r3, r2
 80030a6:	f300 828b 	bgt.w	80035c0 <tft_init+0x63c>
 80030aa:	f247 7289 	movw	r2, #30601	; 0x7789
 80030ae:	4293      	cmp	r3, r2
 80030b0:	f000 8146 	beq.w	8003340 <tft_init+0x3bc>
 80030b4:	f247 7289 	movw	r2, #30601	; 0x7789
 80030b8:	4293      	cmp	r3, r2
 80030ba:	f300 8281 	bgt.w	80035c0 <tft_init+0x63c>
 80030be:	f646 0209 	movw	r2, #26633	; 0x6809
 80030c2:	4293      	cmp	r3, r2
 80030c4:	f000 8194 	beq.w	80033f0 <tft_init+0x46c>
 80030c8:	f646 0209 	movw	r2, #26633	; 0x6809
 80030cc:	4293      	cmp	r3, r2
 80030ce:	f300 8277 	bgt.w	80035c0 <tft_init+0x63c>
 80030d2:	f245 4208 	movw	r2, #21512	; 0x5408
 80030d6:	4293      	cmp	r3, r2
 80030d8:	f000 817a 	beq.w	80033d0 <tft_init+0x44c>
 80030dc:	f245 4208 	movw	r2, #21512	; 0x5408
 80030e0:	4293      	cmp	r3, r2
 80030e2:	f300 826d 	bgt.w	80035c0 <tft_init+0x63c>
 80030e6:	f245 3210 	movw	r2, #21264	; 0x5310
 80030ea:	4293      	cmp	r3, r2
 80030ec:	f000 8100 	beq.w	80032f0 <tft_init+0x36c>
 80030f0:	f245 3210 	movw	r2, #21264	; 0x5310
 80030f4:	4293      	cmp	r3, r2
 80030f6:	f300 8263 	bgt.w	80035c0 <tft_init+0x63c>
 80030fa:	f242 0253 	movw	r2, #8275	; 0x2053
 80030fe:	4293      	cmp	r3, r2
 8003100:	f000 81a8 	beq.w	8003454 <tft_init+0x4d0>
 8003104:	f242 0253 	movw	r2, #8275	; 0x2053
 8003108:	4293      	cmp	r3, r2
 800310a:	f300 8259 	bgt.w	80035c0 <tft_init+0x63c>
 800310e:	f241 6202 	movw	r2, #5634	; 0x1602
 8003112:	4293      	cmp	r3, r2
 8003114:	f000 8195 	beq.w	8003442 <tft_init+0x4be>
 8003118:	f241 6202 	movw	r2, #5634	; 0x1602
 800311c:	4293      	cmp	r3, r2
 800311e:	f300 824f 	bgt.w	80035c0 <tft_init+0x63c>
 8003122:	f241 5281 	movw	r2, #5505	; 0x1581
 8003126:	4293      	cmp	r3, r2
 8003128:	f000 81c1 	beq.w	80034ae <tft_init+0x52a>
 800312c:	f241 5281 	movw	r2, #5505	; 0x1581
 8003130:	4293      	cmp	r3, r2
 8003132:	f300 8245 	bgt.w	80035c0 <tft_init+0x63c>
 8003136:	f241 5226 	movw	r2, #5414	; 0x1526
 800313a:	4293      	cmp	r3, r2
 800313c:	f000 80cf 	beq.w	80032de <tft_init+0x35a>
 8003140:	f241 5226 	movw	r2, #5414	; 0x1526
 8003144:	4293      	cmp	r3, r2
 8003146:	f300 823b 	bgt.w	80035c0 <tft_init+0x63c>
 800314a:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 800314e:	f000 80bd 	beq.w	80032cc <tft_init+0x348>
 8003152:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8003156:	f300 8233 	bgt.w	80035c0 <tft_init+0x63c>
 800315a:	f241 5211 	movw	r2, #5393	; 0x1511
 800315e:	4293      	cmp	r3, r2
 8003160:	f000 80a0 	beq.w	80032a4 <tft_init+0x320>
 8003164:	f241 5211 	movw	r2, #5393	; 0x1511
 8003168:	4293      	cmp	r3, r2
 800316a:	f300 8229 	bgt.w	80035c0 <tft_init+0x63c>
 800316e:	f241 5205 	movw	r2, #5381	; 0x1505
 8003172:	4293      	cmp	r3, r2
 8003174:	f000 8131 	beq.w	80033da <tft_init+0x456>
 8003178:	f241 5205 	movw	r2, #5381	; 0x1505
 800317c:	4293      	cmp	r3, r2
 800317e:	f300 821f 	bgt.w	80035c0 <tft_init+0x63c>
 8003182:	2b01      	cmp	r3, #1
 8003184:	f000 811f 	beq.w	80033c6 <tft_init+0x442>
 8003188:	2b99      	cmp	r3, #153	; 0x99
 800318a:	f000 8107 	beq.w	800339c <tft_init+0x418>
 800318e:	e217      	b.n	80035c0 <tft_init+0x63c>
 8003190:	f5a3 4313 	sub.w	r3, r3, #37632	; 0x9300
 8003194:	3b02      	subs	r3, #2
 8003196:	2b3f      	cmp	r3, #63	; 0x3f
 8003198:	f200 8212 	bhi.w	80035c0 <tft_init+0x63c>
 800319c:	a201      	add	r2, pc, #4	; (adr r2, 80031a4 <tft_init+0x220>)
 800319e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a2:	bf00      	nop
 80031a4:	08003469 	.word	0x08003469
 80031a8:	080035c1 	.word	0x080035c1
 80031ac:	080035c1 	.word	0x080035c1
 80031b0:	080035c1 	.word	0x080035c1
 80031b4:	080035c1 	.word	0x080035c1
 80031b8:	080035c1 	.word	0x080035c1
 80031bc:	080035c1 	.word	0x080035c1
 80031c0:	080035c1 	.word	0x080035c1
 80031c4:	080035c1 	.word	0x080035c1
 80031c8:	080035c1 	.word	0x080035c1
 80031cc:	080035c1 	.word	0x080035c1
 80031d0:	080035c1 	.word	0x080035c1
 80031d4:	080035c1 	.word	0x080035c1
 80031d8:	080035c1 	.word	0x080035c1
 80031dc:	080035c1 	.word	0x080035c1
 80031e0:	080035c1 	.word	0x080035c1
 80031e4:	080035c1 	.word	0x080035c1
 80031e8:	080035c1 	.word	0x080035c1
 80031ec:	080035c1 	.word	0x080035c1
 80031f0:	080035c1 	.word	0x080035c1
 80031f4:	080035c1 	.word	0x080035c1
 80031f8:	080035c1 	.word	0x080035c1
 80031fc:	080035c1 	.word	0x080035c1
 8003200:	080035c1 	.word	0x080035c1
 8003204:	080035c1 	.word	0x080035c1
 8003208:	080035c1 	.word	0x080035c1
 800320c:	080035c1 	.word	0x080035c1
 8003210:	080035c1 	.word	0x080035c1
 8003214:	080035c1 	.word	0x080035c1
 8003218:	080035c1 	.word	0x080035c1
 800321c:	080033db 	.word	0x080033db
 8003220:	080035c1 	.word	0x080035c1
 8003224:	080035c1 	.word	0x080035c1
 8003228:	080035c1 	.word	0x080035c1
 800322c:	080035c1 	.word	0x080035c1
 8003230:	080033fb 	.word	0x080033fb
 8003234:	080035c1 	.word	0x080035c1
 8003238:	0800341b 	.word	0x0800341b
 800323c:	080033fb 	.word	0x080033fb
 8003240:	0800347d 	.word	0x0800347d
 8003244:	080035c1 	.word	0x080035c1
 8003248:	080035c1 	.word	0x080035c1
 800324c:	080035c1 	.word	0x080035c1
 8003250:	080035c1 	.word	0x080035c1
 8003254:	080035c1 	.word	0x080035c1
 8003258:	080035c1 	.word	0x080035c1
 800325c:	080035c1 	.word	0x080035c1
 8003260:	08003405 	.word	0x08003405
 8003264:	080035c1 	.word	0x080035c1
 8003268:	080035c1 	.word	0x080035c1
 800326c:	080035c1 	.word	0x080035c1
 8003270:	08003405 	.word	0x08003405
 8003274:	080035c1 	.word	0x080035c1
 8003278:	080035c1 	.word	0x080035c1
 800327c:	08003473 	.word	0x08003473
 8003280:	080035c1 	.word	0x080035c1
 8003284:	080035c1 	.word	0x080035c1
 8003288:	080035c1 	.word	0x080035c1
 800328c:	080035c1 	.word	0x080035c1
 8003290:	080035c1 	.word	0x080035c1
 8003294:	080035c1 	.word	0x080035c1
 8003298:	080035c1 	.word	0x080035c1
 800329c:	08003493 	.word	0x08003493
 80032a0:	0800349d 	.word	0x0800349d
        init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
        break;
#endif

    case 0x1511:                // Unknown from Levy
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 80032a4:	4b1f      	ldr	r3, [pc, #124]	; (8003324 <tft_init+0x3a0>)
 80032a6:	2203      	movs	r2, #3
 80032a8:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61511_regValues[]  = {
			0xB0, 1, 0x00,       //Command Access Protect
        };
        table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 80032aa:	4b1f      	ldr	r3, [pc, #124]	; (8003328 <tft_init+0x3a4>)
 80032ac:	61fb      	str	r3, [r7, #28]
 80032ae:	2303      	movs	r3, #3
 80032b0:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80032b2:	4b1e      	ldr	r3, [pc, #120]	; (800332c <tft_init+0x3a8>)
 80032b4:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80032bc:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80032be:	4b1c      	ldr	r3, [pc, #112]	; (8003330 <tft_init+0x3ac>)
 80032c0:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80032c8:	801a      	strh	r2, [r3, #0]
        break;
 80032ca:	e17f      	b.n	80035cc <tft_init+0x648>

    case 0x1520:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80032cc:	4b15      	ldr	r3, [pc, #84]	; (8003324 <tft_init+0x3a0>)
 80032ce:	f240 4213 	movw	r2, #1043	; 0x413
 80032d2:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61520_regValues[]  = {
            0xB0, 1, 0x00,      //Command Access Protect
            0xC0, 1, 0x0A,      //DM=1, BGR=1
        };
        table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 80032d4:	4b17      	ldr	r3, [pc, #92]	; (8003334 <tft_init+0x3b0>)
 80032d6:	61fb      	str	r3, [r7, #28]
 80032d8:	2306      	movs	r3, #6
 80032da:	837b      	strh	r3, [r7, #26]
        break;
 80032dc:	e176      	b.n	80035cc <tft_init+0x648>

	case 0x1526:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80032de:	4b11      	ldr	r3, [pc, #68]	; (8003324 <tft_init+0x3a0>)
 80032e0:	f240 4213 	movw	r2, #1043	; 0x413
 80032e4:	801a      	strh	r2, [r3, #0]
            0xB0, 1, 0x03,      //Command Access
            0xE2, 1, 0x3F,      //Command Write Access
            0xC0, 1, 0x22,      //REV=0, BGR=1, SS=0
            0xE2, 1, 0x00,      //Command Write Protect
        };
        table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 80032e6:	4b14      	ldr	r3, [pc, #80]	; (8003338 <tft_init+0x3b4>)
 80032e8:	61fb      	str	r3, [r7, #28]
 80032ea:	230c      	movs	r3, #12
 80032ec:	837b      	strh	r3, [r7, #26]
        break;
 80032ee:	e16d      	b.n	80035cc <tft_init+0x648>
        init_table16(LGDP4535_regValues, sizeof(LGDP4535_regValues));
        break;
#endif

    case 0x5310:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | INVERT_RGB | READ_24BITS;
 80032f0:	4b0c      	ldr	r3, [pc, #48]	; (8003324 <tft_init+0x3a0>)
 80032f2:	f640 6213 	movw	r2, #3603	; 0xe13
 80032f6:	801a      	strh	r2, [r3, #0]
        static const uint8_t NT35310_regValues[]  = {        //
            TFTLCD_DELAY8, 10,    //just some dummy
        };
        table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 80032f8:	4b10      	ldr	r3, [pc, #64]	; (800333c <tft_init+0x3b8>)
 80032fa:	61fb      	str	r3, [r7, #28]
 80032fc:	2302      	movs	r3, #2
 80032fe:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8003300:	4b0a      	ldr	r3, [pc, #40]	; (800332c <tft_init+0x3a8>)
 8003302:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800330a:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800330c:	4b08      	ldr	r3, [pc, #32]	; (8003330 <tft_init+0x3ac>)
 800330e:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003316:	801a      	strh	r2, [r3, #0]
        break;
 8003318:	e158      	b.n	80035cc <tft_init+0x648>
 800331a:	bf00      	nop
 800331c:	200054ea 	.word	0x200054ea
 8003320:	200054e8 	.word	0x200054e8
 8003324:	200054da 	.word	0x200054da
 8003328:	0800c864 	.word	0x0800c864
 800332c:	08001eb1 	.word	0x08001eb1
 8003330:	08001e99 	.word	0x08001e99
 8003334:	0800c868 	.word	0x0800c868
 8003338:	0800c870 	.word	0x0800c870
 800333c:	0800c87c 	.word	0x0800c87c
        init_table16(ST7781_regValues, sizeof(ST7781_regValues));
        break;
#endif

    case 0x7789:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8003340:	4b8d      	ldr	r3, [pc, #564]	; (8003578 <tft_init+0x5f4>)
 8003342:	f240 4213 	movw	r2, #1043	; 0x413
 8003346:	801a      	strh	r2, [r3, #0]
            (0x55), 1, 0x90,    //WRCACE  [00]
            (0xD0), 2, 0xA4, 0xA1,      //PWCTRL1: Power Control 1 [A4 A1]
            (0xE0), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x2A, 0x3C, 0x55, 0x4B, 0x08, 0x16, 0x14, 0x19, 0x20,     //PVGAMCTRL: Positive Voltage Gamma control
            (0xE1), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x29, 0x36, 0x54, 0x4B, 0x0D, 0x16, 0x14, 0x21, 0x20,     //NVGAMCTRL: Negative Voltage Gamma control
        };
        table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 8003348:	4b8c      	ldr	r3, [pc, #560]	; (800357c <tft_init+0x5f8>)
 800334a:	61fb      	str	r3, [r7, #28]
 800334c:	2341      	movs	r3, #65	; 0x41
 800334e:	837b      	strh	r3, [r7, #26]
        break;
 8003350:	e13c      	b.n	80035cc <tft_init+0x648>

    case 0x8031:      //Unknown BangGood thanks PrinceCharles
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8003352:	4b89      	ldr	r3, [pc, #548]	; (8003578 <tft_init+0x5f4>)
 8003354:	f241 4213 	movw	r2, #5139	; 0x1413
 8003358:	801a      	strh	r2, [r3, #0]
        static const uint8_t FK8031_regValues[]  = {
            // 0xF2:8.2 = SM, 0xF2:8.0 = REV. invertDisplay(), vertScroll() do not work
            0xF2,11, 0x16, 0x16, 0x03, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x16, 0x16, // f.k. 0xF2:8.2 SM=1
            0xFD, 3, 0x11, 0x02, 0x35,     //f.k 0xFD:1.1 creates contiguous scan lins
        };
        table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 800335a:	4b89      	ldr	r3, [pc, #548]	; (8003580 <tft_init+0x5fc>)
 800335c:	61fb      	str	r3, [r7, #28]
 800335e:	2312      	movs	r3, #18
 8003360:	837b      	strh	r3, [r7, #26]
        break;
 8003362:	e133      	b.n	80035cc <tft_init+0x648>
        //        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
        break;
#endif

    case 0x8357:                //BIG CHANGE: HX8357-B is now 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 8003364:	4b84      	ldr	r3, [pc, #528]	; (8003578 <tft_init+0x5f4>)
 8003366:	f241 4203 	movw	r2, #5123	; 0x1403
 800336a:	801a      	strh	r2, [r3, #0]
        goto common_8357;
 800336c:	e003      	b.n	8003376 <tft_init+0x3f2>
    case 0x9090:                //BIG CHANGE: HX8357-D was 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 800336e:	4b82      	ldr	r3, [pc, #520]	; (8003578 <tft_init+0x5f4>)
 8003370:	f241 4213 	movw	r2, #5139	; 0x1413
 8003374:	801a      	strh	r2, [r3, #0]
      common_8357:
	  	dummy=1;
 8003376:	2301      	movs	r3, #1
 8003378:	617b      	str	r3, [r7, #20]
        static const uint8_t HX8357C_regValues[]  = {
            TFTLCD_DELAY8, 1,  //dummy table
        };
        table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 800337a:	4b82      	ldr	r3, [pc, #520]	; (8003584 <tft_init+0x600>)
 800337c:	61fb      	str	r3, [r7, #28]
 800337e:	2302      	movs	r3, #2
 8003380:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8003382:	4b81      	ldr	r3, [pc, #516]	; (8003588 <tft_init+0x604>)
 8003384:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800338c:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800338e:	4b7f      	ldr	r3, [pc, #508]	; (800358c <tft_init+0x608>)
 8003390:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003398:	801a      	strh	r2, [r3, #0]
        break;
 800339a:	e117      	b.n	80035cc <tft_init+0x648>

    case 0x0099:                //HX8357-D matches datasheet
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 800339c:	4b76      	ldr	r3, [pc, #472]	; (8003578 <tft_init+0x5f4>)
 800339e:	f241 4213 	movw	r2, #5139	; 0x1413
 80033a2:	801a      	strh	r2, [r3, #0]
#ifdef SUPPORT_8357D_GAMMA
            // HX8357D_SETGAMMA [0B 0C 11 1D 25 37 43 4B 4E 47 41 39 35 31 2E 21 1C 1D 1D 26 31 44 4E 56 44 3F 39 33 31 2E 28 1D E0 01]
            (0xE0),34, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x00, 0x01,
#endif
        };
        table8_ads = HX8357_99_regValues, table_size = sizeof(HX8357_99_regValues);
 80033a4:	4b7a      	ldr	r3, [pc, #488]	; (8003590 <tft_init+0x60c>)
 80033a6:	61fb      	str	r3, [r7, #28]
 80033a8:	231d      	movs	r3, #29
 80033aa:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80033ac:	4b76      	ldr	r3, [pc, #472]	; (8003588 <tft_init+0x604>)
 80033ae:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80033b6:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80033b8:	4b74      	ldr	r3, [pc, #464]	; (800358c <tft_init+0x608>)
 80033ba:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80033c2:	801a      	strh	r2, [r3, #0]
        break;
 80033c4:	e102      	b.n	80035cc <tft_init+0x648>
        *p16 = 176;
        break;
#endif

    case 0x0001:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 80033c6:	4b6c      	ldr	r3, [pc, #432]	; (8003578 <tft_init+0x5f4>)
 80033c8:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 80033cc:	801a      	strh	r2, [r3, #0]
        goto common_9320;
 80033ce:	e008      	b.n	80033e2 <tft_init+0x45e>
    case 0x5408:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR; //Red 2.4" thanks jorgenv, Ardlab_Gent
 80033d0:	4b69      	ldr	r3, [pc, #420]	; (8003578 <tft_init+0x5f4>)
 80033d2:	f241 0204 	movw	r2, #4100	; 0x1004
 80033d6:	801a      	strh	r2, [r3, #0]
//        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS; //Blue 2.8" might be different
        goto common_9320;
 80033d8:	e003      	b.n	80033e2 <tft_init+0x45e>
    case 0x1505:                //R61505 thanks Ravi_kanchan2004. R61505V, R61505W different
    case 0x9320:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR;
 80033da:	4b67      	ldr	r3, [pc, #412]	; (8003578 <tft_init+0x5f4>)
 80033dc:	f241 0204 	movw	r2, #4100	; 0x1004
 80033e0:	801a      	strh	r2, [r3, #0]
      common_9320:
	    dummy=1;
 80033e2:	2301      	movs	r3, #1
 80033e4:	617b      	str	r3, [r7, #20]
            0x0098, 0x0000,
            //-----Display on-----------------------
            0x0007, 0x0173,
            TFTLCD_DELAY, 50,
        };
        init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 80033e6:	21d8      	movs	r1, #216	; 0xd8
 80033e8:	486a      	ldr	r0, [pc, #424]	; (8003594 <tft_init+0x610>)
 80033ea:	f7ff fb3e 	bl	8002a6a <init_table16>
        break;
 80033ee:	e0ed      	b.n	80035cc <tft_init+0x648>
    case 0x6809:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 80033f0:	4b61      	ldr	r3, [pc, #388]	; (8003578 <tft_init+0x5f4>)
 80033f2:	f241 1202 	movw	r2, #4354	; 0x1102
 80033f6:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 80033f8:	e008      	b.n	800340c <tft_init+0x488>
    case 0x9328:
    case 0x9325:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 80033fa:	4b5f      	ldr	r3, [pc, #380]	; (8003578 <tft_init+0x5f4>)
 80033fc:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8003400:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8003402:	e003      	b.n	800340c <tft_init+0x488>
    case 0x9331:
    case 0x9335:
        _lcd_capable = 0 | REV_SCREEN;
 8003404:	4b5c      	ldr	r3, [pc, #368]	; (8003578 <tft_init+0x5f4>)
 8003406:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800340a:	801a      	strh	r2, [r3, #0]
      common_93x5:
	    dummy=1;
 800340c:	2301      	movs	r3, #1
 800340e:	617b      	str	r3, [r7, #20]
            //-------------- Panel Control -------------------//
            0x0090, 0x0010,
            0x0092, 0x0000,
            0x0007, 0x0133,     // 262K color and display ON
        };
        init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 8003410:	21cc      	movs	r1, #204	; 0xcc
 8003412:	4861      	ldr	r0, [pc, #388]	; (8003598 <tft_init+0x614>)
 8003414:	f7ff fb29 	bl	8002a6a <init_table16>
        break;
 8003418:	e0d8      	b.n	80035cc <tft_init+0x648>
        *p16 = 240;
        break;
#endif

    case 0x9327:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 800341a:	4b57      	ldr	r3, [pc, #348]	; (8003578 <tft_init+0x5f4>)
 800341c:	f240 4203 	movw	r2, #1027	; 0x403
 8003420:	801a      	strh	r2, [r3, #0]
            //            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0xCA, 1, 0x00,      //DGC LUT ???
            0xEA, 1, 0x80,      //3-Gamma Function Enable
            //                     0xB0, 1, 0x03,      //Enable Protect
        };
        table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 8003422:	4b5e      	ldr	r3, [pc, #376]	; (800359c <tft_init+0x618>)
 8003424:	61fb      	str	r3, [r7, #28]
 8003426:	231e      	movs	r3, #30
 8003428:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800342a:	4b57      	ldr	r3, [pc, #348]	; (8003588 <tft_init+0x604>)
 800342c:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003434:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8003436:	4b55      	ldr	r3, [pc, #340]	; (800358c <tft_init+0x608>)
 8003438:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	22f0      	movs	r2, #240	; 0xf0
 800343e:	801a      	strh	r2, [r3, #0]
        break;
 8003440:	e0c4      	b.n	80035cc <tft_init+0x648>
    case 0x1602:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not readGRAM
 8003442:	4b4d      	ldr	r3, [pc, #308]	; (8003578 <tft_init+0x5f4>)
 8003444:	f240 4203 	movw	r2, #1027	; 0x403
 8003448:	801a      	strh	r2, [r3, #0]
        static const uint8_t XX1602_regValues[]  = {
            0xB8, 1, 0x01,      //GS [00]
            0xC0, 1, 0x0E,      //??Power [0A]
        };
        table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 800344a:	4b55      	ldr	r3, [pc, #340]	; (80035a0 <tft_init+0x61c>)
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	2306      	movs	r3, #6
 8003450:	837b      	strh	r3, [r7, #26]
        break;
 8003452:	e0bb      	b.n	80035cc <tft_init+0x648>

    case 0x2053:    //weird from BangGood
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN | READ_BGR;
 8003454:	4b48      	ldr	r3, [pc, #288]	; (8003578 <tft_init+0x5f4>)
 8003456:	f241 4217 	movw	r2, #5143	; 0x1417
 800345a:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 800345c:	e012      	b.n	8003484 <tft_init+0x500>
    case 0xAC11:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN; //thanks viliam
 800345e:	4b46      	ldr	r3, [pc, #280]	; (8003578 <tft_init+0x5f4>)
 8003460:	f241 4213 	movw	r2, #5139	; 0x1413
 8003464:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8003466:	e00d      	b.n	8003484 <tft_init+0x500>
    case 0x9302:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8003468:	4b43      	ldr	r3, [pc, #268]	; (8003578 <tft_init+0x5f4>)
 800346a:	f240 4203 	movw	r2, #1027	; 0x403
 800346e:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8003470:	e008      	b.n	8003484 <tft_init+0x500>
    case 0x9338:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8003472:	4b41      	ldr	r3, [pc, #260]	; (8003578 <tft_init+0x5f4>)
 8003474:	f240 4213 	movw	r2, #1043	; 0x413
 8003478:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 800347a:	e003      	b.n	8003484 <tft_init+0x500>
    case 0x9329:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | REV_SCREEN;
 800347c:	4b3e      	ldr	r3, [pc, #248]	; (8003578 <tft_init+0x5f4>)
 800347e:	f241 6203 	movw	r2, #5635	; 0x1603
 8003482:	801a      	strh	r2, [r3, #0]
	  common_9329:
	    dummy=1;
 8003484:	2301      	movs	r3, #1
 8003486:	617b      	str	r3, [r7, #20]
//            0xF6, 3, 0x01, 0x01, 0x00,  //Interface Control needs EXTC=1 MX_EOR=1, TM=0, RIM=0
//            0xB6, 3, 0x0A, 0x82, 0x27,  //Display Function [0A 82 27]
//            0xB7, 1, 0x06,      //Entry Mode Set [06]
            0x36, 1, 0x00,      //Memory Access [00] pointless but stops an empty array
        };
        table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 8003488:	4b46      	ldr	r3, [pc, #280]	; (80035a4 <tft_init+0x620>)
 800348a:	61fb      	str	r3, [r7, #28]
 800348c:	2303      	movs	r3, #3
 800348e:	837b      	strh	r3, [r7, #26]
        break;
 8003490:	e09c      	b.n	80035cc <tft_init+0x648>

    case 0x9340:                //ILI9340 thanks Ravi_kanchan2004.
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8003492:	4b39      	ldr	r3, [pc, #228]	; (8003578 <tft_init+0x5f4>)
 8003494:	f241 4213 	movw	r2, #5139	; 0x1413
 8003498:	801a      	strh	r2, [r3, #0]
        goto common_9341;
 800349a:	bf00      	nop
    case 0x9341:
      common_9341:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800349c:	4b36      	ldr	r3, [pc, #216]	; (8003578 <tft_init+0x5f4>)
 800349e:	f240 4213 	movw	r2, #1043	; 0x413
 80034a2:	801a      	strh	r2, [r3, #0]
            0xC7, 1, 0xC0,      //VCOM 2 [C0]
            0x36, 1, 0x88,      //Memory Access [00]
            0xB1, 2, 0x00, 0x1B,        //Frame Control [00 1B]
            0xB7, 1, 0x07,      //Entry Mode [00]
        };
        table8_ads = ILI9341_regValues_2_4, table_size = sizeof(ILI9341_regValues_2_4);   //
 80034a4:	4b40      	ldr	r3, [pc, #256]	; (80035a8 <tft_init+0x624>)
 80034a6:	61fb      	str	r3, [r7, #28]
 80034a8:	2365      	movs	r3, #101	; 0x65
 80034aa:	837b      	strh	r3, [r7, #26]
        break;
 80034ac:	e08e      	b.n	80035cc <tft_init+0x648>
        p16 = (int16_t *) & width;
        *p16 = 320;
        break;
#endif
    case 0x1581:                        //no BGR in MADCTL.  set BGR in Panel Control
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 80034ae:	4b32      	ldr	r3, [pc, #200]	; (8003578 <tft_init+0x5f4>)
 80034b0:	f240 4213 	movw	r2, #1043	; 0x413
 80034b4:	801a      	strh	r2, [r3, #0]
		goto common_9481;
 80034b6:	e003      	b.n	80034c0 <tft_init+0x53c>
    case 0x9481:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 80034b8:	4b2f      	ldr	r3, [pc, #188]	; (8003578 <tft_init+0x5f4>)
 80034ba:	f240 4207 	movw	r2, #1031	; 0x407
 80034be:	801a      	strh	r2, [r3, #0]
	  common_9481:
	    dummy=1;
 80034c0:	2301      	movs	r3, #1
 80034c2:	617b      	str	r3, [r7, #20]
            0x0C, 2, 0x00, 0x55, //RDCOLMOD
			0xB4, 1, 0x00,      //SETDISPLAY
//			0xB3, 4, 0x00, 0x01, 0x06, 0x01,  //SETGRAM simple example
			0xB3, 4, 0x00, 0x01, 0x06, 0x30,  //jpegs example
        };
        table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 80034c4:	4b39      	ldr	r3, [pc, #228]	; (80035ac <tft_init+0x628>)
 80034c6:	61fb      	str	r3, [r7, #28]
 80034c8:	2345      	movs	r3, #69	; 0x45
 80034ca:	837b      	strh	r3, [r7, #26]
//        table8_ads = ILI9481_CPT29_regValues, table_size = sizeof(ILI9481_CPT29_regValues);
//        table8_ads = ILI9481_PVI35_regValues, table_size = sizeof(ILI9481_PVI35_regValues);
//        table8_ads = ILI9481_AUO317_regValues, table_size = sizeof(ILI9481_AUO317_regValues);
//        table8_ads = ILI9481_CMO35_regValues, table_size = sizeof(ILI9481_CMO35_regValues);
//        table8_ads = ILI9481_RGB_regValues, table_size = sizeof(ILI9481_RGB_regValues);
        p16 = (int16_t *) & height;
 80034cc:	4b2e      	ldr	r3, [pc, #184]	; (8003588 <tft_init+0x604>)
 80034ce:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80034d6:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80034d8:	4b2c      	ldr	r3, [pc, #176]	; (800358c <tft_init+0x608>)
 80034da:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80034e2:	801a      	strh	r2, [r3, #0]
        break;
 80034e4:	e072      	b.n	80035cc <tft_init+0x648>
    case 0x9486:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 80034e6:	4b24      	ldr	r3, [pc, #144]	; (8003578 <tft_init+0x5f4>)
 80034e8:	f240 4203 	movw	r2, #1027	; 0x403
 80034ec:	801a      	strh	r2, [r3, #0]
            // 4.2 WTK 3.5 Inch Initial Code too white
			0xE0, 15, 0x0F, 0x10, 0x08, 0x05, 0x09, 0x05, 0x37, 0x98, 0x26, 0x07, 0x0F, 0x02, 0x09, 0x07, 0x00,
			0xE1, 15, 0x0F, 0x38, 0x36, 0x0D, 0x10, 0x08, 0x59, 0x76, 0x48, 0x0A, 0x16, 0x0A, 0x37, 0x2F, 0x00,
#endif
        };
        table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 80034ee:	4b30      	ldr	r3, [pc, #192]	; (80035b0 <tft_init+0x62c>)
 80034f0:	61fb      	str	r3, [r7, #28]
 80034f2:	233b      	movs	r3, #59	; 0x3b
 80034f4:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80034f6:	4b24      	ldr	r3, [pc, #144]	; (8003588 <tft_init+0x604>)
 80034f8:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003500:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8003502:	4b22      	ldr	r3, [pc, #136]	; (800358c <tft_init+0x608>)
 8003504:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800350c:	801a      	strh	r2, [r3, #0]
        break;
 800350e:	e05d      	b.n	80035cc <tft_init+0x648>
    case 0x7796:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;   //thanks to safari1
 8003510:	4b19      	ldr	r3, [pc, #100]	; (8003578 <tft_init+0x5f4>)
 8003512:	f240 4203 	movw	r2, #1027	; 0x403
 8003516:	801a      	strh	r2, [r3, #0]
        goto common_9488;
 8003518:	e003      	b.n	8003522 <tft_init+0x59e>
    case 0x9487:                //with thanks to Charlyf
    case 0x9488:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800351a:	4b17      	ldr	r3, [pc, #92]	; (8003578 <tft_init+0x5f4>)
 800351c:	f240 4213 	movw	r2, #1043	; 0x413
 8003520:	801a      	strh	r2, [r3, #0]
      common_9488:
	    dummy=1;
 8003522:	2301      	movs	r3, #1
 8003524:	617b      	str	r3, [r7, #20]
            0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B] .kbv NL=480
            0xB7, 1, 0xC6,      //Entry Mode      [06]
            0x3A, 1, 0x55,      //Interlace Pixel Format [XX]
            0xF7, 4, 0xA9, 0x51, 0x2C, 0x82,    //Adjustment Control 3 [A9 51 2C 82]
        };
        table8_ads = ILI9488_regValues_max, table_size = sizeof(ILI9488_regValues_max);
 8003526:	4b23      	ldr	r3, [pc, #140]	; (80035b4 <tft_init+0x630>)
 8003528:	61fb      	str	r3, [r7, #28]
 800352a:	232b      	movs	r3, #43	; 0x2b
 800352c:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800352e:	4b16      	ldr	r3, [pc, #88]	; (8003588 <tft_init+0x604>)
 8003530:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003538:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800353a:	4b14      	ldr	r3, [pc, #80]	; (800358c <tft_init+0x608>)
 800353c:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003544:	801a      	strh	r2, [r3, #0]
        break;
 8003546:	e041      	b.n	80035cc <tft_init+0x648>
    case 0xB505:                //R61505V
    case 0xC505:                //R61505W
        _lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 8003548:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <tft_init+0x5f4>)
 800354a:	f241 0208 	movw	r2, #4104	; 0x1008
 800354e:	801a      	strh	r2, [r3, #0]
            0x0092, 0x0100,
            0x0093, 0x0701,
            TFTLCD_DELAY, 80,
            0x0007, 0x0100,     //BASEE=1--Display On
        };
        init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 8003550:	21b0      	movs	r1, #176	; 0xb0
 8003552:	4819      	ldr	r0, [pc, #100]	; (80035b8 <tft_init+0x634>)
 8003554:	f7ff fa89 	bl	8002a6a <init_table16>
        break;
 8003558:	e038      	b.n	80035cc <tft_init+0x648>

#if defined(SUPPORT_B509_7793)
    case 0x7793:
    case 0xB509:
        _lcd_capable = REV_SCREEN;
 800355a:	4b07      	ldr	r3, [pc, #28]	; (8003578 <tft_init+0x5f4>)
 800355c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003560:	801a      	strh	r2, [r3, #0]
            TFTLCD_DELAY, 50,

            0x0200, 0x0000,
            0x0201, 0x0000,
        };
        init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 8003562:	21c0      	movs	r1, #192	; 0xc0
 8003564:	4815      	ldr	r0, [pc, #84]	; (80035bc <tft_init+0x638>)
 8003566:	f7ff fa80 	bl	8002a6a <init_table16>
        p16 = (int16_t *) & height;
 800356a:	4b07      	ldr	r3, [pc, #28]	; (8003588 <tft_init+0x604>)
 800356c:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003574:	801a      	strh	r2, [r3, #0]
        break;
 8003576:	e029      	b.n	80035cc <tft_init+0x648>
 8003578:	200054da 	.word	0x200054da
 800357c:	0800c880 	.word	0x0800c880
 8003580:	0800c8c4 	.word	0x0800c8c4
 8003584:	0800c8d8 	.word	0x0800c8d8
 8003588:	08001eb1 	.word	0x08001eb1
 800358c:	08001e99 	.word	0x08001e99
 8003590:	0800c8dc 	.word	0x0800c8dc
 8003594:	0800c8fc 	.word	0x0800c8fc
 8003598:	0800c9d4 	.word	0x0800c9d4
 800359c:	0800caa0 	.word	0x0800caa0
 80035a0:	0800cac0 	.word	0x0800cac0
 80035a4:	0800cac8 	.word	0x0800cac8
 80035a8:	0800cacc 	.word	0x0800cacc
 80035ac:	0800cb34 	.word	0x0800cb34
 80035b0:	0800cb7c 	.word	0x0800cb7c
 80035b4:	0800cbb8 	.word	0x0800cbb8
 80035b8:	0800cbe4 	.word	0x0800cbe4
 80035bc:	0800cc94 	.word	0x0800cc94
        p16 = (int16_t *) & width;
        *p16 = 854;
        break;
#endif
    default:
        p16 = (int16_t *) & width;
 80035c0:	4b2c      	ldr	r3, [pc, #176]	; (8003674 <tft_init+0x6f0>)
 80035c2:	613b      	str	r3, [r7, #16]
        *p16 = 0;       //error value for width
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	2200      	movs	r2, #0
 80035c8:	801a      	strh	r2, [r3, #0]
        break;
 80035ca:	bf00      	nop
    }
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 80035cc:	4b2a      	ldr	r3, [pc, #168]	; (8003678 <tft_init+0x6f4>)
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	bf14      	ite	ne
 80035d8:	2301      	movne	r3, #1
 80035da:	2300      	moveq	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	b29a      	uxth	r2, r3
 80035e0:	4b26      	ldr	r3, [pc, #152]	; (800367c <tft_init+0x6f8>)
 80035e2:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00d      	beq.n	8003606 <tft_init+0x682>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 80035ea:	2109      	movs	r1, #9
 80035ec:	4824      	ldr	r0, [pc, #144]	; (8003680 <tft_init+0x6fc>)
 80035ee:	f7ff f9e3 	bl	80029b8 <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 80035f2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80035f6:	4619      	mov	r1, r3
 80035f8:	69f8      	ldr	r0, [r7, #28]
 80035fa:	f7ff f9dd 	bl	80029b8 <init_table>
		init_table(&wake_on, sizeof(wake_on));
 80035fe:	2106      	movs	r1, #6
 8003600:	4820      	ldr	r0, [pc, #128]	; (8003684 <tft_init+0x700>)
 8003602:	f7ff f9d9 	bl	80029b8 <init_table>
    }
    setRotation(0);             //PORTRAIT
 8003606:	2000      	movs	r0, #0
 8003608:	f000 ff72 	bl	80044f0 <setRotation>
    invertDisplay(false);
 800360c:	2000      	movs	r0, #0
 800360e:	f001 fd5f 	bl	80050d0 <invertDisplay>
#if defined(SUPPORT_9488_555)
    if (_lcd_ID == 0x9488) {
 8003612:	4b1d      	ldr	r3, [pc, #116]	; (8003688 <tft_init+0x704>)
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	f249 4288 	movw	r2, #38024	; 0x9488
 800361a:	4293      	cmp	r3, r2
 800361c:	d125      	bne.n	800366a <tft_init+0x6e6>
		is555 = 0;
 800361e:	4b1b      	ldr	r3, [pc, #108]	; (800368c <tft_init+0x708>)
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]
		drawPixel(0, 0, 0xFFE0);
 8003624:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003628:	2100      	movs	r1, #0
 800362a:	2000      	movs	r0, #0
 800362c:	f001 f9e6 	bl	80049fc <drawPixel>
		if (readPixel(0, 0) == 0xFF1F) {
 8003630:	2100      	movs	r1, #0
 8003632:	2000      	movs	r0, #0
 8003634:	f7fe fcdf 	bl	8001ff6 <readPixel>
 8003638:	4603      	mov	r3, r0
 800363a:	461a      	mov	r2, r3
 800363c:	f64f 731f 	movw	r3, #65311	; 0xff1f
 8003640:	429a      	cmp	r2, r3
 8003642:	d112      	bne.n	800366a <tft_init+0x6e6>
			uint8_t pixfmt = 0x06;
 8003644:	2306      	movs	r3, #6
 8003646:	73fb      	strb	r3, [r7, #15]
			pushCommand(0x3A, &pixfmt, 1);
 8003648:	f107 030f 	add.w	r3, r7, #15
 800364c:	2201      	movs	r2, #1
 800364e:	4619      	mov	r1, r3
 8003650:	203a      	movs	r0, #58	; 0x3a
 8003652:	f7fe fcfa 	bl	800204a <pushCommand>
			_lcd_capable &= ~READ_24BITS;
 8003656:	4b08      	ldr	r3, [pc, #32]	; (8003678 <tft_init+0x6f4>)
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	f023 0310 	bic.w	r3, r3, #16
 800365e:	b29a      	uxth	r2, r3
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <tft_init+0x6f4>)
 8003662:	801a      	strh	r2, [r3, #0]
			is555 = 1;
 8003664:	4b09      	ldr	r3, [pc, #36]	; (800368c <tft_init+0x708>)
 8003666:	2201      	movs	r2, #1
 8003668:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 800366a:	bf00      	nop
 800366c:	3720      	adds	r7, #32
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	08001e99 	.word	0x08001e99
 8003678:	200054da 	.word	0x200054da
 800367c:	200054de 	.word	0x200054de
 8003680:	0800cd54 	.word	0x0800cd54
 8003684:	0800cd60 	.word	0x0800cd60
 8003688:	200054e8 	.word	0x200054e8
 800368c:	200000ce 	.word	0x200000ce

08003690 <readID>:


uint16_t readID(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
    uint16_t ret, ret2;
    uint8_t msb;
    ret = readReg(0,0);           //forces a reset() if called before begin()
 8003696:	2100      	movs	r1, #0
 8003698:	2000      	movs	r0, #0
 800369a:	f7ff fb55 	bl	8002d48 <readReg>
 800369e:	4603      	mov	r3, r0
 80036a0:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 80036a2:	89fb      	ldrh	r3, [r7, #14]
 80036a4:	f245 4208 	movw	r2, #21512	; 0x5408
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d102      	bne.n	80036b2 <readID+0x22>
        return 0x5408;
 80036ac:	f245 4308 	movw	r3, #21512	; 0x5408
 80036b0:	e128      	b.n	8003904 <readID+0x274>
    if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 80036b2:	89fb      	ldrh	r3, [r7, #14]
 80036b4:	f245 4220 	movw	r2, #21536	; 0x5420
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d102      	bne.n	80036c2 <readID+0x32>
        return 0x5420;
 80036bc:	f245 4320 	movw	r3, #21536	; 0x5420
 80036c0:	e120      	b.n	8003904 <readID+0x274>
    if (ret == 0x8989)          //SSD1289 is always 8989
 80036c2:	89fb      	ldrh	r3, [r7, #14]
 80036c4:	f648 1289 	movw	r2, #35209	; 0x8989
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d102      	bne.n	80036d2 <readID+0x42>
        return 0x1289;
 80036cc:	f241 2389 	movw	r3, #4745	; 0x1289
 80036d0:	e118      	b.n	8003904 <readID+0x274>
    ret = readReg(0x67,0);        //HX8347-A
 80036d2:	2100      	movs	r1, #0
 80036d4:	2067      	movs	r0, #103	; 0x67
 80036d6:	f7ff fb37 	bl	8002d48 <readReg>
 80036da:	4603      	mov	r3, r0
 80036dc:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x4747)
 80036de:	89fb      	ldrh	r3, [r7, #14]
 80036e0:	f244 7247 	movw	r2, #18247	; 0x4747
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d102      	bne.n	80036ee <readID+0x5e>
        return 0x8347;
 80036e8:	f248 3347 	movw	r3, #33607	; 0x8347
 80036ec:	e10a      	b.n	8003904 <readID+0x274>
//#if defined(SUPPORT_1963) && USING_16BIT_BUS
    ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 80036ee:	20a1      	movs	r0, #161	; 0xa1
 80036f0:	f7ff fc06 	bl	8002f00 <readReg32>
 80036f4:	4603      	mov	r3, r0
 80036f6:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x6101)
 80036f8:	89fb      	ldrh	r3, [r7, #14]
 80036fa:	f246 1201 	movw	r2, #24833	; 0x6101
 80036fe:	4293      	cmp	r3, r2
 8003700:	d102      	bne.n	8003708 <readID+0x78>
        return 0x1963;
 8003702:	f641 1363 	movw	r3, #6499	; 0x1963
 8003706:	e0fd      	b.n	8003904 <readID+0x274>
    if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 8003708:	89fb      	ldrh	r3, [r7, #14]
 800370a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800370e:	4293      	cmp	r3, r2
 8003710:	d102      	bne.n	8003718 <readID+0x88>
        return 0x1526;          //subsequent begin() enables Command Access
 8003712:	f241 5326 	movw	r3, #5414	; 0x1526
 8003716:	e0f5      	b.n	8003904 <readID+0x274>
//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
//        return 0x1520;          //subsequent begin() enables Command Access
//#endif
	ret = readReg40(0xBF);
 8003718:	20bf      	movs	r0, #191	; 0xbf
 800371a:	f7ff fc0c 	bl	8002f36 <readReg40>
 800371e:	4603      	mov	r3, r0
 8003720:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 8003722:	89fb      	ldrh	r3, [r7, #14]
 8003724:	f248 3257 	movw	r2, #33623	; 0x8357
 8003728:	4293      	cmp	r3, r2
 800372a:	d102      	bne.n	8003732 <readID+0xa2>
        return 0x8357;
 800372c:	f248 3357 	movw	r3, #33623	; 0x8357
 8003730:	e0e8      	b.n	8003904 <readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 8003732:	89fb      	ldrh	r3, [r7, #14]
 8003734:	f249 4281 	movw	r2, #38017	; 0x9481
 8003738:	4293      	cmp	r3, r2
 800373a:	d102      	bne.n	8003742 <readID+0xb2>
        return 0x9481;
 800373c:	f249 4381 	movw	r3, #38017	; 0x9481
 8003740:	e0e0      	b.n	8003904 <readID+0x274>
    if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 8003742:	89fb      	ldrh	r3, [r7, #14]
 8003744:	f241 5211 	movw	r2, #5393	; 0x1511
 8003748:	4293      	cmp	r3, r2
 800374a:	d102      	bne.n	8003752 <readID+0xc2>
        return 0x1511;
 800374c:	f241 5311 	movw	r3, #5393	; 0x1511
 8003750:	e0d8      	b.n	8003904 <readID+0x274>
    if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 8003752:	89fb      	ldrh	r3, [r7, #14]
 8003754:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8003758:	d102      	bne.n	8003760 <readID+0xd0>
        return 0x1520;
 800375a:	f44f 53a9 	mov.w	r3, #5408	; 0x1520
 800375e:	e0d1      	b.n	8003904 <readID+0x274>
    if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 8003760:	89fb      	ldrh	r3, [r7, #14]
 8003762:	f241 5226 	movw	r2, #5414	; 0x1526
 8003766:	4293      	cmp	r3, r2
 8003768:	d102      	bne.n	8003770 <readID+0xe0>
        return 0x1526;
 800376a:	f241 5326 	movw	r3, #5414	; 0x1526
 800376e:	e0c9      	b.n	8003904 <readID+0x274>
    if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 8003770:	89fb      	ldrh	r3, [r7, #14]
 8003772:	f241 5281 	movw	r2, #5505	; 0x1581
 8003776:	4293      	cmp	r3, r2
 8003778:	d102      	bne.n	8003780 <readID+0xf0>
        return 0x1581;
 800377a:	f241 5381 	movw	r3, #5505	; 0x1581
 800377e:	e0c1      	b.n	8003904 <readID+0x274>
    if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 8003780:	89fb      	ldrh	r3, [r7, #14]
 8003782:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003786:	d102      	bne.n	800378e <readID+0xfe>
        return 0x6814;
 8003788:	f646 0314 	movw	r3, #26644	; 0x6814
 800378c:	e0ba      	b.n	8003904 <readID+0x274>
    ret = readReg32(0xD4);
 800378e:	20d4      	movs	r0, #212	; 0xd4
 8003790:	f7ff fbb6 	bl	8002f00 <readReg32>
 8003794:	4603      	mov	r3, r0
 8003796:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 8003798:	89fb      	ldrh	r3, [r7, #14]
 800379a:	f245 3210 	movw	r2, #21264	; 0x5310
 800379e:	4293      	cmp	r3, r2
 80037a0:	d102      	bne.n	80037a8 <readID+0x118>
        return 0x5310;
 80037a2:	f245 3310 	movw	r3, #21264	; 0x5310
 80037a6:	e0ad      	b.n	8003904 <readID+0x274>
    ret = readReg32(0xD7);
 80037a8:	20d7      	movs	r0, #215	; 0xd7
 80037aa:	f7ff fba9 	bl	8002f00 <readReg32>
 80037ae:	4603      	mov	r3, r0
 80037b0:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 80037b2:	89fb      	ldrh	r3, [r7, #14]
 80037b4:	f248 0231 	movw	r2, #32817	; 0x8031
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d102      	bne.n	80037c2 <readID+0x132>
        return 0x8031;
 80037bc:	f248 0331 	movw	r3, #32817	; 0x8031
 80037c0:	e0a0      	b.n	8003904 <readID+0x274>
    ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 80037c2:	20ef      	movs	r0, #239	; 0xef
 80037c4:	f7ff fbb7 	bl	8002f36 <readReg40>
 80037c8:	4603      	mov	r3, r0
 80037ca:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9327)
 80037cc:	89fb      	ldrh	r3, [r7, #14]
 80037ce:	f249 3227 	movw	r2, #37671	; 0x9327
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d102      	bne.n	80037dc <readID+0x14c>
        return 0x9327;
 80037d6:	f249 3327 	movw	r3, #37671	; 0x9327
 80037da:	e093      	b.n	8003904 <readID+0x274>
    ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 80037dc:	20fe      	movs	r0, #254	; 0xfe
 80037de:	f7ff fb8f 	bl	8002f00 <readReg32>
 80037e2:	4603      	mov	r3, r0
 80037e4:	0a1b      	lsrs	r3, r3, #8
 80037e6:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x2053)
 80037e8:	89fb      	ldrh	r3, [r7, #14]
 80037ea:	f242 0253 	movw	r2, #8275	; 0x2053
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d102      	bne.n	80037f8 <readID+0x168>
        return 0x2053;
 80037f2:	f242 0353 	movw	r3, #8275	; 0x2053
 80037f6:	e085      	b.n	8003904 <readID+0x274>
    uint32_t ret32 = readReg32(0x04);
 80037f8:	2004      	movs	r0, #4
 80037fa:	f7ff fb81 	bl	8002f00 <readReg32>
 80037fe:	60b8      	str	r0, [r7, #8]
    msb = ret32 >> 16;
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	0c1b      	lsrs	r3, r3, #16
 8003804:	71fb      	strb	r3, [r7, #7]
    ret = ret32;
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	81fb      	strh	r3, [r7, #14]
//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
    if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 800380a:	79fb      	ldrb	r3, [r7, #7]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d122      	bne.n	8003856 <readID+0x1c6>
 8003810:	89fb      	ldrh	r3, [r7, #14]
 8003812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003816:	d11e      	bne.n	8003856 <readID+0x1c6>
#if 1
        uint8_t cmds[] = {0xFF, 0x83, 0x57};
 8003818:	4a3c      	ldr	r2, [pc, #240]	; (800390c <readID+0x27c>)
 800381a:	1d3b      	adds	r3, r7, #4
 800381c:	6812      	ldr	r2, [r2, #0]
 800381e:	4611      	mov	r1, r2
 8003820:	8019      	strh	r1, [r3, #0]
 8003822:	3302      	adds	r3, #2
 8003824:	0c12      	lsrs	r2, r2, #16
 8003826:	701a      	strb	r2, [r3, #0]
        pushCommand(0xB9, cmds, 3);
 8003828:	1d3b      	adds	r3, r7, #4
 800382a:	2203      	movs	r2, #3
 800382c:	4619      	mov	r1, r3
 800382e:	20b9      	movs	r0, #185	; 0xb9
 8003830:	f7fe fc0b 	bl	800204a <pushCommand>
        msb = readReg(0xD0,0);
 8003834:	2100      	movs	r1, #0
 8003836:	20d0      	movs	r0, #208	; 0xd0
 8003838:	f7ff fa86 	bl	8002d48 <readReg>
 800383c:	4603      	mov	r3, r0
 800383e:	71fb      	strb	r3, [r7, #7]
        if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 8003840:	79fb      	ldrb	r3, [r7, #7]
 8003842:	2b99      	cmp	r3, #153	; 0x99
 8003844:	d101      	bne.n	800384a <readID+0x1ba>
 8003846:	2399      	movs	r3, #153	; 0x99
 8003848:	e05c      	b.n	8003904 <readID+0x274>
        if (msb == 0x90)        //HX8357-C undocumented
 800384a:	79fb      	ldrb	r3, [r7, #7]
 800384c:	2b90      	cmp	r3, #144	; 0x90
 800384e:	d102      	bne.n	8003856 <readID+0x1c6>
#endif
            return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 8003850:	f249 0390 	movw	r3, #37008	; 0x9090
 8003854:	e056      	b.n	8003904 <readID+0x274>
    }
//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
//        return 0x1526;          //subsequent begin() enables Command Access
    if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 8003856:	89fb      	ldrh	r3, [r7, #14]
 8003858:	f241 5226 	movw	r2, #5414	; 0x1526
 800385c:	4293      	cmp	r3, r2
 800385e:	d102      	bne.n	8003866 <readID+0x1d6>
        return 0x1526;          //subsequent begin() enables Command Access
 8003860:	f241 5326 	movw	r3, #5414	; 0x1526
 8003864:	e04e      	b.n	8003904 <readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 8003866:	89fb      	ldrh	r3, [r7, #14]
 8003868:	f648 12f0 	movw	r2, #35312	; 0x89f0
 800386c:	4293      	cmp	r3, r2
 800386e:	d102      	bne.n	8003876 <readID+0x1e6>
        return 0x7735;
 8003870:	f247 7335 	movw	r3, #30517	; 0x7735
 8003874:	e046      	b.n	8003904 <readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 8003876:	89fb      	ldrh	r3, [r7, #14]
 8003878:	f248 5252 	movw	r2, #34130	; 0x8552
 800387c:	4293      	cmp	r3, r2
 800387e:	d102      	bne.n	8003886 <readID+0x1f6>
        return 0x7789;
 8003880:	f247 7389 	movw	r3, #30601	; 0x7789
 8003884:	e03e      	b.n	8003904 <readID+0x274>
    if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 8003886:	89fb      	ldrh	r3, [r7, #14]
 8003888:	f64a 4211 	movw	r2, #44049	; 0xac11
 800388c:	4293      	cmp	r3, r2
 800388e:	d102      	bne.n	8003896 <readID+0x206>
        return 0xAC11;
 8003890:	f64a 4311 	movw	r3, #44049	; 0xac11
 8003894:	e036      	b.n	8003904 <readID+0x274>
    ret32 = readReg32(0xD3);      //[xx 91 63 00]
 8003896:	20d3      	movs	r0, #211	; 0xd3
 8003898:	f7ff fb32 	bl	8002f00 <readReg32>
 800389c:	60b8      	str	r0, [r7, #8]
    ret = ret32 >> 8;
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	0a1b      	lsrs	r3, r3, #8
 80038a2:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9163) return ret;
 80038a4:	89fb      	ldrh	r3, [r7, #14]
 80038a6:	f249 1263 	movw	r2, #37219	; 0x9163
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d101      	bne.n	80038b2 <readID+0x222>
 80038ae:	89fb      	ldrh	r3, [r7, #14]
 80038b0:	e028      	b.n	8003904 <readID+0x274>
    ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 80038b2:	20d3      	movs	r0, #211	; 0xd3
 80038b4:	f7ff fb24 	bl	8002f00 <readReg32>
 80038b8:	4603      	mov	r3, r0
 80038ba:	81fb      	strh	r3, [r7, #14]
    msb = ret >> 8;
 80038bc:	89fb      	ldrh	r3, [r7, #14]
 80038be:	0a1b      	lsrs	r3, r3, #8
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	71fb      	strb	r3, [r7, #7]
    if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 80038c4:	79fb      	ldrb	r3, [r7, #7]
 80038c6:	2b93      	cmp	r3, #147	; 0x93
 80038c8:	d00b      	beq.n	80038e2 <readID+0x252>
 80038ca:	79fb      	ldrb	r3, [r7, #7]
 80038cc:	2b94      	cmp	r3, #148	; 0x94
 80038ce:	d008      	beq.n	80038e2 <readID+0x252>
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	2b98      	cmp	r3, #152	; 0x98
 80038d4:	d005      	beq.n	80038e2 <readID+0x252>
 80038d6:	79fb      	ldrb	r3, [r7, #7]
 80038d8:	2b77      	cmp	r3, #119	; 0x77
 80038da:	d002      	beq.n	80038e2 <readID+0x252>
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	2b16      	cmp	r3, #22
 80038e0:	d101      	bne.n	80038e6 <readID+0x256>
        return ret;             //0x9488, 9486, 9340, 9341, 7796
 80038e2:	89fb      	ldrh	r3, [r7, #14]
 80038e4:	e00e      	b.n	8003904 <readID+0x274>
    if (ret == 0x00D3 || ret == 0xD3D3)
 80038e6:	89fb      	ldrh	r3, [r7, #14]
 80038e8:	2bd3      	cmp	r3, #211	; 0xd3
 80038ea:	d004      	beq.n	80038f6 <readID+0x266>
 80038ec:	89fb      	ldrh	r3, [r7, #14]
 80038ee:	f24d 32d3 	movw	r2, #54227	; 0xd3d3
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d101      	bne.n	80038fa <readID+0x26a>
        return ret;             //16-bit write-only bus
 80038f6:	89fb      	ldrh	r3, [r7, #14]
 80038f8:	e004      	b.n	8003904 <readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
*/
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 80038fa:	2100      	movs	r1, #0
 80038fc:	2000      	movs	r0, #0
 80038fe:	f7ff fa23 	bl	8002d48 <readReg>
 8003902:	4603      	mov	r3, r0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	0800be38 	.word	0x0800be38

08003910 <readGRAM>:


// independent cursor and window registers.   S6D0154, ST7781 increments.  ILI92320/5 do not.
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h)
{
 8003910:	b590      	push	{r4, r7, lr}
 8003912:	b08b      	sub	sp, #44	; 0x2c
 8003914:	af00      	add	r7, sp, #0
 8003916:	60ba      	str	r2, [r7, #8]
 8003918:	461a      	mov	r2, r3
 800391a:	4603      	mov	r3, r0
 800391c:	81fb      	strh	r3, [r7, #14]
 800391e:	460b      	mov	r3, r1
 8003920:	81bb      	strh	r3, [r7, #12]
 8003922:	4613      	mov	r3, r2
 8003924:	80fb      	strh	r3, [r7, #6]
    uint16_t ret, dummy, _MR = _MW;
 8003926:	4b1c      	ldr	r3, [pc, #112]	; (8003998 <readGRAM+0x88>)
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	84bb      	strh	r3, [r7, #36]	; 0x24
    int16_t n = w * h, row = 0, col = 0;
 800392c:	88fa      	ldrh	r2, [r7, #6]
 800392e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003930:	fb12 f303 	smulbb	r3, r2, r3
 8003934:	b29b      	uxth	r3, r3
 8003936:	847b      	strh	r3, [r7, #34]	; 0x22
 8003938:	2300      	movs	r3, #0
 800393a:	843b      	strh	r3, [r7, #32]
 800393c:	2300      	movs	r3, #0
 800393e:	83fb      	strh	r3, [r7, #30]
    uint8_t r, g, b, tmp;
    if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 8003940:	4b16      	ldr	r3, [pc, #88]	; (800399c <readGRAM+0x8c>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d107      	bne.n	8003958 <readGRAM+0x48>
 8003948:	4b15      	ldr	r3, [pc, #84]	; (80039a0 <readGRAM+0x90>)
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <readGRAM+0x48>
        _MR = 0x2E;
 8003954:	232e      	movs	r3, #46	; 0x2e
 8003956:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (_lcd_ID == 0x1602) _MR = 0x2E;
 8003958:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <readGRAM+0x94>)
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	f241 6202 	movw	r2, #5634	; 0x1602
 8003960:	4293      	cmp	r3, r2
 8003962:	d101      	bne.n	8003968 <readGRAM+0x58>
 8003964:	232e      	movs	r3, #46	; 0x2e
 8003966:	84bb      	strh	r3, [r7, #36]	; 0x24
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8003968:	89fa      	ldrh	r2, [r7, #14]
 800396a:	88fb      	ldrh	r3, [r7, #6]
 800396c:	4413      	add	r3, r2
 800396e:	b29b      	uxth	r3, r3
 8003970:	3b01      	subs	r3, #1
 8003972:	b29b      	uxth	r3, r3
 8003974:	b21c      	sxth	r4, r3
 8003976:	89ba      	ldrh	r2, [r7, #12]
 8003978:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800397a:	4413      	add	r3, r2
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	b29b      	uxth	r3, r3
 8003982:	b21b      	sxth	r3, r3
 8003984:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8003988:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800398c:	4622      	mov	r2, r4
 800398e:	f001 f93b 	bl	8004c08 <setAddrWindow>
    while (n > 0) {
 8003992:	f000 bd86 	b.w	80044a2 <readGRAM+0xb92>
 8003996:	bf00      	nop
 8003998:	200054d8 	.word	0x200054d8
 800399c:	200000cd 	.word	0x200000cd
 80039a0:	200054da 	.word	0x200054da
 80039a4:	200054e8 	.word	0x200054e8
        if (!(_lcd_capable & MIPI_DCS_REV1)) {
 80039a8:	4ba0      	ldr	r3, [pc, #640]	; (8003c2c <readGRAM+0x31c>)
 80039aa:	881b      	ldrh	r3, [r3, #0]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d111      	bne.n	80039d8 <readGRAM+0xc8>
            WriteCmdData(_MC, x + col);
 80039b4:	4b9e      	ldr	r3, [pc, #632]	; (8003c30 <readGRAM+0x320>)
 80039b6:	8818      	ldrh	r0, [r3, #0]
 80039b8:	89fa      	ldrh	r2, [r7, #14]
 80039ba:	8bfb      	ldrh	r3, [r7, #30]
 80039bc:	4413      	add	r3, r2
 80039be:	b29b      	uxth	r3, r3
 80039c0:	4619      	mov	r1, r3
 80039c2:	f7fe fb30 	bl	8002026 <WriteCmdData>
            WriteCmdData(_MP, y + row);
 80039c6:	4b9b      	ldr	r3, [pc, #620]	; (8003c34 <readGRAM+0x324>)
 80039c8:	8818      	ldrh	r0, [r3, #0]
 80039ca:	89ba      	ldrh	r2, [r7, #12]
 80039cc:	8c3b      	ldrh	r3, [r7, #32]
 80039ce:	4413      	add	r3, r2
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	4619      	mov	r1, r3
 80039d4:	f7fe fb27 	bl	8002026 <WriteCmdData>
        }
        CS_ACTIVE;
 80039d8:	2101      	movs	r1, #1
 80039da:	4897      	ldr	r0, [pc, #604]	; (8003c38 <readGRAM+0x328>)
 80039dc:	f7fe fa0e 	bl	8001dfc <PIN_LOW>
        WriteCmd(_MR);
 80039e0:	2110      	movs	r1, #16
 80039e2:	4896      	ldr	r0, [pc, #600]	; (8003c3c <readGRAM+0x32c>)
 80039e4:	f7fe fa0a 	bl	8001dfc <PIN_LOW>
 80039e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80039ea:	0a1b      	lsrs	r3, r3, #8
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	777b      	strb	r3, [r7, #29]
 80039f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80039f2:	773b      	strb	r3, [r7, #28]
 80039f4:	4b91      	ldr	r3, [pc, #580]	; (8003c3c <readGRAM+0x32c>)
 80039f6:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80039fa:	619a      	str	r2, [r3, #24]
 80039fc:	4b8e      	ldr	r3, [pc, #568]	; (8003c38 <readGRAM+0x328>)
 80039fe:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8003a02:	619a      	str	r2, [r3, #24]
 8003a04:	4b8e      	ldr	r3, [pc, #568]	; (8003c40 <readGRAM+0x330>)
 8003a06:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003a0a:	619a      	str	r2, [r3, #24]
 8003a0c:	7f7b      	ldrb	r3, [r7, #29]
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8003a14:	7f7b      	ldrb	r3, [r7, #29]
 8003a16:	021b      	lsls	r3, r3, #8
 8003a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	7f7b      	ldrb	r3, [r7, #29]
 8003a20:	025b      	lsls	r3, r3, #9
 8003a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a26:	431a      	orrs	r2, r3
 8003a28:	4b84      	ldr	r3, [pc, #528]	; (8003c3c <readGRAM+0x32c>)
 8003a2a:	619a      	str	r2, [r3, #24]
 8003a2c:	7f7b      	ldrb	r3, [r7, #29]
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8003a34:	7f7b      	ldrb	r3, [r7, #29]
 8003a36:	105b      	asrs	r3, r3, #1
 8003a38:	f003 0310 	and.w	r3, r3, #16
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	7f7b      	ldrb	r3, [r7, #29]
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	431a      	orrs	r2, r3
 8003a48:	7f7b      	ldrb	r3, [r7, #29]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	4b79      	ldr	r3, [pc, #484]	; (8003c38 <readGRAM+0x328>)
 8003a52:	619a      	str	r2, [r3, #24]
 8003a54:	7f7b      	ldrb	r3, [r7, #29]
 8003a56:	019b      	lsls	r3, r3, #6
 8003a58:	4a79      	ldr	r2, [pc, #484]	; (8003c40 <readGRAM+0x330>)
 8003a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5e:	6193      	str	r3, [r2, #24]
 8003a60:	2102      	movs	r1, #2
 8003a62:	4876      	ldr	r0, [pc, #472]	; (8003c3c <readGRAM+0x32c>)
 8003a64:	f7fe f9ca 	bl	8001dfc <PIN_LOW>
 8003a68:	2102      	movs	r1, #2
 8003a6a:	4874      	ldr	r0, [pc, #464]	; (8003c3c <readGRAM+0x32c>)
 8003a6c:	f7fe f9c6 	bl	8001dfc <PIN_LOW>
 8003a70:	2102      	movs	r1, #2
 8003a72:	4872      	ldr	r0, [pc, #456]	; (8003c3c <readGRAM+0x32c>)
 8003a74:	f7fe f9c2 	bl	8001dfc <PIN_LOW>
 8003a78:	2102      	movs	r1, #2
 8003a7a:	4870      	ldr	r0, [pc, #448]	; (8003c3c <readGRAM+0x32c>)
 8003a7c:	f7fe f9ce 	bl	8001e1c <PIN_HIGH>
 8003a80:	2102      	movs	r1, #2
 8003a82:	486e      	ldr	r0, [pc, #440]	; (8003c3c <readGRAM+0x32c>)
 8003a84:	f7fe f9ca 	bl	8001e1c <PIN_HIGH>
 8003a88:	4b6c      	ldr	r3, [pc, #432]	; (8003c3c <readGRAM+0x32c>)
 8003a8a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8003a8e:	619a      	str	r2, [r3, #24]
 8003a90:	4b69      	ldr	r3, [pc, #420]	; (8003c38 <readGRAM+0x328>)
 8003a92:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8003a96:	619a      	str	r2, [r3, #24]
 8003a98:	4b69      	ldr	r3, [pc, #420]	; (8003c40 <readGRAM+0x330>)
 8003a9a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003a9e:	619a      	str	r2, [r3, #24]
 8003aa0:	7f3b      	ldrb	r3, [r7, #28]
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8003aa8:	7f3b      	ldrb	r3, [r7, #28]
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	7f3b      	ldrb	r3, [r7, #28]
 8003ab4:	025b      	lsls	r3, r3, #9
 8003ab6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aba:	431a      	orrs	r2, r3
 8003abc:	4b5f      	ldr	r3, [pc, #380]	; (8003c3c <readGRAM+0x32c>)
 8003abe:	619a      	str	r2, [r3, #24]
 8003ac0:	7f3b      	ldrb	r3, [r7, #28]
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8003ac8:	7f3b      	ldrb	r3, [r7, #28]
 8003aca:	105b      	asrs	r3, r3, #1
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	7f3b      	ldrb	r3, [r7, #28]
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	f003 0320 	and.w	r3, r3, #32
 8003ada:	431a      	orrs	r2, r3
 8003adc:	7f3b      	ldrb	r3, [r7, #28]
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	4b54      	ldr	r3, [pc, #336]	; (8003c38 <readGRAM+0x328>)
 8003ae6:	619a      	str	r2, [r3, #24]
 8003ae8:	7f3b      	ldrb	r3, [r7, #28]
 8003aea:	019b      	lsls	r3, r3, #6
 8003aec:	4a54      	ldr	r2, [pc, #336]	; (8003c40 <readGRAM+0x330>)
 8003aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af2:	6193      	str	r3, [r2, #24]
 8003af4:	2102      	movs	r1, #2
 8003af6:	4851      	ldr	r0, [pc, #324]	; (8003c3c <readGRAM+0x32c>)
 8003af8:	f7fe f980 	bl	8001dfc <PIN_LOW>
 8003afc:	2102      	movs	r1, #2
 8003afe:	484f      	ldr	r0, [pc, #316]	; (8003c3c <readGRAM+0x32c>)
 8003b00:	f7fe f97c 	bl	8001dfc <PIN_LOW>
 8003b04:	2102      	movs	r1, #2
 8003b06:	484d      	ldr	r0, [pc, #308]	; (8003c3c <readGRAM+0x32c>)
 8003b08:	f7fe f978 	bl	8001dfc <PIN_LOW>
 8003b0c:	2102      	movs	r1, #2
 8003b0e:	484b      	ldr	r0, [pc, #300]	; (8003c3c <readGRAM+0x32c>)
 8003b10:	f7fe f984 	bl	8001e1c <PIN_HIGH>
 8003b14:	2102      	movs	r1, #2
 8003b16:	4849      	ldr	r0, [pc, #292]	; (8003c3c <readGRAM+0x32c>)
 8003b18:	f7fe f980 	bl	8001e1c <PIN_HIGH>
 8003b1c:	2110      	movs	r1, #16
 8003b1e:	4847      	ldr	r0, [pc, #284]	; (8003c3c <readGRAM+0x32c>)
 8003b20:	f7fe f97c 	bl	8001e1c <PIN_HIGH>
        setReadDir();
 8003b24:	f7fe faa4 	bl	8002070 <setReadDir>
        if (_lcd_capable & READ_NODUMMY) {
 8003b28:	4b40      	ldr	r3, [pc, #256]	; (8003c2c <readGRAM+0x31c>)
 8003b2a:	881b      	ldrh	r3, [r3, #0]
 8003b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f040 816d 	bne.w	8003e10 <readGRAM+0x500>
            ;
        } else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 8003b36:	4b3d      	ldr	r3, [pc, #244]	; (8003c2c <readGRAM+0x31c>)
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d105      	bne.n	8003b4e <readGRAM+0x23e>
 8003b42:	4b40      	ldr	r3, [pc, #256]	; (8003c44 <readGRAM+0x334>)
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	f241 2289 	movw	r2, #4745	; 0x1289
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d17c      	bne.n	8003c48 <readGRAM+0x338>
            READ_8(r);
 8003b4e:	2101      	movs	r1, #1
 8003b50:	483a      	ldr	r0, [pc, #232]	; (8003c3c <readGRAM+0x32c>)
 8003b52:	f7fe f963 	bl	8001e1c <PIN_HIGH>
 8003b56:	2101      	movs	r1, #1
 8003b58:	4838      	ldr	r0, [pc, #224]	; (8003c3c <readGRAM+0x32c>)
 8003b5a:	f7fe f94f 	bl	8001dfc <PIN_LOW>
 8003b5e:	2101      	movs	r1, #1
 8003b60:	4836      	ldr	r0, [pc, #216]	; (8003c3c <readGRAM+0x32c>)
 8003b62:	f7fe f94b 	bl	8001dfc <PIN_LOW>
 8003b66:	2101      	movs	r1, #1
 8003b68:	4834      	ldr	r0, [pc, #208]	; (8003c3c <readGRAM+0x32c>)
 8003b6a:	f7fe f947 	bl	8001dfc <PIN_LOW>
 8003b6e:	2101      	movs	r1, #1
 8003b70:	4832      	ldr	r0, [pc, #200]	; (8003c3c <readGRAM+0x32c>)
 8003b72:	f7fe f943 	bl	8001dfc <PIN_LOW>
 8003b76:	2101      	movs	r1, #1
 8003b78:	4830      	ldr	r0, [pc, #192]	; (8003c3c <readGRAM+0x32c>)
 8003b7a:	f7fe f93f 	bl	8001dfc <PIN_LOW>
 8003b7e:	2101      	movs	r1, #1
 8003b80:	482e      	ldr	r0, [pc, #184]	; (8003c3c <readGRAM+0x32c>)
 8003b82:	f7fe f93b 	bl	8001dfc <PIN_LOW>
 8003b86:	2101      	movs	r1, #1
 8003b88:	482c      	ldr	r0, [pc, #176]	; (8003c3c <readGRAM+0x32c>)
 8003b8a:	f7fe f937 	bl	8001dfc <PIN_LOW>
 8003b8e:	4b2b      	ldr	r3, [pc, #172]	; (8003c3c <readGRAM+0x32c>)
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	085b      	lsrs	r3, r3, #1
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	4b26      	ldr	r3, [pc, #152]	; (8003c38 <readGRAM+0x328>)
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	091b      	lsrs	r3, r3, #4
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	4313      	orrs	r3, r2
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	4b22      	ldr	r3, [pc, #136]	; (8003c38 <readGRAM+0x328>)
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	f003 0320 	and.w	r3, r3, #32
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	4b1d      	ldr	r3, [pc, #116]	; (8003c38 <readGRAM+0x328>)
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	085b      	lsrs	r3, r3, #1
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	f003 0310 	and.w	r3, r3, #16
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	4b18      	ldr	r3, [pc, #96]	; (8003c38 <readGRAM+0x328>)
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	4313      	orrs	r3, r2
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	4b15      	ldr	r3, [pc, #84]	; (8003c3c <readGRAM+0x32c>)
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	0a1b      	lsrs	r3, r3, #8
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	4b12      	ldr	r3, [pc, #72]	; (8003c40 <readGRAM+0x330>)
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	099b      	lsrs	r3, r3, #6
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	4313      	orrs	r3, r2
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <readGRAM+0x32c>)
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	0a5b      	lsrs	r3, r3, #9
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	4313      	orrs	r3, r2
 8003c18:	75fb      	strb	r3, [r7, #23]
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	4807      	ldr	r0, [pc, #28]	; (8003c3c <readGRAM+0x32c>)
 8003c1e:	f7fe f8fd 	bl	8001e1c <PIN_HIGH>
 8003c22:	2101      	movs	r1, #1
 8003c24:	4805      	ldr	r0, [pc, #20]	; (8003c3c <readGRAM+0x32c>)
 8003c26:	f7fe f8f9 	bl	8001e1c <PIN_HIGH>
 8003c2a:	e0f1      	b.n	8003e10 <readGRAM+0x500>
 8003c2c:	200054da 	.word	0x200054da
 8003c30:	200054e2 	.word	0x200054e2
 8003c34:	200054e0 	.word	0x200054e0
 8003c38:	40020400 	.word	0x40020400
 8003c3c:	40020000 	.word	0x40020000
 8003c40:	40020800 	.word	0x40020800
 8003c44:	200054e8 	.word	0x200054e8
        } else {
            READ_16(dummy);
 8003c48:	2101      	movs	r1, #1
 8003c4a:	48ac      	ldr	r0, [pc, #688]	; (8003efc <readGRAM+0x5ec>)
 8003c4c:	f7fe f8e6 	bl	8001e1c <PIN_HIGH>
 8003c50:	2101      	movs	r1, #1
 8003c52:	48aa      	ldr	r0, [pc, #680]	; (8003efc <readGRAM+0x5ec>)
 8003c54:	f7fe f8d2 	bl	8001dfc <PIN_LOW>
 8003c58:	2101      	movs	r1, #1
 8003c5a:	48a8      	ldr	r0, [pc, #672]	; (8003efc <readGRAM+0x5ec>)
 8003c5c:	f7fe f8ce 	bl	8001dfc <PIN_LOW>
 8003c60:	2101      	movs	r1, #1
 8003c62:	48a6      	ldr	r0, [pc, #664]	; (8003efc <readGRAM+0x5ec>)
 8003c64:	f7fe f8ca 	bl	8001dfc <PIN_LOW>
 8003c68:	2101      	movs	r1, #1
 8003c6a:	48a4      	ldr	r0, [pc, #656]	; (8003efc <readGRAM+0x5ec>)
 8003c6c:	f7fe f8c6 	bl	8001dfc <PIN_LOW>
 8003c70:	2101      	movs	r1, #1
 8003c72:	48a2      	ldr	r0, [pc, #648]	; (8003efc <readGRAM+0x5ec>)
 8003c74:	f7fe f8c2 	bl	8001dfc <PIN_LOW>
 8003c78:	2101      	movs	r1, #1
 8003c7a:	48a0      	ldr	r0, [pc, #640]	; (8003efc <readGRAM+0x5ec>)
 8003c7c:	f7fe f8be 	bl	8001dfc <PIN_LOW>
 8003c80:	2101      	movs	r1, #1
 8003c82:	489e      	ldr	r0, [pc, #632]	; (8003efc <readGRAM+0x5ec>)
 8003c84:	f7fe f8ba 	bl	8001dfc <PIN_LOW>
 8003c88:	4b9c      	ldr	r3, [pc, #624]	; (8003efc <readGRAM+0x5ec>)
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	085b      	lsrs	r3, r3, #1
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	4b9a      	ldr	r3, [pc, #616]	; (8003f00 <readGRAM+0x5f0>)
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	091b      	lsrs	r3, r3, #4
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	4b95      	ldr	r3, [pc, #596]	; (8003f00 <readGRAM+0x5f0>)
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	4b90      	ldr	r3, [pc, #576]	; (8003f00 <readGRAM+0x5f0>)
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	085b      	lsrs	r3, r3, #1
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	4b8c      	ldr	r3, [pc, #560]	; (8003f00 <readGRAM+0x5f0>)
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	4b87      	ldr	r3, [pc, #540]	; (8003efc <readGRAM+0x5ec>)
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	0a1b      	lsrs	r3, r3, #8
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	4313      	orrs	r3, r2
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	4b84      	ldr	r3, [pc, #528]	; (8003f04 <readGRAM+0x5f4>)
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	099b      	lsrs	r3, r3, #6
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	4b7e      	ldr	r3, [pc, #504]	; (8003efc <readGRAM+0x5ec>)
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	0a5b      	lsrs	r3, r3, #9
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	4313      	orrs	r3, r2
 8003d12:	76fb      	strb	r3, [r7, #27]
 8003d14:	2101      	movs	r1, #1
 8003d16:	4879      	ldr	r0, [pc, #484]	; (8003efc <readGRAM+0x5ec>)
 8003d18:	f7fe f880 	bl	8001e1c <PIN_HIGH>
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	4877      	ldr	r0, [pc, #476]	; (8003efc <readGRAM+0x5ec>)
 8003d20:	f7fe f87c 	bl	8001e1c <PIN_HIGH>
 8003d24:	2101      	movs	r1, #1
 8003d26:	4875      	ldr	r0, [pc, #468]	; (8003efc <readGRAM+0x5ec>)
 8003d28:	f7fe f878 	bl	8001e1c <PIN_HIGH>
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	4873      	ldr	r0, [pc, #460]	; (8003efc <readGRAM+0x5ec>)
 8003d30:	f7fe f864 	bl	8001dfc <PIN_LOW>
 8003d34:	2101      	movs	r1, #1
 8003d36:	4871      	ldr	r0, [pc, #452]	; (8003efc <readGRAM+0x5ec>)
 8003d38:	f7fe f860 	bl	8001dfc <PIN_LOW>
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	486f      	ldr	r0, [pc, #444]	; (8003efc <readGRAM+0x5ec>)
 8003d40:	f7fe f85c 	bl	8001dfc <PIN_LOW>
 8003d44:	2101      	movs	r1, #1
 8003d46:	486d      	ldr	r0, [pc, #436]	; (8003efc <readGRAM+0x5ec>)
 8003d48:	f7fe f858 	bl	8001dfc <PIN_LOW>
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	486b      	ldr	r0, [pc, #428]	; (8003efc <readGRAM+0x5ec>)
 8003d50:	f7fe f854 	bl	8001dfc <PIN_LOW>
 8003d54:	2101      	movs	r1, #1
 8003d56:	4869      	ldr	r0, [pc, #420]	; (8003efc <readGRAM+0x5ec>)
 8003d58:	f7fe f850 	bl	8001dfc <PIN_LOW>
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	4867      	ldr	r0, [pc, #412]	; (8003efc <readGRAM+0x5ec>)
 8003d60:	f7fe f84c 	bl	8001dfc <PIN_LOW>
 8003d64:	4b65      	ldr	r3, [pc, #404]	; (8003efc <readGRAM+0x5ec>)
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	085b      	lsrs	r3, r3, #1
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	4b63      	ldr	r3, [pc, #396]	; (8003f00 <readGRAM+0x5f0>)
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	091b      	lsrs	r3, r3, #4
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	4313      	orrs	r3, r2
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	4b5e      	ldr	r3, [pc, #376]	; (8003f00 <readGRAM+0x5f0>)
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	4313      	orrs	r3, r2
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	4b59      	ldr	r3, [pc, #356]	; (8003f00 <readGRAM+0x5f0>)
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	085b      	lsrs	r3, r3, #1
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	f003 0310 	and.w	r3, r3, #16
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	4313      	orrs	r3, r2
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	4b55      	ldr	r3, [pc, #340]	; (8003f00 <readGRAM+0x5f0>)
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	4313      	orrs	r3, r2
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	4b50      	ldr	r3, [pc, #320]	; (8003efc <readGRAM+0x5ec>)
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	0a1b      	lsrs	r3, r3, #8
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	4b4d      	ldr	r3, [pc, #308]	; (8003f04 <readGRAM+0x5f4>)
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	099b      	lsrs	r3, r3, #6
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	4b47      	ldr	r3, [pc, #284]	; (8003efc <readGRAM+0x5ec>)
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	0a5b      	lsrs	r3, r3, #9
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	4313      	orrs	r3, r2
 8003dee:	833b      	strh	r3, [r7, #24]
 8003df0:	2101      	movs	r1, #1
 8003df2:	4842      	ldr	r0, [pc, #264]	; (8003efc <readGRAM+0x5ec>)
 8003df4:	f7fe f812 	bl	8001e1c <PIN_HIGH>
 8003df8:	2101      	movs	r1, #1
 8003dfa:	4840      	ldr	r0, [pc, #256]	; (8003efc <readGRAM+0x5ec>)
 8003dfc:	f7fe f80e 	bl	8001e1c <PIN_HIGH>
 8003e00:	7efb      	ldrb	r3, [r7, #27]
 8003e02:	021b      	lsls	r3, r3, #8
 8003e04:	b21a      	sxth	r2, r3
 8003e06:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	b21b      	sxth	r3, r3
 8003e0e:	833b      	strh	r3, [r7, #24]
        }
		if (_lcd_ID == 0x1511) READ_8(r);   //extra dummy for R61511
 8003e10:	4b3d      	ldr	r3, [pc, #244]	; (8003f08 <readGRAM+0x5f8>)
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	f241 5211 	movw	r2, #5393	; 0x1511
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	f040 830f 	bne.w	800443c <readGRAM+0xb2c>
 8003e1e:	2101      	movs	r1, #1
 8003e20:	4836      	ldr	r0, [pc, #216]	; (8003efc <readGRAM+0x5ec>)
 8003e22:	f7fd fffb 	bl	8001e1c <PIN_HIGH>
 8003e26:	2101      	movs	r1, #1
 8003e28:	4834      	ldr	r0, [pc, #208]	; (8003efc <readGRAM+0x5ec>)
 8003e2a:	f7fd ffe7 	bl	8001dfc <PIN_LOW>
 8003e2e:	2101      	movs	r1, #1
 8003e30:	4832      	ldr	r0, [pc, #200]	; (8003efc <readGRAM+0x5ec>)
 8003e32:	f7fd ffe3 	bl	8001dfc <PIN_LOW>
 8003e36:	2101      	movs	r1, #1
 8003e38:	4830      	ldr	r0, [pc, #192]	; (8003efc <readGRAM+0x5ec>)
 8003e3a:	f7fd ffdf 	bl	8001dfc <PIN_LOW>
 8003e3e:	2101      	movs	r1, #1
 8003e40:	482e      	ldr	r0, [pc, #184]	; (8003efc <readGRAM+0x5ec>)
 8003e42:	f7fd ffdb 	bl	8001dfc <PIN_LOW>
 8003e46:	2101      	movs	r1, #1
 8003e48:	482c      	ldr	r0, [pc, #176]	; (8003efc <readGRAM+0x5ec>)
 8003e4a:	f7fd ffd7 	bl	8001dfc <PIN_LOW>
 8003e4e:	2101      	movs	r1, #1
 8003e50:	482a      	ldr	r0, [pc, #168]	; (8003efc <readGRAM+0x5ec>)
 8003e52:	f7fd ffd3 	bl	8001dfc <PIN_LOW>
 8003e56:	2101      	movs	r1, #1
 8003e58:	4828      	ldr	r0, [pc, #160]	; (8003efc <readGRAM+0x5ec>)
 8003e5a:	f7fd ffcf 	bl	8001dfc <PIN_LOW>
 8003e5e:	4b27      	ldr	r3, [pc, #156]	; (8003efc <readGRAM+0x5ec>)
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	085b      	lsrs	r3, r3, #1
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	4b24      	ldr	r3, [pc, #144]	; (8003f00 <readGRAM+0x5f0>)
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	091b      	lsrs	r3, r3, #4
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	4b20      	ldr	r3, [pc, #128]	; (8003f00 <readGRAM+0x5f0>)
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	f003 0320 	and.w	r3, r3, #32
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	4b1b      	ldr	r3, [pc, #108]	; (8003f00 <readGRAM+0x5f0>)
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	085b      	lsrs	r3, r3, #1
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	f003 0310 	and.w	r3, r3, #16
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	4b16      	ldr	r3, [pc, #88]	; (8003f00 <readGRAM+0x5f0>)
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	4b11      	ldr	r3, [pc, #68]	; (8003efc <readGRAM+0x5ec>)
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	0a1b      	lsrs	r3, r3, #8
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	4b0f      	ldr	r3, [pc, #60]	; (8003f04 <readGRAM+0x5f4>)
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	099b      	lsrs	r3, r3, #6
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	4b08      	ldr	r3, [pc, #32]	; (8003efc <readGRAM+0x5ec>)
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	0a5b      	lsrs	r3, r3, #9
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	75fb      	strb	r3, [r7, #23]
 8003eea:	2101      	movs	r1, #1
 8003eec:	4803      	ldr	r0, [pc, #12]	; (8003efc <readGRAM+0x5ec>)
 8003eee:	f7fd ff95 	bl	8001e1c <PIN_HIGH>
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	4801      	ldr	r0, [pc, #4]	; (8003efc <readGRAM+0x5ec>)
 8003ef6:	f7fd ff91 	bl	8001e1c <PIN_HIGH>
        while (n)
 8003efa:	e29f      	b.n	800443c <readGRAM+0xb2c>
 8003efc:	40020000 	.word	0x40020000
 8003f00:	40020400 	.word	0x40020400
 8003f04:	40020800 	.word	0x40020800
 8003f08:	200054e8 	.word	0x200054e8
        {
            if (_lcd_capable & READ_24BITS)
 8003f0c:	4bab      	ldr	r3, [pc, #684]	; (80041bc <readGRAM+0x8ac>)
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	f003 0310 	and.w	r3, r3, #16
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 816b 	beq.w	80041f0 <readGRAM+0x8e0>
            {
                READ_8(r);
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	48a8      	ldr	r0, [pc, #672]	; (80041c0 <readGRAM+0x8b0>)
 8003f1e:	f7fd ff7d 	bl	8001e1c <PIN_HIGH>
 8003f22:	2101      	movs	r1, #1
 8003f24:	48a6      	ldr	r0, [pc, #664]	; (80041c0 <readGRAM+0x8b0>)
 8003f26:	f7fd ff69 	bl	8001dfc <PIN_LOW>
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	48a4      	ldr	r0, [pc, #656]	; (80041c0 <readGRAM+0x8b0>)
 8003f2e:	f7fd ff65 	bl	8001dfc <PIN_LOW>
 8003f32:	2101      	movs	r1, #1
 8003f34:	48a2      	ldr	r0, [pc, #648]	; (80041c0 <readGRAM+0x8b0>)
 8003f36:	f7fd ff61 	bl	8001dfc <PIN_LOW>
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	48a0      	ldr	r0, [pc, #640]	; (80041c0 <readGRAM+0x8b0>)
 8003f3e:	f7fd ff5d 	bl	8001dfc <PIN_LOW>
 8003f42:	2101      	movs	r1, #1
 8003f44:	489e      	ldr	r0, [pc, #632]	; (80041c0 <readGRAM+0x8b0>)
 8003f46:	f7fd ff59 	bl	8001dfc <PIN_LOW>
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	489c      	ldr	r0, [pc, #624]	; (80041c0 <readGRAM+0x8b0>)
 8003f4e:	f7fd ff55 	bl	8001dfc <PIN_LOW>
 8003f52:	2101      	movs	r1, #1
 8003f54:	489a      	ldr	r0, [pc, #616]	; (80041c0 <readGRAM+0x8b0>)
 8003f56:	f7fd ff51 	bl	8001dfc <PIN_LOW>
 8003f5a:	4b99      	ldr	r3, [pc, #612]	; (80041c0 <readGRAM+0x8b0>)
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	085b      	lsrs	r3, r3, #1
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	4b96      	ldr	r3, [pc, #600]	; (80041c4 <readGRAM+0x8b4>)
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	091b      	lsrs	r3, r3, #4
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	4313      	orrs	r3, r2
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	4b92      	ldr	r3, [pc, #584]	; (80041c4 <readGRAM+0x8b4>)
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	f003 0320 	and.w	r3, r3, #32
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	4b8d      	ldr	r3, [pc, #564]	; (80041c4 <readGRAM+0x8b4>)
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	085b      	lsrs	r3, r3, #1
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f003 0310 	and.w	r3, r3, #16
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	4b88      	ldr	r3, [pc, #544]	; (80041c4 <readGRAM+0x8b4>)
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	4313      	orrs	r3, r2
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	4b83      	ldr	r3, [pc, #524]	; (80041c0 <readGRAM+0x8b0>)
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	0a1b      	lsrs	r3, r3, #8
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	4b81      	ldr	r3, [pc, #516]	; (80041c8 <readGRAM+0x8b8>)
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	099b      	lsrs	r3, r3, #6
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	4b7a      	ldr	r3, [pc, #488]	; (80041c0 <readGRAM+0x8b0>)
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	0a5b      	lsrs	r3, r3, #9
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	75fb      	strb	r3, [r7, #23]
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	4875      	ldr	r0, [pc, #468]	; (80041c0 <readGRAM+0x8b0>)
 8003fea:	f7fd ff17 	bl	8001e1c <PIN_HIGH>
 8003fee:	2101      	movs	r1, #1
 8003ff0:	4873      	ldr	r0, [pc, #460]	; (80041c0 <readGRAM+0x8b0>)
 8003ff2:	f7fd ff13 	bl	8001e1c <PIN_HIGH>
                READ_8(g);
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	4871      	ldr	r0, [pc, #452]	; (80041c0 <readGRAM+0x8b0>)
 8003ffa:	f7fd ff0f 	bl	8001e1c <PIN_HIGH>
 8003ffe:	2101      	movs	r1, #1
 8004000:	486f      	ldr	r0, [pc, #444]	; (80041c0 <readGRAM+0x8b0>)
 8004002:	f7fd fefb 	bl	8001dfc <PIN_LOW>
 8004006:	2101      	movs	r1, #1
 8004008:	486d      	ldr	r0, [pc, #436]	; (80041c0 <readGRAM+0x8b0>)
 800400a:	f7fd fef7 	bl	8001dfc <PIN_LOW>
 800400e:	2101      	movs	r1, #1
 8004010:	486b      	ldr	r0, [pc, #428]	; (80041c0 <readGRAM+0x8b0>)
 8004012:	f7fd fef3 	bl	8001dfc <PIN_LOW>
 8004016:	2101      	movs	r1, #1
 8004018:	4869      	ldr	r0, [pc, #420]	; (80041c0 <readGRAM+0x8b0>)
 800401a:	f7fd feef 	bl	8001dfc <PIN_LOW>
 800401e:	2101      	movs	r1, #1
 8004020:	4867      	ldr	r0, [pc, #412]	; (80041c0 <readGRAM+0x8b0>)
 8004022:	f7fd feeb 	bl	8001dfc <PIN_LOW>
 8004026:	2101      	movs	r1, #1
 8004028:	4865      	ldr	r0, [pc, #404]	; (80041c0 <readGRAM+0x8b0>)
 800402a:	f7fd fee7 	bl	8001dfc <PIN_LOW>
 800402e:	2101      	movs	r1, #1
 8004030:	4863      	ldr	r0, [pc, #396]	; (80041c0 <readGRAM+0x8b0>)
 8004032:	f7fd fee3 	bl	8001dfc <PIN_LOW>
 8004036:	4b62      	ldr	r3, [pc, #392]	; (80041c0 <readGRAM+0x8b0>)
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	085b      	lsrs	r3, r3, #1
 800403c:	b2db      	uxtb	r3, r3
 800403e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004042:	b2da      	uxtb	r2, r3
 8004044:	4b5f      	ldr	r3, [pc, #380]	; (80041c4 <readGRAM+0x8b4>)
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	091b      	lsrs	r3, r3, #4
 800404a:	b2db      	uxtb	r3, r3
 800404c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004050:	b2db      	uxtb	r3, r3
 8004052:	4313      	orrs	r3, r2
 8004054:	b2da      	uxtb	r2, r3
 8004056:	4b5b      	ldr	r3, [pc, #364]	; (80041c4 <readGRAM+0x8b4>)
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	b2db      	uxtb	r3, r3
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	b2db      	uxtb	r3, r3
 8004060:	f003 0320 	and.w	r3, r3, #32
 8004064:	b2db      	uxtb	r3, r3
 8004066:	4313      	orrs	r3, r2
 8004068:	b2da      	uxtb	r2, r3
 800406a:	4b56      	ldr	r3, [pc, #344]	; (80041c4 <readGRAM+0x8b4>)
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	085b      	lsrs	r3, r3, #1
 8004070:	b2db      	uxtb	r3, r3
 8004072:	f003 0310 	and.w	r3, r3, #16
 8004076:	b2db      	uxtb	r3, r3
 8004078:	4313      	orrs	r3, r2
 800407a:	b2da      	uxtb	r2, r3
 800407c:	4b51      	ldr	r3, [pc, #324]	; (80041c4 <readGRAM+0x8b4>)
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	b2db      	uxtb	r3, r3
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	b2db      	uxtb	r3, r3
 8004088:	4313      	orrs	r3, r2
 800408a:	b2da      	uxtb	r2, r3
 800408c:	4b4c      	ldr	r3, [pc, #304]	; (80041c0 <readGRAM+0x8b0>)
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	0a1b      	lsrs	r3, r3, #8
 8004092:	b2db      	uxtb	r3, r3
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	b2db      	uxtb	r3, r3
 800409a:	4313      	orrs	r3, r2
 800409c:	b2da      	uxtb	r2, r3
 800409e:	4b4a      	ldr	r3, [pc, #296]	; (80041c8 <readGRAM+0x8b8>)
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	099b      	lsrs	r3, r3, #6
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	4313      	orrs	r3, r2
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	4b43      	ldr	r3, [pc, #268]	; (80041c0 <readGRAM+0x8b0>)
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	0a5b      	lsrs	r3, r3, #9
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	4313      	orrs	r3, r2
 80040c0:	757b      	strb	r3, [r7, #21]
 80040c2:	2101      	movs	r1, #1
 80040c4:	483e      	ldr	r0, [pc, #248]	; (80041c0 <readGRAM+0x8b0>)
 80040c6:	f7fd fea9 	bl	8001e1c <PIN_HIGH>
 80040ca:	2101      	movs	r1, #1
 80040cc:	483c      	ldr	r0, [pc, #240]	; (80041c0 <readGRAM+0x8b0>)
 80040ce:	f7fd fea5 	bl	8001e1c <PIN_HIGH>
                READ_8(b);
 80040d2:	2101      	movs	r1, #1
 80040d4:	483a      	ldr	r0, [pc, #232]	; (80041c0 <readGRAM+0x8b0>)
 80040d6:	f7fd fea1 	bl	8001e1c <PIN_HIGH>
 80040da:	2101      	movs	r1, #1
 80040dc:	4838      	ldr	r0, [pc, #224]	; (80041c0 <readGRAM+0x8b0>)
 80040de:	f7fd fe8d 	bl	8001dfc <PIN_LOW>
 80040e2:	2101      	movs	r1, #1
 80040e4:	4836      	ldr	r0, [pc, #216]	; (80041c0 <readGRAM+0x8b0>)
 80040e6:	f7fd fe89 	bl	8001dfc <PIN_LOW>
 80040ea:	2101      	movs	r1, #1
 80040ec:	4834      	ldr	r0, [pc, #208]	; (80041c0 <readGRAM+0x8b0>)
 80040ee:	f7fd fe85 	bl	8001dfc <PIN_LOW>
 80040f2:	2101      	movs	r1, #1
 80040f4:	4832      	ldr	r0, [pc, #200]	; (80041c0 <readGRAM+0x8b0>)
 80040f6:	f7fd fe81 	bl	8001dfc <PIN_LOW>
 80040fa:	2101      	movs	r1, #1
 80040fc:	4830      	ldr	r0, [pc, #192]	; (80041c0 <readGRAM+0x8b0>)
 80040fe:	f7fd fe7d 	bl	8001dfc <PIN_LOW>
 8004102:	2101      	movs	r1, #1
 8004104:	482e      	ldr	r0, [pc, #184]	; (80041c0 <readGRAM+0x8b0>)
 8004106:	f7fd fe79 	bl	8001dfc <PIN_LOW>
 800410a:	2101      	movs	r1, #1
 800410c:	482c      	ldr	r0, [pc, #176]	; (80041c0 <readGRAM+0x8b0>)
 800410e:	f7fd fe75 	bl	8001dfc <PIN_LOW>
 8004112:	4b2b      	ldr	r3, [pc, #172]	; (80041c0 <readGRAM+0x8b0>)
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	085b      	lsrs	r3, r3, #1
 8004118:	b2db      	uxtb	r3, r3
 800411a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800411e:	b2da      	uxtb	r2, r3
 8004120:	4b28      	ldr	r3, [pc, #160]	; (80041c4 <readGRAM+0x8b4>)
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	091b      	lsrs	r3, r3, #4
 8004126:	b2db      	uxtb	r3, r3
 8004128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412c:	b2db      	uxtb	r3, r3
 800412e:	4313      	orrs	r3, r2
 8004130:	b2da      	uxtb	r2, r3
 8004132:	4b24      	ldr	r3, [pc, #144]	; (80041c4 <readGRAM+0x8b4>)
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	b2db      	uxtb	r3, r3
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	b2db      	uxtb	r3, r3
 800413c:	f003 0320 	and.w	r3, r3, #32
 8004140:	b2db      	uxtb	r3, r3
 8004142:	4313      	orrs	r3, r2
 8004144:	b2da      	uxtb	r2, r3
 8004146:	4b1f      	ldr	r3, [pc, #124]	; (80041c4 <readGRAM+0x8b4>)
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	085b      	lsrs	r3, r3, #1
 800414c:	b2db      	uxtb	r3, r3
 800414e:	f003 0310 	and.w	r3, r3, #16
 8004152:	b2db      	uxtb	r3, r3
 8004154:	4313      	orrs	r3, r2
 8004156:	b2da      	uxtb	r2, r3
 8004158:	4b1a      	ldr	r3, [pc, #104]	; (80041c4 <readGRAM+0x8b4>)
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	b2db      	uxtb	r3, r3
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	b2db      	uxtb	r3, r3
 8004164:	4313      	orrs	r3, r2
 8004166:	b2da      	uxtb	r2, r3
 8004168:	4b15      	ldr	r3, [pc, #84]	; (80041c0 <readGRAM+0x8b0>)
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	0a1b      	lsrs	r3, r3, #8
 800416e:	b2db      	uxtb	r3, r3
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	b2db      	uxtb	r3, r3
 8004176:	4313      	orrs	r3, r2
 8004178:	b2da      	uxtb	r2, r3
 800417a:	4b13      	ldr	r3, [pc, #76]	; (80041c8 <readGRAM+0x8b8>)
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	099b      	lsrs	r3, r3, #6
 8004180:	b2db      	uxtb	r3, r3
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	b2db      	uxtb	r3, r3
 8004188:	4313      	orrs	r3, r2
 800418a:	b2da      	uxtb	r2, r3
 800418c:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <readGRAM+0x8b0>)
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	0a5b      	lsrs	r3, r3, #9
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	b2db      	uxtb	r3, r3
 800419a:	4313      	orrs	r3, r2
 800419c:	753b      	strb	r3, [r7, #20]
 800419e:	2101      	movs	r1, #1
 80041a0:	4807      	ldr	r0, [pc, #28]	; (80041c0 <readGRAM+0x8b0>)
 80041a2:	f7fd fe3b 	bl	8001e1c <PIN_HIGH>
 80041a6:	2101      	movs	r1, #1
 80041a8:	4805      	ldr	r0, [pc, #20]	; (80041c0 <readGRAM+0x8b0>)
 80041aa:	f7fd fe37 	bl	8001e1c <PIN_HIGH>
                if (_lcd_capable & READ_BGR)
 80041ae:	4b03      	ldr	r3, [pc, #12]	; (80041bc <readGRAM+0x8ac>)
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d011      	beq.n	80041de <readGRAM+0x8ce>
 80041ba:	e007      	b.n	80041cc <readGRAM+0x8bc>
 80041bc:	200054da 	.word	0x200054da
 80041c0:	40020000 	.word	0x40020000
 80041c4:	40020400 	.word	0x40020400
 80041c8:	40020800 	.word	0x40020800
                    ret = color565(b, g, r);
 80041cc:	7dfa      	ldrb	r2, [r7, #23]
 80041ce:	7d79      	ldrb	r1, [r7, #21]
 80041d0:	7d3b      	ldrb	r3, [r7, #20]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fd fee9 	bl	8001faa <color565>
 80041d8:	4603      	mov	r3, r0
 80041da:	84fb      	strh	r3, [r7, #38]	; 0x26
 80041dc:	e113      	b.n	8004406 <readGRAM+0xaf6>
                else
                    ret = color565(r, g, b);
 80041de:	7d3a      	ldrb	r2, [r7, #20]
 80041e0:	7d79      	ldrb	r1, [r7, #21]
 80041e2:	7dfb      	ldrb	r3, [r7, #23]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fd fee0 	bl	8001faa <color565>
 80041ea:	4603      	mov	r3, r0
 80041ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80041ee:	e10a      	b.n	8004406 <readGRAM+0xaf6>
            } else
            {
                READ_16(ret);
 80041f0:	2101      	movs	r1, #1
 80041f2:	4895      	ldr	r0, [pc, #596]	; (8004448 <readGRAM+0xb38>)
 80041f4:	f7fd fe12 	bl	8001e1c <PIN_HIGH>
 80041f8:	2101      	movs	r1, #1
 80041fa:	4893      	ldr	r0, [pc, #588]	; (8004448 <readGRAM+0xb38>)
 80041fc:	f7fd fdfe 	bl	8001dfc <PIN_LOW>
 8004200:	2101      	movs	r1, #1
 8004202:	4891      	ldr	r0, [pc, #580]	; (8004448 <readGRAM+0xb38>)
 8004204:	f7fd fdfa 	bl	8001dfc <PIN_LOW>
 8004208:	2101      	movs	r1, #1
 800420a:	488f      	ldr	r0, [pc, #572]	; (8004448 <readGRAM+0xb38>)
 800420c:	f7fd fdf6 	bl	8001dfc <PIN_LOW>
 8004210:	2101      	movs	r1, #1
 8004212:	488d      	ldr	r0, [pc, #564]	; (8004448 <readGRAM+0xb38>)
 8004214:	f7fd fdf2 	bl	8001dfc <PIN_LOW>
 8004218:	2101      	movs	r1, #1
 800421a:	488b      	ldr	r0, [pc, #556]	; (8004448 <readGRAM+0xb38>)
 800421c:	f7fd fdee 	bl	8001dfc <PIN_LOW>
 8004220:	2101      	movs	r1, #1
 8004222:	4889      	ldr	r0, [pc, #548]	; (8004448 <readGRAM+0xb38>)
 8004224:	f7fd fdea 	bl	8001dfc <PIN_LOW>
 8004228:	2101      	movs	r1, #1
 800422a:	4887      	ldr	r0, [pc, #540]	; (8004448 <readGRAM+0xb38>)
 800422c:	f7fd fde6 	bl	8001dfc <PIN_LOW>
 8004230:	4b85      	ldr	r3, [pc, #532]	; (8004448 <readGRAM+0xb38>)
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	085b      	lsrs	r3, r3, #1
 8004236:	b2db      	uxtb	r3, r3
 8004238:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800423c:	b2da      	uxtb	r2, r3
 800423e:	4b83      	ldr	r3, [pc, #524]	; (800444c <readGRAM+0xb3c>)
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	091b      	lsrs	r3, r3, #4
 8004244:	b2db      	uxtb	r3, r3
 8004246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424a:	b2db      	uxtb	r3, r3
 800424c:	4313      	orrs	r3, r2
 800424e:	b2da      	uxtb	r2, r3
 8004250:	4b7e      	ldr	r3, [pc, #504]	; (800444c <readGRAM+0xb3c>)
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	b2db      	uxtb	r3, r3
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	b2db      	uxtb	r3, r3
 800425a:	f003 0320 	and.w	r3, r3, #32
 800425e:	b2db      	uxtb	r3, r3
 8004260:	4313      	orrs	r3, r2
 8004262:	b2da      	uxtb	r2, r3
 8004264:	4b79      	ldr	r3, [pc, #484]	; (800444c <readGRAM+0xb3c>)
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	085b      	lsrs	r3, r3, #1
 800426a:	b2db      	uxtb	r3, r3
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	b2db      	uxtb	r3, r3
 8004272:	4313      	orrs	r3, r2
 8004274:	b2da      	uxtb	r2, r3
 8004276:	4b75      	ldr	r3, [pc, #468]	; (800444c <readGRAM+0xb3c>)
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	b2db      	uxtb	r3, r3
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	b2db      	uxtb	r3, r3
 8004282:	4313      	orrs	r3, r2
 8004284:	b2da      	uxtb	r2, r3
 8004286:	4b70      	ldr	r3, [pc, #448]	; (8004448 <readGRAM+0xb38>)
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	0a1b      	lsrs	r3, r3, #8
 800428c:	b2db      	uxtb	r3, r3
 800428e:	f003 0304 	and.w	r3, r3, #4
 8004292:	b2db      	uxtb	r3, r3
 8004294:	4313      	orrs	r3, r2
 8004296:	b2da      	uxtb	r2, r3
 8004298:	4b6d      	ldr	r3, [pc, #436]	; (8004450 <readGRAM+0xb40>)
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	099b      	lsrs	r3, r3, #6
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	4313      	orrs	r3, r2
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	4b67      	ldr	r3, [pc, #412]	; (8004448 <readGRAM+0xb38>)
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	0a5b      	lsrs	r3, r3, #9
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	4313      	orrs	r3, r2
 80042ba:	75bb      	strb	r3, [r7, #22]
 80042bc:	2101      	movs	r1, #1
 80042be:	4862      	ldr	r0, [pc, #392]	; (8004448 <readGRAM+0xb38>)
 80042c0:	f7fd fdac 	bl	8001e1c <PIN_HIGH>
 80042c4:	2101      	movs	r1, #1
 80042c6:	4860      	ldr	r0, [pc, #384]	; (8004448 <readGRAM+0xb38>)
 80042c8:	f7fd fda8 	bl	8001e1c <PIN_HIGH>
 80042cc:	2101      	movs	r1, #1
 80042ce:	485e      	ldr	r0, [pc, #376]	; (8004448 <readGRAM+0xb38>)
 80042d0:	f7fd fda4 	bl	8001e1c <PIN_HIGH>
 80042d4:	2101      	movs	r1, #1
 80042d6:	485c      	ldr	r0, [pc, #368]	; (8004448 <readGRAM+0xb38>)
 80042d8:	f7fd fd90 	bl	8001dfc <PIN_LOW>
 80042dc:	2101      	movs	r1, #1
 80042de:	485a      	ldr	r0, [pc, #360]	; (8004448 <readGRAM+0xb38>)
 80042e0:	f7fd fd8c 	bl	8001dfc <PIN_LOW>
 80042e4:	2101      	movs	r1, #1
 80042e6:	4858      	ldr	r0, [pc, #352]	; (8004448 <readGRAM+0xb38>)
 80042e8:	f7fd fd88 	bl	8001dfc <PIN_LOW>
 80042ec:	2101      	movs	r1, #1
 80042ee:	4856      	ldr	r0, [pc, #344]	; (8004448 <readGRAM+0xb38>)
 80042f0:	f7fd fd84 	bl	8001dfc <PIN_LOW>
 80042f4:	2101      	movs	r1, #1
 80042f6:	4854      	ldr	r0, [pc, #336]	; (8004448 <readGRAM+0xb38>)
 80042f8:	f7fd fd80 	bl	8001dfc <PIN_LOW>
 80042fc:	2101      	movs	r1, #1
 80042fe:	4852      	ldr	r0, [pc, #328]	; (8004448 <readGRAM+0xb38>)
 8004300:	f7fd fd7c 	bl	8001dfc <PIN_LOW>
 8004304:	2101      	movs	r1, #1
 8004306:	4850      	ldr	r0, [pc, #320]	; (8004448 <readGRAM+0xb38>)
 8004308:	f7fd fd78 	bl	8001dfc <PIN_LOW>
 800430c:	4b4e      	ldr	r3, [pc, #312]	; (8004448 <readGRAM+0xb38>)
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	085b      	lsrs	r3, r3, #1
 8004312:	b29b      	uxth	r3, r3
 8004314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004318:	b29a      	uxth	r2, r3
 800431a:	4b4c      	ldr	r3, [pc, #304]	; (800444c <readGRAM+0xb3c>)
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	091b      	lsrs	r3, r3, #4
 8004320:	b29b      	uxth	r3, r3
 8004322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004326:	b29b      	uxth	r3, r3
 8004328:	4313      	orrs	r3, r2
 800432a:	b29a      	uxth	r2, r3
 800432c:	4b47      	ldr	r3, [pc, #284]	; (800444c <readGRAM+0xb3c>)
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	b29b      	uxth	r3, r3
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	b29b      	uxth	r3, r3
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	b29b      	uxth	r3, r3
 800433c:	4313      	orrs	r3, r2
 800433e:	b29a      	uxth	r2, r3
 8004340:	4b42      	ldr	r3, [pc, #264]	; (800444c <readGRAM+0xb3c>)
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	085b      	lsrs	r3, r3, #1
 8004346:	b29b      	uxth	r3, r3
 8004348:	f003 0310 	and.w	r3, r3, #16
 800434c:	b29b      	uxth	r3, r3
 800434e:	4313      	orrs	r3, r2
 8004350:	b29a      	uxth	r2, r3
 8004352:	4b3e      	ldr	r3, [pc, #248]	; (800444c <readGRAM+0xb3c>)
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	b29b      	uxth	r3, r3
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	b29b      	uxth	r3, r3
 800435e:	4313      	orrs	r3, r2
 8004360:	b29a      	uxth	r2, r3
 8004362:	4b39      	ldr	r3, [pc, #228]	; (8004448 <readGRAM+0xb38>)
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	0a1b      	lsrs	r3, r3, #8
 8004368:	b29b      	uxth	r3, r3
 800436a:	f003 0304 	and.w	r3, r3, #4
 800436e:	b29b      	uxth	r3, r3
 8004370:	4313      	orrs	r3, r2
 8004372:	b29a      	uxth	r2, r3
 8004374:	4b36      	ldr	r3, [pc, #216]	; (8004450 <readGRAM+0xb40>)
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	099b      	lsrs	r3, r3, #6
 800437a:	b29b      	uxth	r3, r3
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	b29b      	uxth	r3, r3
 8004382:	4313      	orrs	r3, r2
 8004384:	b29a      	uxth	r2, r3
 8004386:	4b30      	ldr	r3, [pc, #192]	; (8004448 <readGRAM+0xb38>)
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	0a5b      	lsrs	r3, r3, #9
 800438c:	b29b      	uxth	r3, r3
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	b29b      	uxth	r3, r3
 8004394:	4313      	orrs	r3, r2
 8004396:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004398:	2101      	movs	r1, #1
 800439a:	482b      	ldr	r0, [pc, #172]	; (8004448 <readGRAM+0xb38>)
 800439c:	f7fd fd3e 	bl	8001e1c <PIN_HIGH>
 80043a0:	2101      	movs	r1, #1
 80043a2:	4829      	ldr	r0, [pc, #164]	; (8004448 <readGRAM+0xb38>)
 80043a4:	f7fd fd3a 	bl	8001e1c <PIN_HIGH>
 80043a8:	7dbb      	ldrb	r3, [r7, #22]
 80043aa:	021b      	lsls	r3, r3, #8
 80043ac:	b21a      	sxth	r2, r3
 80043ae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80043b2:	4313      	orrs	r3, r2
 80043b4:	b21b      	sxth	r3, r3
 80043b6:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_LOWHIGH)
 80043b8:	4b26      	ldr	r3, [pc, #152]	; (8004454 <readGRAM+0xb44>)
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d009      	beq.n	80043d8 <readGRAM+0xac8>
                    ret = (ret >> 8) | (ret << 8);
 80043c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043c6:	0a1b      	lsrs	r3, r3, #8
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	b21a      	sxth	r2, r3
 80043cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043ce:	021b      	lsls	r3, r3, #8
 80043d0:	b21b      	sxth	r3, r3
 80043d2:	4313      	orrs	r3, r2
 80043d4:	b21b      	sxth	r3, r3
 80043d6:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_BGR)
 80043d8:	4b1e      	ldr	r3, [pc, #120]	; (8004454 <readGRAM+0xb44>)
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d010      	beq.n	8004406 <readGRAM+0xaf6>
                    ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 80043e4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80043e8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80043ec:	b21a      	sxth	r2, r3
 80043ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043f0:	0adb      	lsrs	r3, r3, #11
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	b21b      	sxth	r3, r3
 80043f6:	4313      	orrs	r3, r2
 80043f8:	b21a      	sxth	r2, r3
 80043fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043fc:	02db      	lsls	r3, r3, #11
 80043fe:	b21b      	sxth	r3, r3
 8004400:	4313      	orrs	r3, r2
 8004402:	b21b      	sxth	r3, r3
 8004404:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
#if defined(SUPPORT_9488_555)
    if (is555) ret = color555_to_565(ret);
 8004406:	4b14      	ldr	r3, [pc, #80]	; (8004458 <readGRAM+0xb48>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d005      	beq.n	800441a <readGRAM+0xb0a>
 800440e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004410:	4618      	mov	r0, r3
 8004412:	f7fd fd79 	bl	8001f08 <color555_to_565>
 8004416:	4603      	mov	r3, r0
 8004418:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
            *block++ = ret;
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	1c9a      	adds	r2, r3, #2
 800441e:	60ba      	str	r2, [r7, #8]
 8004420:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004422:	801a      	strh	r2, [r3, #0]
            n--;
 8004424:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004428:	b29b      	uxth	r3, r3
 800442a:	3b01      	subs	r3, #1
 800442c:	b29b      	uxth	r3, r3
 800442e:	847b      	strh	r3, [r7, #34]	; 0x22
            if (!(_lcd_capable & AUTO_READINC))
 8004430:	4b08      	ldr	r3, [pc, #32]	; (8004454 <readGRAM+0xb44>)
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00f      	beq.n	800445c <readGRAM+0xb4c>
        while (n)
 800443c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004440:	2b00      	cmp	r3, #0
 8004442:	f47f ad63 	bne.w	8003f0c <readGRAM+0x5fc>
 8004446:	e00a      	b.n	800445e <readGRAM+0xb4e>
 8004448:	40020000 	.word	0x40020000
 800444c:	40020400 	.word	0x40020400
 8004450:	40020800 	.word	0x40020800
 8004454:	200054da 	.word	0x200054da
 8004458:	200000ce 	.word	0x200000ce
                break;
 800445c:	bf00      	nop
        }
        if (++col >= w) {
 800445e:	8bfb      	ldrh	r3, [r7, #30]
 8004460:	3301      	adds	r3, #1
 8004462:	b29b      	uxth	r3, r3
 8004464:	83fb      	strh	r3, [r7, #30]
 8004466:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800446a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800446e:	429a      	cmp	r2, r3
 8004470:	db0d      	blt.n	800448e <readGRAM+0xb7e>
            col = 0;
 8004472:	2300      	movs	r3, #0
 8004474:	83fb      	strh	r3, [r7, #30]
            if (++row >= h)
 8004476:	8c3b      	ldrh	r3, [r7, #32]
 8004478:	3301      	adds	r3, #1
 800447a:	b29b      	uxth	r3, r3
 800447c:	843b      	strh	r3, [r7, #32]
 800447e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004482:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8004486:	429a      	cmp	r2, r3
 8004488:	db01      	blt.n	800448e <readGRAM+0xb7e>
                row = 0;
 800448a:	2300      	movs	r3, #0
 800448c:	843b      	strh	r3, [r7, #32]
        }
        RD_IDLE;
 800448e:	2101      	movs	r1, #1
 8004490:	4814      	ldr	r0, [pc, #80]	; (80044e4 <readGRAM+0xbd4>)
 8004492:	f7fd fcc3 	bl	8001e1c <PIN_HIGH>
        CS_IDLE;
 8004496:	2101      	movs	r1, #1
 8004498:	4813      	ldr	r0, [pc, #76]	; (80044e8 <readGRAM+0xbd8>)
 800449a:	f7fd fcbf 	bl	8001e1c <PIN_HIGH>
        setWriteDir();
 800449e:	f7fd fe15 	bl	80020cc <setWriteDir>
    while (n > 0) {
 80044a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f73f aa7e 	bgt.w	80039a8 <readGRAM+0x98>
    }
    if (!(_lcd_capable & MIPI_DCS_REV1))
 80044ac:	4b0f      	ldr	r3, [pc, #60]	; (80044ec <readGRAM+0xbdc>)
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d110      	bne.n	80044da <readGRAM+0xbca>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 80044b8:	f7fd fcee 	bl	8001e98 <width>
 80044bc:	4603      	mov	r3, r0
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	b21c      	sxth	r4, r3
 80044c4:	f7fd fcf4 	bl	8001eb0 <height>
 80044c8:	4603      	mov	r3, r0
 80044ca:	3b01      	subs	r3, #1
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	b21b      	sxth	r3, r3
 80044d0:	4622      	mov	r2, r4
 80044d2:	2100      	movs	r1, #0
 80044d4:	2000      	movs	r0, #0
 80044d6:	f000 fb97 	bl	8004c08 <setAddrWindow>
    return 0;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	372c      	adds	r7, #44	; 0x2c
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd90      	pop	{r4, r7, pc}
 80044e4:	40020000 	.word	0x40020000
 80044e8:	40020400 	.word	0x40020400
 80044ec:	200054da 	.word	0x200054da

080044f0 <setRotation>:


void setRotation(uint8_t r)
{
 80044f0:	b590      	push	{r4, r7, lr}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	71fb      	strb	r3, [r7, #7]
   uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 80044fa:	4bab      	ldr	r3, [pc, #684]	; (80047a8 <setRotation+0x2b8>)
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	827b      	strh	r3, [r7, #18]
   uint8_t val, d[3];
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 8004500:	79fb      	ldrb	r3, [r7, #7]
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	b2da      	uxtb	r2, r3
 8004508:	4ba8      	ldr	r3, [pc, #672]	; (80047ac <setRotation+0x2bc>)
 800450a:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 800450c:	4ba7      	ldr	r3, [pc, #668]	; (80047ac <setRotation+0x2bc>)
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <setRotation+0x2e>
 8004518:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800451c:	e000      	b.n	8004520 <setRotation+0x30>
 800451e:	22f0      	movs	r2, #240	; 0xf0
 8004520:	4ba3      	ldr	r3, [pc, #652]	; (80047b0 <setRotation+0x2c0>)
 8004522:	801a      	strh	r2, [r3, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 8004524:	4ba1      	ldr	r3, [pc, #644]	; (80047ac <setRotation+0x2bc>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <setRotation+0x44>
 8004530:	22f0      	movs	r2, #240	; 0xf0
 8004532:	e001      	b.n	8004538 <setRotation+0x48>
 8004534:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004538:	4b9e      	ldr	r3, [pc, #632]	; (80047b4 <setRotation+0x2c4>)
 800453a:	801a      	strh	r2, [r3, #0]
   switch (rotation) {
 800453c:	4b9b      	ldr	r3, [pc, #620]	; (80047ac <setRotation+0x2bc>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2b03      	cmp	r3, #3
 8004542:	d817      	bhi.n	8004574 <setRotation+0x84>
 8004544:	a201      	add	r2, pc, #4	; (adr r2, 800454c <setRotation+0x5c>)
 8004546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454a:	bf00      	nop
 800454c:	0800455d 	.word	0x0800455d
 8004550:	08004563 	.word	0x08004563
 8004554:	08004569 	.word	0x08004569
 8004558:	0800456f 	.word	0x0800456f
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 800455c:	2348      	movs	r3, #72	; 0x48
 800455e:	72fb      	strb	r3, [r7, #11]
       break;
 8004560:	e008      	b.n	8004574 <setRotation+0x84>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 8004562:	2328      	movs	r3, #40	; 0x28
 8004564:	72fb      	strb	r3, [r7, #11]
       break;
 8004566:	e005      	b.n	8004574 <setRotation+0x84>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 8004568:	2398      	movs	r3, #152	; 0x98
 800456a:	72fb      	strb	r3, [r7, #11]
       break;
 800456c:	e002      	b.n	8004574 <setRotation+0x84>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 800456e:	23f8      	movs	r3, #248	; 0xf8
 8004570:	72fb      	strb	r3, [r7, #11]
       break;
 8004572:	bf00      	nop
   }
   if (_lcd_capable & INVERT_GS)
 8004574:	4b90      	ldr	r3, [pc, #576]	; (80047b8 <setRotation+0x2c8>)
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457c:	2b00      	cmp	r3, #0
 800457e:	d005      	beq.n	800458c <setRotation+0x9c>
       val ^= 0x80;
 8004580:	7afb      	ldrb	r3, [r7, #11]
 8004582:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8004586:	43db      	mvns	r3, r3
 8004588:	b2db      	uxtb	r3, r3
 800458a:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_SS)
 800458c:	4b8a      	ldr	r3, [pc, #552]	; (80047b8 <setRotation+0x2c8>)
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004594:	2b00      	cmp	r3, #0
 8004596:	d004      	beq.n	80045a2 <setRotation+0xb2>
       val ^= 0x40;
 8004598:	7afb      	ldrb	r3, [r7, #11]
 800459a:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_RGB)
 80045a2:	4b85      	ldr	r3, [pc, #532]	; (80047b8 <setRotation+0x2c8>)
 80045a4:	881b      	ldrh	r3, [r3, #0]
 80045a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d004      	beq.n	80045b8 <setRotation+0xc8>
       val ^= 0x08;
 80045ae:	7afb      	ldrb	r3, [r7, #11]
 80045b0:	f083 0308 	eor.w	r3, r3, #8
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & MIPI_DCS_REV1) {
 80045b8:	4b7f      	ldr	r3, [pc, #508]	; (80047b8 <setRotation+0x2c8>)
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 8119 	beq.w	80047f8 <setRotation+0x308>
       if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 80045c6:	4b7d      	ldr	r3, [pc, #500]	; (80047bc <setRotation+0x2cc>)
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	f646 0214 	movw	r2, #26644	; 0x6814
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d128      	bne.n	8004624 <setRotation+0x134>
           GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 80045d2:	7afb      	ldrb	r3, [r7, #11]
 80045d4:	b25b      	sxtb	r3, r3
 80045d6:	105b      	asrs	r3, r3, #1
 80045d8:	b25b      	sxtb	r3, r3
 80045da:	b29b      	uxth	r3, r3
 80045dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e0:	823b      	strh	r3, [r7, #16]
           SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 80045e2:	7afb      	ldrb	r3, [r7, #11]
 80045e4:	105b      	asrs	r3, r3, #1
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	f003 0320 	and.w	r3, r3, #32
 80045ec:	81fb      	strh	r3, [r7, #14]
           val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 80045ee:	7afb      	ldrb	r3, [r7, #11]
 80045f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	72fb      	strb	r3, [r7, #11]
           d[0] = 0;
 80045f8:	2300      	movs	r3, #0
 80045fa:	723b      	strb	r3, [r7, #8]
           d[1] = GS | SS_v | 0x02;      //MY, MX
 80045fc:	8a3b      	ldrh	r3, [r7, #16]
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	89fb      	ldrh	r3, [r7, #14]
 8004602:	b2db      	uxtb	r3, r3
 8004604:	4313      	orrs	r3, r2
 8004606:	b2db      	uxtb	r3, r3
 8004608:	f043 0302 	orr.w	r3, r3, #2
 800460c:	b2db      	uxtb	r3, r3
 800460e:	727b      	strb	r3, [r7, #9]
           d[2] = 0x3B;
 8004610:	233b      	movs	r3, #59	; 0x3b
 8004612:	72bb      	strb	r3, [r7, #10]
           WriteCmdParamN(0xB6, 3, d);
 8004614:	f107 0308 	add.w	r3, r7, #8
 8004618:	461a      	mov	r2, r3
 800461a:	2103      	movs	r1, #3
 800461c:	20b6      	movs	r0, #182	; 0xb6
 800461e:	f7fd ffd9 	bl	80025d4 <WriteCmdParamN>
           goto common_MC;
 8004622:	e0a4      	b.n	800476e <setRotation+0x27e>
       }
       else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 8004624:	4b65      	ldr	r3, [pc, #404]	; (80047bc <setRotation+0x2cc>)
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	f641 1263 	movw	r2, #6499	; 0x1963
 800462c:	4293      	cmp	r3, r2
 800462e:	d00b      	beq.n	8004648 <setRotation+0x158>
 8004630:	4b62      	ldr	r3, [pc, #392]	; (80047bc <setRotation+0x2cc>)
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	f249 4281 	movw	r2, #38017	; 0x9481
 8004638:	4293      	cmp	r3, r2
 800463a:	d005      	beq.n	8004648 <setRotation+0x158>
 800463c:	4b5f      	ldr	r3, [pc, #380]	; (80047bc <setRotation+0x2cc>)
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	f241 5211 	movw	r2, #5393	; 0x1511
 8004644:	4293      	cmp	r3, r2
 8004646:	d139      	bne.n	80046bc <setRotation+0x1cc>
           if (val & 0x80)
 8004648:	7afb      	ldrb	r3, [r7, #11]
 800464a:	b25b      	sxtb	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	da04      	bge.n	800465a <setRotation+0x16a>
               val |= 0x01;    //GS
 8004650:	7afb      	ldrb	r3, [r7, #11]
 8004652:	f043 0301 	orr.w	r3, r3, #1
 8004656:	b2db      	uxtb	r3, r3
 8004658:	72fb      	strb	r3, [r7, #11]
           if ((val & 0x40))
 800465a:	7afb      	ldrb	r3, [r7, #11]
 800465c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004660:	2b00      	cmp	r3, #0
 8004662:	d004      	beq.n	800466e <setRotation+0x17e>
               val |= 0x02;    //SS
 8004664:	7afb      	ldrb	r3, [r7, #11]
 8004666:	f043 0302 	orr.w	r3, r3, #2
 800466a:	b2db      	uxtb	r3, r3
 800466c:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1963) val &= ~0xC0;
 800466e:	4b53      	ldr	r3, [pc, #332]	; (80047bc <setRotation+0x2cc>)
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	f641 1263 	movw	r2, #6499	; 0x1963
 8004676:	4293      	cmp	r3, r2
 8004678:	d104      	bne.n	8004684 <setRotation+0x194>
 800467a:	7afb      	ldrb	r3, [r7, #11]
 800467c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004680:	b2db      	uxtb	r3, r3
 8004682:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x9481) val &= ~0xD0;
 8004684:	4b4d      	ldr	r3, [pc, #308]	; (80047bc <setRotation+0x2cc>)
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	f249 4281 	movw	r2, #38017	; 0x9481
 800468c:	4293      	cmp	r3, r2
 800468e:	d104      	bne.n	800469a <setRotation+0x1aa>
 8004690:	7afb      	ldrb	r3, [r7, #11]
 8004692:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 8004696:	b2db      	uxtb	r3, r3
 8004698:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1511) {
 800469a:	4b48      	ldr	r3, [pc, #288]	; (80047bc <setRotation+0x2cc>)
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	f241 5211 	movw	r2, #5393	; 0x1511
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d160      	bne.n	8004768 <setRotation+0x278>
               val &= ~0x10;   //remove ML
 80046a6:	7afb      	ldrb	r3, [r7, #11]
 80046a8:	f023 0310 	bic.w	r3, r3, #16
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	72fb      	strb	r3, [r7, #11]
               val |= 0xC0;    //force penguin 180 rotation
 80046b0:	7afb      	ldrb	r3, [r7, #11]
 80046b2:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	72fb      	strb	r3, [r7, #11]
           }
//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
           goto common_MC;
 80046ba:	e055      	b.n	8004768 <setRotation+0x278>
      }
       else if (is8347) {
 80046bc:	4b40      	ldr	r3, [pc, #256]	; (80047c0 <setRotation+0x2d0>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d053      	beq.n	800476c <setRotation+0x27c>
           _MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 80046c4:	4b3f      	ldr	r3, [pc, #252]	; (80047c4 <setRotation+0x2d4>)
 80046c6:	2202      	movs	r2, #2
 80046c8:	801a      	strh	r2, [r3, #0]
 80046ca:	4b3f      	ldr	r3, [pc, #252]	; (80047c8 <setRotation+0x2d8>)
 80046cc:	2206      	movs	r2, #6
 80046ce:	801a      	strh	r2, [r3, #0]
 80046d0:	4b3e      	ldr	r3, [pc, #248]	; (80047cc <setRotation+0x2dc>)
 80046d2:	2222      	movs	r2, #34	; 0x22
 80046d4:	801a      	strh	r2, [r3, #0]
 80046d6:	4b3e      	ldr	r3, [pc, #248]	; (80047d0 <setRotation+0x2e0>)
 80046d8:	2202      	movs	r2, #2
 80046da:	801a      	strh	r2, [r3, #0]
 80046dc:	4b3d      	ldr	r3, [pc, #244]	; (80047d4 <setRotation+0x2e4>)
 80046de:	2204      	movs	r2, #4
 80046e0:	801a      	strh	r2, [r3, #0]
 80046e2:	4b3d      	ldr	r3, [pc, #244]	; (80047d8 <setRotation+0x2e8>)
 80046e4:	2206      	movs	r2, #6
 80046e6:	801a      	strh	r2, [r3, #0]
 80046e8:	4b3c      	ldr	r3, [pc, #240]	; (80047dc <setRotation+0x2ec>)
 80046ea:	2208      	movs	r2, #8
 80046ec:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x0065) {             //HX8352-B
 80046ee:	4b33      	ldr	r3, [pc, #204]	; (80047bc <setRotation+0x2cc>)
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	2b65      	cmp	r3, #101	; 0x65
 80046f4:	d121      	bne.n	800473a <setRotation+0x24a>
               val |= 0x01;    //GS=1
 80046f6:	7afb      	ldrb	r3, [r7, #11]
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 8004700:	7afb      	ldrb	r3, [r7, #11]
 8004702:	f003 0310 	and.w	r3, r3, #16
 8004706:	2b00      	cmp	r3, #0
 8004708:	d005      	beq.n	8004716 <setRotation+0x226>
 800470a:	7afb      	ldrb	r3, [r7, #11]
 800470c:	f083 032c 	eor.w	r3, r3, #44	; 0x2c
 8004710:	43db      	mvns	r3, r3
 8004712:	b2db      	uxtb	r3, r3
 8004714:	72fb      	strb	r3, [r7, #11]
               if (r & 1) _MC = 0x82, _MP = 0x80;
 8004716:	79fb      	ldrb	r3, [r7, #7]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d006      	beq.n	800472e <setRotation+0x23e>
 8004720:	4b28      	ldr	r3, [pc, #160]	; (80047c4 <setRotation+0x2d4>)
 8004722:	2282      	movs	r2, #130	; 0x82
 8004724:	801a      	strh	r2, [r3, #0]
 8004726:	4b28      	ldr	r3, [pc, #160]	; (80047c8 <setRotation+0x2d8>)
 8004728:	2280      	movs	r2, #128	; 0x80
 800472a:	801a      	strh	r2, [r3, #0]
 800472c:	e005      	b.n	800473a <setRotation+0x24a>
               else _MC = 0x80, _MP = 0x82;
 800472e:	4b25      	ldr	r3, [pc, #148]	; (80047c4 <setRotation+0x2d4>)
 8004730:	2280      	movs	r2, #128	; 0x80
 8004732:	801a      	strh	r2, [r3, #0]
 8004734:	4b24      	ldr	r3, [pc, #144]	; (80047c8 <setRotation+0x2d8>)
 8004736:	2282      	movs	r2, #130	; 0x82
 8004738:	801a      	strh	r2, [r3, #0]
           }
           if (_lcd_ID == 0x5252) {             //HX8352-A
 800473a:	4b20      	ldr	r3, [pc, #128]	; (80047bc <setRotation+0x2cc>)
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	f245 2252 	movw	r2, #21074	; 0x5252
 8004742:	4293      	cmp	r3, r2
 8004744:	d129      	bne.n	800479a <setRotation+0x2aa>
               val |= 0x02;   //VERT_SCROLLON
 8004746:	7afb      	ldrb	r3, [r7, #11]
 8004748:	f043 0302 	orr.w	r3, r3, #2
 800474c:	b2db      	uxtb	r3, r3
 800474e:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 8004750:	7afb      	ldrb	r3, [r7, #11]
 8004752:	f003 0310 	and.w	r3, r3, #16
 8004756:	2b00      	cmp	r3, #0
 8004758:	d01f      	beq.n	800479a <setRotation+0x2aa>
 800475a:	7afb      	ldrb	r3, [r7, #11]
 800475c:	f083 032b 	eor.w	r3, r3, #43	; 0x2b
 8004760:	43db      	mvns	r3, r3
 8004762:	b2db      	uxtb	r3, r3
 8004764:	72fb      	strb	r3, [r7, #11]
           }
			goto common_BGR;
 8004766:	e018      	b.n	800479a <setRotation+0x2aa>
           goto common_MC;
 8004768:	bf00      	nop
 800476a:	e000      	b.n	800476e <setRotation+0x27e>
       }
     common_MC:
 800476c:	bf00      	nop
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 800476e:	4b15      	ldr	r3, [pc, #84]	; (80047c4 <setRotation+0x2d4>)
 8004770:	222a      	movs	r2, #42	; 0x2a
 8004772:	801a      	strh	r2, [r3, #0]
 8004774:	4b14      	ldr	r3, [pc, #80]	; (80047c8 <setRotation+0x2d8>)
 8004776:	222b      	movs	r2, #43	; 0x2b
 8004778:	801a      	strh	r2, [r3, #0]
 800477a:	4b14      	ldr	r3, [pc, #80]	; (80047cc <setRotation+0x2dc>)
 800477c:	222c      	movs	r2, #44	; 0x2c
 800477e:	801a      	strh	r2, [r3, #0]
 8004780:	4b13      	ldr	r3, [pc, #76]	; (80047d0 <setRotation+0x2e0>)
 8004782:	222a      	movs	r2, #42	; 0x2a
 8004784:	801a      	strh	r2, [r3, #0]
 8004786:	4b13      	ldr	r3, [pc, #76]	; (80047d4 <setRotation+0x2e4>)
 8004788:	222a      	movs	r2, #42	; 0x2a
 800478a:	801a      	strh	r2, [r3, #0]
 800478c:	4b12      	ldr	r3, [pc, #72]	; (80047d8 <setRotation+0x2e8>)
 800478e:	222b      	movs	r2, #43	; 0x2b
 8004790:	801a      	strh	r2, [r3, #0]
 8004792:	4b12      	ldr	r3, [pc, #72]	; (80047dc <setRotation+0x2ec>)
 8004794:	222b      	movs	r2, #43	; 0x2b
 8004796:	801a      	strh	r2, [r3, #0]
 8004798:	e000      	b.n	800479c <setRotation+0x2ac>
			goto common_BGR;
 800479a:	bf00      	nop
     common_BGR:
       WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 800479c:	4b08      	ldr	r3, [pc, #32]	; (80047c0 <setRotation+0x2d0>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d01d      	beq.n	80047e0 <setRotation+0x2f0>
 80047a4:	2316      	movs	r3, #22
 80047a6:	e01c      	b.n	80047e2 <setRotation+0x2f2>
 80047a8:	200054de 	.word	0x200054de
 80047ac:	200000d2 	.word	0x200000d2
 80047b0:	20000008 	.word	0x20000008
 80047b4:	2000000a 	.word	0x2000000a
 80047b8:	200054da 	.word	0x200054da
 80047bc:	200054e8 	.word	0x200054e8
 80047c0:	200000cd 	.word	0x200000cd
 80047c4:	200054e2 	.word	0x200054e2
 80047c8:	200054e0 	.word	0x200054e0
 80047cc:	200054d8 	.word	0x200054d8
 80047d0:	200054e4 	.word	0x200054e4
 80047d4:	200054ec 	.word	0x200054ec
 80047d8:	200054dc 	.word	0x200054dc
 80047dc:	200054e6 	.word	0x200054e6
 80047e0:	2336      	movs	r3, #54	; 0x36
 80047e2:	f107 020b 	add.w	r2, r7, #11
 80047e6:	2101      	movs	r1, #1
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fd fef3 	bl	80025d4 <WriteCmdParamN>
       _lcd_madctl = val;
 80047ee:	7afb      	ldrb	r3, [r7, #11]
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	4b77      	ldr	r3, [pc, #476]	; (80049d0 <setRotation+0x4e0>)
 80047f4:	801a      	strh	r2, [r3, #0]
 80047f6:	e0a5      	b.n	8004944 <setRotation+0x454>
//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
   }
   // cope with 9320 variants
   else {
       switch (_lcd_ID) {
 80047f8:	4b76      	ldr	r3, [pc, #472]	; (80049d4 <setRotation+0x4e4>)
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	f24b 5209 	movw	r2, #46345	; 0xb509
 8004800:	4293      	cmp	r3, r2
 8004802:	d013      	beq.n	800482c <setRotation+0x33c>
 8004804:	f24b 5209 	movw	r2, #46345	; 0xb509
 8004808:	4293      	cmp	r3, r2
 800480a:	dc4f      	bgt.n	80048ac <setRotation+0x3bc>
 800480c:	f249 3226 	movw	r2, #37670	; 0x9326
 8004810:	4293      	cmp	r3, r2
 8004812:	d00b      	beq.n	800482c <setRotation+0x33c>
 8004814:	f249 3226 	movw	r2, #37670	; 0x9326
 8004818:	4293      	cmp	r3, r2
 800481a:	dc47      	bgt.n	80048ac <setRotation+0x3bc>
 800481c:	f245 4220 	movw	r2, #21536	; 0x5420
 8004820:	4293      	cmp	r3, r2
 8004822:	d003      	beq.n	800482c <setRotation+0x33c>
 8004824:	f247 7293 	movw	r2, #30611	; 0x7793
 8004828:	4293      	cmp	r3, r2
 800482a:	d13f      	bne.n	80048ac <setRotation+0x3bc>
#endif
       case 0x5420:
       case 0x7793:
       case 0x9326:
		case 0xB509:
           _MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 800482c:	4b6a      	ldr	r3, [pc, #424]	; (80049d8 <setRotation+0x4e8>)
 800482e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004832:	801a      	strh	r2, [r3, #0]
 8004834:	4b69      	ldr	r3, [pc, #420]	; (80049dc <setRotation+0x4ec>)
 8004836:	f240 2201 	movw	r2, #513	; 0x201
 800483a:	801a      	strh	r2, [r3, #0]
 800483c:	4b68      	ldr	r3, [pc, #416]	; (80049e0 <setRotation+0x4f0>)
 800483e:	f240 2202 	movw	r2, #514	; 0x202
 8004842:	801a      	strh	r2, [r3, #0]
 8004844:	4b67      	ldr	r3, [pc, #412]	; (80049e4 <setRotation+0x4f4>)
 8004846:	f44f 7204 	mov.w	r2, #528	; 0x210
 800484a:	801a      	strh	r2, [r3, #0]
 800484c:	4b66      	ldr	r3, [pc, #408]	; (80049e8 <setRotation+0x4f8>)
 800484e:	f240 2211 	movw	r2, #529	; 0x211
 8004852:	801a      	strh	r2, [r3, #0]
 8004854:	4b65      	ldr	r3, [pc, #404]	; (80049ec <setRotation+0x4fc>)
 8004856:	f240 2212 	movw	r2, #530	; 0x212
 800485a:	801a      	strh	r2, [r3, #0]
 800485c:	4b64      	ldr	r3, [pc, #400]	; (80049f0 <setRotation+0x500>)
 800485e:	f240 2213 	movw	r2, #531	; 0x213
 8004862:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8004864:	7afb      	ldrb	r3, [r7, #11]
 8004866:	b25b      	sxtb	r3, r3
 8004868:	b29b      	uxth	r3, r3
 800486a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800486e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004872:	823b      	strh	r3, [r7, #16]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 8004874:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8004878:	82bb      	strh	r3, [r7, #20]
           if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 800487a:	4b56      	ldr	r3, [pc, #344]	; (80049d4 <setRotation+0x4e4>)
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	f249 3226 	movw	r2, #37670	; 0x9326
 8004882:	4293      	cmp	r3, r2
 8004884:	d005      	beq.n	8004892 <setRotation+0x3a2>
 8004886:	4b53      	ldr	r3, [pc, #332]	; (80049d4 <setRotation+0x4e4>)
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	f245 4220 	movw	r2, #21536	; 0x5420
 800488e:	4293      	cmp	r3, r2
 8004890:	d102      	bne.n	8004898 <setRotation+0x3a8>
 8004892:	8abb      	ldrh	r3, [r7, #20]
 8004894:	085b      	lsrs	r3, r3, #1
 8004896:	82bb      	strh	r3, [r7, #20]
           WriteCmdData(0x400, GS | NL);
 8004898:	8a3a      	ldrh	r2, [r7, #16]
 800489a:	8abb      	ldrh	r3, [r7, #20]
 800489c:	4313      	orrs	r3, r2
 800489e:	b29b      	uxth	r3, r3
 80048a0:	4619      	mov	r1, r3
 80048a2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80048a6:	f7fd fbbe 	bl	8002026 <WriteCmdData>
           goto common_SS;
 80048aa:	e024      	b.n	80048f6 <setRotation+0x406>
       default:
           _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 80048ac:	4b4a      	ldr	r3, [pc, #296]	; (80049d8 <setRotation+0x4e8>)
 80048ae:	2220      	movs	r2, #32
 80048b0:	801a      	strh	r2, [r3, #0]
 80048b2:	4b4a      	ldr	r3, [pc, #296]	; (80049dc <setRotation+0x4ec>)
 80048b4:	2221      	movs	r2, #33	; 0x21
 80048b6:	801a      	strh	r2, [r3, #0]
 80048b8:	4b49      	ldr	r3, [pc, #292]	; (80049e0 <setRotation+0x4f0>)
 80048ba:	2222      	movs	r2, #34	; 0x22
 80048bc:	801a      	strh	r2, [r3, #0]
 80048be:	4b49      	ldr	r3, [pc, #292]	; (80049e4 <setRotation+0x4f4>)
 80048c0:	2250      	movs	r2, #80	; 0x50
 80048c2:	801a      	strh	r2, [r3, #0]
 80048c4:	4b48      	ldr	r3, [pc, #288]	; (80049e8 <setRotation+0x4f8>)
 80048c6:	2251      	movs	r2, #81	; 0x51
 80048c8:	801a      	strh	r2, [r3, #0]
 80048ca:	4b48      	ldr	r3, [pc, #288]	; (80049ec <setRotation+0x4fc>)
 80048cc:	2252      	movs	r2, #82	; 0x52
 80048ce:	801a      	strh	r2, [r3, #0]
 80048d0:	4b47      	ldr	r3, [pc, #284]	; (80049f0 <setRotation+0x500>)
 80048d2:	2253      	movs	r2, #83	; 0x53
 80048d4:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 80048d6:	7afb      	ldrb	r3, [r7, #11]
 80048d8:	b25b      	sxtb	r3, r3
 80048da:	b29b      	uxth	r3, r3
 80048dc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80048e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80048e4:	823b      	strh	r3, [r7, #16]
           WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 80048e6:	8a3b      	ldrh	r3, [r7, #16]
 80048e8:	f443 531c 	orr.w	r3, r3, #9984	; 0x2700
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	4619      	mov	r1, r3
 80048f0:	2060      	movs	r0, #96	; 0x60
 80048f2:	f7fd fb98 	bl	8002026 <WriteCmdData>
         common_SS:
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 80048f6:	7afb      	ldrb	r3, [r7, #11]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004900:	81fb      	strh	r3, [r7, #14]
           WriteCmdData(0x01, SS_v);     // set Driver Output Control
 8004902:	89fb      	ldrh	r3, [r7, #14]
 8004904:	4619      	mov	r1, r3
 8004906:	2001      	movs	r0, #1
 8004908:	f7fd fb8d 	bl	8002026 <WriteCmdData>
         common_ORG:
           ORG = (val & 0x20) ? (1 << 3) : 0;
 800490c:	7afb      	ldrb	r3, [r7, #11]
 800490e:	109b      	asrs	r3, r3, #2
 8004910:	b29b      	uxth	r3, r3
 8004912:	f003 0308 	and.w	r3, r3, #8
 8004916:	82fb      	strh	r3, [r7, #22]
               if (rotation == 1 || rotation == 2) {
                   val ^= 0x08;        // change BGR bit for LANDSCAPE and PORTRAIT_REV
               }
           }
#endif
           if (val & 0x08)
 8004918:	7afb      	ldrb	r3, [r7, #11]
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <setRotation+0x43a>
               ORG |= 0x1000;  //BGR
 8004922:	8afb      	ldrh	r3, [r7, #22]
 8004924:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004928:	82fb      	strh	r3, [r7, #22]
           _lcd_madctl = ORG | 0x0030;
 800492a:	8afb      	ldrh	r3, [r7, #22]
 800492c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004930:	b29a      	uxth	r2, r3
 8004932:	4b27      	ldr	r3, [pc, #156]	; (80049d0 <setRotation+0x4e0>)
 8004934:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 8004936:	4b26      	ldr	r3, [pc, #152]	; (80049d0 <setRotation+0x4e0>)
 8004938:	881b      	ldrh	r3, [r3, #0]
 800493a:	4619      	mov	r1, r3
 800493c:	2003      	movs	r0, #3
 800493e:	f7fd fb72 	bl	8002026 <WriteCmdData>
           break;
 8004942:	bf00      	nop
           WriteCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
           break;
#endif
		}
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 8004944:	4b2b      	ldr	r3, [pc, #172]	; (80049f4 <setRotation+0x504>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d023      	beq.n	8004998 <setRotation+0x4a8>
 8004950:	4b29      	ldr	r3, [pc, #164]	; (80049f8 <setRotation+0x508>)
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004958:	2b00      	cmp	r3, #0
 800495a:	d11d      	bne.n	8004998 <setRotation+0x4a8>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 800495c:	4b1e      	ldr	r3, [pc, #120]	; (80049d8 <setRotation+0x4e8>)
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	81bb      	strh	r3, [r7, #12]
 8004962:	4b1e      	ldr	r3, [pc, #120]	; (80049dc <setRotation+0x4ec>)
 8004964:	881a      	ldrh	r2, [r3, #0]
 8004966:	4b1c      	ldr	r3, [pc, #112]	; (80049d8 <setRotation+0x4e8>)
 8004968:	801a      	strh	r2, [r3, #0]
 800496a:	4a1c      	ldr	r2, [pc, #112]	; (80049dc <setRotation+0x4ec>)
 800496c:	89bb      	ldrh	r3, [r7, #12]
 800496e:	8013      	strh	r3, [r2, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 8004970:	4b1c      	ldr	r3, [pc, #112]	; (80049e4 <setRotation+0x4f4>)
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	81bb      	strh	r3, [r7, #12]
 8004976:	4b1d      	ldr	r3, [pc, #116]	; (80049ec <setRotation+0x4fc>)
 8004978:	881a      	ldrh	r2, [r3, #0]
 800497a:	4b1a      	ldr	r3, [pc, #104]	; (80049e4 <setRotation+0x4f4>)
 800497c:	801a      	strh	r2, [r3, #0]
 800497e:	4a1b      	ldr	r2, [pc, #108]	; (80049ec <setRotation+0x4fc>)
 8004980:	89bb      	ldrh	r3, [r7, #12]
 8004982:	8013      	strh	r3, [r2, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 8004984:	4b18      	ldr	r3, [pc, #96]	; (80049e8 <setRotation+0x4f8>)
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	81bb      	strh	r3, [r7, #12]
 800498a:	4b19      	ldr	r3, [pc, #100]	; (80049f0 <setRotation+0x500>)
 800498c:	881a      	ldrh	r2, [r3, #0]
 800498e:	4b16      	ldr	r3, [pc, #88]	; (80049e8 <setRotation+0x4f8>)
 8004990:	801a      	strh	r2, [r3, #0]
 8004992:	4a17      	ldr	r2, [pc, #92]	; (80049f0 <setRotation+0x500>)
 8004994:	89bb      	ldrh	r3, [r7, #12]
 8004996:	8013      	strh	r3, [r2, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 8004998:	f7fd fa7e 	bl	8001e98 <width>
 800499c:	4603      	mov	r3, r0
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	b21c      	sxth	r4, r3
 80049a4:	f7fd fa84 	bl	8001eb0 <height>
 80049a8:	4603      	mov	r3, r0
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	b21b      	sxth	r3, r3
 80049b0:	4622      	mov	r2, r4
 80049b2:	2100      	movs	r1, #0
 80049b4:	2000      	movs	r0, #0
 80049b6:	f000 f927 	bl	8004c08 <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 80049ba:	2200      	movs	r2, #0
 80049bc:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80049c0:	2000      	movs	r0, #0
 80049c2:	f000 fa45 	bl	8004e50 <vertScroll>
}
 80049c6:	bf00      	nop
 80049c8:	371c      	adds	r7, #28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd90      	pop	{r4, r7, pc}
 80049ce:	bf00      	nop
 80049d0:	200054ee 	.word	0x200054ee
 80049d4:	200054e8 	.word	0x200054e8
 80049d8:	200054e2 	.word	0x200054e2
 80049dc:	200054e0 	.word	0x200054e0
 80049e0:	200054d8 	.word	0x200054d8
 80049e4:	200054e4 	.word	0x200054e4
 80049e8:	200054ec 	.word	0x200054ec
 80049ec:	200054dc 	.word	0x200054dc
 80049f0:	200054e6 	.word	0x200054e6
 80049f4:	200000d2 	.word	0x200000d2
 80049f8:	200054da 	.word	0x200054da

080049fc <drawPixel>:


void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 80049fc:	b590      	push	{r4, r7, lr}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	80fb      	strh	r3, [r7, #6]
 8004a06:	460b      	mov	r3, r1
 8004a08:	80bb      	strh	r3, [r7, #4]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	807b      	strh	r3, [r7, #2]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 8004a0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f2c0 80e7 	blt.w	8004be6 <drawPixel+0x1ea>
 8004a18:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f2c0 80e2 	blt.w	8004be6 <drawPixel+0x1ea>
 8004a22:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8004a26:	f7fd fa37 	bl	8001e98 <width>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	429c      	cmp	r4, r3
 8004a2e:	f280 80da 	bge.w	8004be6 <drawPixel+0x1ea>
 8004a32:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8004a36:	f7fd fa3b 	bl	8001eb0 <height>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	429c      	cmp	r4, r3
 8004a3e:	f280 80d2 	bge.w	8004be6 <drawPixel+0x1ea>
       return;
#if defined(SUPPORT_9488_555)
   if (is555) color = color565_to_555(color);
 8004a42:	4b6b      	ldr	r3, [pc, #428]	; (8004bf0 <drawPixel+0x1f4>)
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d005      	beq.n	8004a56 <drawPixel+0x5a>
 8004a4a:	887b      	ldrh	r3, [r7, #2]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fd fa3b 	bl	8001ec8 <color565_to_555>
 8004a52:	4603      	mov	r3, r0
 8004a54:	807b      	strh	r3, [r7, #2]
#endif
   setAddrWindow(x, y, x, y);
 8004a56:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004a5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004a5e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004a62:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004a66:	f000 f8cf 	bl	8004c08 <setAddrWindow>
//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
   if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 8004a6a:	4b62      	ldr	r3, [pc, #392]	; (8004bf4 <drawPixel+0x1f8>)
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 80b1 	beq.w	8004bd6 <drawPixel+0x1da>
 8004a74:	2101      	movs	r1, #1
 8004a76:	4860      	ldr	r0, [pc, #384]	; (8004bf8 <drawPixel+0x1fc>)
 8004a78:	f7fd f9c0 	bl	8001dfc <PIN_LOW>
 8004a7c:	2110      	movs	r1, #16
 8004a7e:	485f      	ldr	r0, [pc, #380]	; (8004bfc <drawPixel+0x200>)
 8004a80:	f7fd f9bc 	bl	8001dfc <PIN_LOW>
 8004a84:	4b5e      	ldr	r3, [pc, #376]	; (8004c00 <drawPixel+0x204>)
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	0a1b      	lsrs	r3, r3, #8
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	73fb      	strb	r3, [r7, #15]
 8004a8e:	4b5c      	ldr	r3, [pc, #368]	; (8004c00 <drawPixel+0x204>)
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	73bb      	strb	r3, [r7, #14]
 8004a94:	4b59      	ldr	r3, [pc, #356]	; (8004bfc <drawPixel+0x200>)
 8004a96:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8004a9a:	619a      	str	r2, [r3, #24]
 8004a9c:	4b56      	ldr	r3, [pc, #344]	; (8004bf8 <drawPixel+0x1fc>)
 8004a9e:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8004aa2:	619a      	str	r2, [r3, #24]
 8004aa4:	4b57      	ldr	r3, [pc, #348]	; (8004c04 <drawPixel+0x208>)
 8004aa6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004aaa:	619a      	str	r2, [r3, #24]
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
 8004ab6:	021b      	lsls	r3, r3, #8
 8004ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004abc:	431a      	orrs	r2, r3
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
 8004ac0:	025b      	lsls	r3, r3, #9
 8004ac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	4b4c      	ldr	r3, [pc, #304]	; (8004bfc <drawPixel+0x200>)
 8004aca:	619a      	str	r2, [r3, #24]
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	011b      	lsls	r3, r3, #4
 8004ad0:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8004ad4:	7bfb      	ldrb	r3, [r7, #15]
 8004ad6:	105b      	asrs	r3, r3, #1
 8004ad8:	f003 0310 	and.w	r3, r3, #16
 8004adc:	431a      	orrs	r2, r3
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	f003 0320 	and.w	r3, r3, #32
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
 8004aea:	f003 0308 	and.w	r3, r3, #8
 8004aee:	431a      	orrs	r2, r3
 8004af0:	4b41      	ldr	r3, [pc, #260]	; (8004bf8 <drawPixel+0x1fc>)
 8004af2:	619a      	str	r2, [r3, #24]
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	019b      	lsls	r3, r3, #6
 8004af8:	4a42      	ldr	r2, [pc, #264]	; (8004c04 <drawPixel+0x208>)
 8004afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afe:	6193      	str	r3, [r2, #24]
 8004b00:	2102      	movs	r1, #2
 8004b02:	483e      	ldr	r0, [pc, #248]	; (8004bfc <drawPixel+0x200>)
 8004b04:	f7fd f97a 	bl	8001dfc <PIN_LOW>
 8004b08:	2102      	movs	r1, #2
 8004b0a:	483c      	ldr	r0, [pc, #240]	; (8004bfc <drawPixel+0x200>)
 8004b0c:	f7fd f976 	bl	8001dfc <PIN_LOW>
 8004b10:	2102      	movs	r1, #2
 8004b12:	483a      	ldr	r0, [pc, #232]	; (8004bfc <drawPixel+0x200>)
 8004b14:	f7fd f972 	bl	8001dfc <PIN_LOW>
 8004b18:	2102      	movs	r1, #2
 8004b1a:	4838      	ldr	r0, [pc, #224]	; (8004bfc <drawPixel+0x200>)
 8004b1c:	f7fd f97e 	bl	8001e1c <PIN_HIGH>
 8004b20:	2102      	movs	r1, #2
 8004b22:	4836      	ldr	r0, [pc, #216]	; (8004bfc <drawPixel+0x200>)
 8004b24:	f7fd f97a 	bl	8001e1c <PIN_HIGH>
 8004b28:	4b34      	ldr	r3, [pc, #208]	; (8004bfc <drawPixel+0x200>)
 8004b2a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8004b2e:	619a      	str	r2, [r3, #24]
 8004b30:	4b31      	ldr	r3, [pc, #196]	; (8004bf8 <drawPixel+0x1fc>)
 8004b32:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8004b36:	619a      	str	r2, [r3, #24]
 8004b38:	4b32      	ldr	r3, [pc, #200]	; (8004c04 <drawPixel+0x208>)
 8004b3a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004b3e:	619a      	str	r2, [r3, #24]
 8004b40:	7bbb      	ldrb	r3, [r7, #14]
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8004b48:	7bbb      	ldrb	r3, [r7, #14]
 8004b4a:	021b      	lsls	r3, r3, #8
 8004b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b50:	431a      	orrs	r2, r3
 8004b52:	7bbb      	ldrb	r3, [r7, #14]
 8004b54:	025b      	lsls	r3, r3, #9
 8004b56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	4b27      	ldr	r3, [pc, #156]	; (8004bfc <drawPixel+0x200>)
 8004b5e:	619a      	str	r2, [r3, #24]
 8004b60:	7bbb      	ldrb	r3, [r7, #14]
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8004b68:	7bbb      	ldrb	r3, [r7, #14]
 8004b6a:	105b      	asrs	r3, r3, #1
 8004b6c:	f003 0310 	and.w	r3, r3, #16
 8004b70:	431a      	orrs	r2, r3
 8004b72:	7bbb      	ldrb	r3, [r7, #14]
 8004b74:	005b      	lsls	r3, r3, #1
 8004b76:	f003 0320 	and.w	r3, r3, #32
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	7bbb      	ldrb	r3, [r7, #14]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	431a      	orrs	r2, r3
 8004b84:	4b1c      	ldr	r3, [pc, #112]	; (8004bf8 <drawPixel+0x1fc>)
 8004b86:	619a      	str	r2, [r3, #24]
 8004b88:	7bbb      	ldrb	r3, [r7, #14]
 8004b8a:	019b      	lsls	r3, r3, #6
 8004b8c:	4a1d      	ldr	r2, [pc, #116]	; (8004c04 <drawPixel+0x208>)
 8004b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b92:	6193      	str	r3, [r2, #24]
 8004b94:	2102      	movs	r1, #2
 8004b96:	4819      	ldr	r0, [pc, #100]	; (8004bfc <drawPixel+0x200>)
 8004b98:	f7fd f930 	bl	8001dfc <PIN_LOW>
 8004b9c:	2102      	movs	r1, #2
 8004b9e:	4817      	ldr	r0, [pc, #92]	; (8004bfc <drawPixel+0x200>)
 8004ba0:	f7fd f92c 	bl	8001dfc <PIN_LOW>
 8004ba4:	2102      	movs	r1, #2
 8004ba6:	4815      	ldr	r0, [pc, #84]	; (8004bfc <drawPixel+0x200>)
 8004ba8:	f7fd f928 	bl	8001dfc <PIN_LOW>
 8004bac:	2102      	movs	r1, #2
 8004bae:	4813      	ldr	r0, [pc, #76]	; (8004bfc <drawPixel+0x200>)
 8004bb0:	f7fd f934 	bl	8001e1c <PIN_HIGH>
 8004bb4:	2102      	movs	r1, #2
 8004bb6:	4811      	ldr	r0, [pc, #68]	; (8004bfc <drawPixel+0x200>)
 8004bb8:	f7fd f930 	bl	8001e1c <PIN_HIGH>
 8004bbc:	2110      	movs	r1, #16
 8004bbe:	480f      	ldr	r0, [pc, #60]	; (8004bfc <drawPixel+0x200>)
 8004bc0:	f7fd f92c 	bl	8001e1c <PIN_HIGH>
 8004bc4:	887b      	ldrh	r3, [r7, #2]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fd faae 	bl	8002128 <write24>
 8004bcc:	2101      	movs	r1, #1
 8004bce:	480a      	ldr	r0, [pc, #40]	; (8004bf8 <drawPixel+0x1fc>)
 8004bd0:	f7fd f924 	bl	8001e1c <PIN_HIGH>
 8004bd4:	e008      	b.n	8004be8 <drawPixel+0x1ec>
   WriteCmdData(_MW, color);
 8004bd6:	4b0a      	ldr	r3, [pc, #40]	; (8004c00 <drawPixel+0x204>)
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	887a      	ldrh	r2, [r7, #2]
 8004bdc:	4611      	mov	r1, r2
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7fd fa21 	bl	8002026 <WriteCmdData>
 8004be4:	e000      	b.n	8004be8 <drawPixel+0x1ec>
       return;
 8004be6:	bf00      	nop
}
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd90      	pop	{r4, r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	200000ce 	.word	0x200000ce
 8004bf4:	200000cf 	.word	0x200000cf
 8004bf8:	40020400 	.word	0x40020400
 8004bfc:	40020000 	.word	0x40020000
 8004c00:	200054d8 	.word	0x200054d8
 8004c04:	40020800 	.word	0x40020800

08004c08 <setAddrWindow>:


void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 8004c08:	b590      	push	{r4, r7, lr}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	4604      	mov	r4, r0
 8004c10:	4608      	mov	r0, r1
 8004c12:	4611      	mov	r1, r2
 8004c14:	461a      	mov	r2, r3
 8004c16:	4623      	mov	r3, r4
 8004c18:	80fb      	strh	r3, [r7, #6]
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	80bb      	strh	r3, [r7, #4]
 8004c1e:	460b      	mov	r3, r1
 8004c20:	807b      	strh	r3, [r7, #2]
 8004c22:	4613      	mov	r3, r2
 8004c24:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8004c26:	4b80      	ldr	r3, [pc, #512]	; (8004e28 <setAddrWindow+0x220>)
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	f249 3227 	movw	r2, #37671	; 0x9327
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d117      	bne.n	8004c62 <setAddrWindow+0x5a>
	    if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 8004c32:	4b7e      	ldr	r3, [pc, #504]	; (8004e2c <setAddrWindow+0x224>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d107      	bne.n	8004c4a <setAddrWindow+0x42>
 8004c3a:	88bb      	ldrh	r3, [r7, #4]
 8004c3c:	3320      	adds	r3, #32
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	80bb      	strh	r3, [r7, #4]
 8004c42:	883b      	ldrh	r3, [r7, #0]
 8004c44:	3320      	adds	r3, #32
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	803b      	strh	r3, [r7, #0]
	    if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 8004c4a:	4b78      	ldr	r3, [pc, #480]	; (8004e2c <setAddrWindow+0x224>)
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d107      	bne.n	8004c62 <setAddrWindow+0x5a>
 8004c52:	88fb      	ldrh	r3, [r7, #6]
 8004c54:	3320      	adds	r3, #32
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	80fb      	strh	r3, [r7, #6]
 8004c5a:	887b      	ldrh	r3, [r7, #2]
 8004c5c:	3320      	adds	r3, #32
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	807b      	strh	r3, [r7, #2]
   }
#endif
#if 1
   if (_lcd_ID == 0x1526 && (rotation & 1)) {
 8004c62:	4b71      	ldr	r3, [pc, #452]	; (8004e28 <setAddrWindow+0x220>)
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	f241 5226 	movw	r2, #5414	; 0x1526
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d128      	bne.n	8004cc0 <setAddrWindow+0xb8>
 8004c6e:	4b6f      	ldr	r3, [pc, #444]	; (8004e2c <setAddrWindow+0x224>)
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d022      	beq.n	8004cc0 <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 8004c7a:	887a      	ldrh	r2, [r7, #2]
 8004c7c:	88fb      	ldrh	r3, [r7, #6]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	81fb      	strh	r3, [r7, #14]
 8004c84:	883a      	ldrh	r2, [r7, #0]
 8004c86:	88bb      	ldrh	r3, [r7, #4]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 8004c8e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d106      	bne.n	8004ca4 <setAddrWindow+0x9c>
 8004c96:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	803b      	strh	r3, [r7, #0]
 8004ca2:	e00d      	b.n	8004cc0 <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 8004ca4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d109      	bne.n	8004cc0 <setAddrWindow+0xb8>
 8004cac:	887a      	ldrh	r2, [r7, #2]
 8004cae:	89bb      	ldrh	r3, [r7, #12]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	807b      	strh	r3, [r7, #2]
 8004cb6:	883a      	ldrh	r2, [r7, #0]
 8004cb8:	89bb      	ldrh	r3, [r7, #12]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	803b      	strh	r3, [r7, #0]
   }
#endif
   if (_lcd_capable & MIPI_DCS_REV1) {
 8004cc0:	4b5b      	ldr	r3, [pc, #364]	; (8004e30 <setAddrWindow+0x228>)
 8004cc2:	881b      	ldrh	r3, [r3, #0]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d054      	beq.n	8004d76 <setAddrWindow+0x16e>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 8004ccc:	4b59      	ldr	r3, [pc, #356]	; (8004e34 <setAddrWindow+0x22c>)
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	b2d8      	uxtb	r0, r3
 8004cd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cd6:	121b      	asrs	r3, r3, #8
 8004cd8:	b21b      	sxth	r3, r3
 8004cda:	b2d9      	uxtb	r1, r3
 8004cdc:	88fb      	ldrh	r3, [r7, #6]
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004ce4:	121b      	asrs	r3, r3, #8
 8004ce6:	b21b      	sxth	r3, r3
 8004ce8:	b2dc      	uxtb	r4, r3
 8004cea:	887b      	ldrh	r3, [r7, #2]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	4623      	mov	r3, r4
 8004cf2:	f7fd fe3d 	bl	8002970 <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 8004cf6:	4b50      	ldr	r3, [pc, #320]	; (8004e38 <setAddrWindow+0x230>)
 8004cf8:	881b      	ldrh	r3, [r3, #0]
 8004cfa:	b2d8      	uxtb	r0, r3
 8004cfc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004d00:	121b      	asrs	r3, r3, #8
 8004d02:	b21b      	sxth	r3, r3
 8004d04:	b2d9      	uxtb	r1, r3
 8004d06:	88bb      	ldrh	r3, [r7, #4]
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004d0e:	121b      	asrs	r3, r3, #8
 8004d10:	b21b      	sxth	r3, r3
 8004d12:	b2dc      	uxtb	r4, r3
 8004d14:	883b      	ldrh	r3, [r7, #0]
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	4623      	mov	r3, r4
 8004d1c:	f7fd fe28 	bl	8002970 <WriteCmdParam4>
       if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 8004d20:	4b46      	ldr	r3, [pc, #280]	; (8004e3c <setAddrWindow+0x234>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d07b      	beq.n	8004e20 <setAddrWindow+0x218>
 8004d28:	4b3f      	ldr	r3, [pc, #252]	; (8004e28 <setAddrWindow+0x220>)
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	2b65      	cmp	r3, #101	; 0x65
 8004d2e:	d177      	bne.n	8004e20 <setAddrWindow+0x218>
           uint8_t d[2];
           d[0] = x >> 8; d[1] = x;
 8004d30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d34:	121b      	asrs	r3, r3, #8
 8004d36:	b21b      	sxth	r3, r3
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	723b      	strb	r3, [r7, #8]
 8004d3c:	88fb      	ldrh	r3, [r7, #6]
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 8004d42:	4b3f      	ldr	r3, [pc, #252]	; (8004e40 <setAddrWindow+0x238>)
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	f107 0208 	add.w	r2, r7, #8
 8004d4a:	2102      	movs	r1, #2
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7fd fc41 	bl	80025d4 <WriteCmdParamN>
           d[0] = y >> 8; d[1] = y;
 8004d52:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004d56:	121b      	asrs	r3, r3, #8
 8004d58:	b21b      	sxth	r3, r3
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	723b      	strb	r3, [r7, #8]
 8004d5e:	88bb      	ldrh	r3, [r7, #4]
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MP, 2, d);
 8004d64:	4b37      	ldr	r3, [pc, #220]	; (8004e44 <setAddrWindow+0x23c>)
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	f107 0208 	add.w	r2, r7, #8
 8004d6c:	2102      	movs	r1, #2
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fd fc30 	bl	80025d4 <WriteCmdParamN>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 8004d74:	e054      	b.n	8004e20 <setAddrWindow+0x218>
       WriteCmdData(_MC, x);
 8004d76:	4b32      	ldr	r3, [pc, #200]	; (8004e40 <setAddrWindow+0x238>)
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	88fa      	ldrh	r2, [r7, #6]
 8004d7c:	4611      	mov	r1, r2
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fd f951 	bl	8002026 <WriteCmdData>
       WriteCmdData(_MP, y);
 8004d84:	4b2f      	ldr	r3, [pc, #188]	; (8004e44 <setAddrWindow+0x23c>)
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	88ba      	ldrh	r2, [r7, #4]
 8004d8a:	4611      	mov	r1, r2
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fd f94a 	bl	8002026 <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 8004d92:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004d96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d105      	bne.n	8004daa <setAddrWindow+0x1a2>
 8004d9e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004da2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d03a      	beq.n	8004e20 <setAddrWindow+0x218>
           if (_lcd_capable & XSA_XEA_16BIT) {
 8004daa:	4b21      	ldr	r3, [pc, #132]	; (8004e30 <setAddrWindow+0x228>)
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d018      	beq.n	8004de8 <setAddrWindow+0x1e0>
               if (rotation & 1)
 8004db6:	4b1d      	ldr	r3, [pc, #116]	; (8004e2c <setAddrWindow+0x224>)
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d009      	beq.n	8004dd6 <setAddrWindow+0x1ce>
                   y1 = y = (y1 << 8) | y;
 8004dc2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004dc6:	021b      	lsls	r3, r3, #8
 8004dc8:	b21a      	sxth	r2, r3
 8004dca:	88bb      	ldrh	r3, [r7, #4]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	80bb      	strh	r3, [r7, #4]
 8004dd0:	88bb      	ldrh	r3, [r7, #4]
 8004dd2:	803b      	strh	r3, [r7, #0]
 8004dd4:	e008      	b.n	8004de8 <setAddrWindow+0x1e0>
                   x1 = x = (x1 << 8) | x;
 8004dd6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004dda:	021b      	lsls	r3, r3, #8
 8004ddc:	b21a      	sxth	r2, r3
 8004dde:	88fb      	ldrh	r3, [r7, #6]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	80fb      	strh	r3, [r7, #6]
 8004de4:	88fb      	ldrh	r3, [r7, #6]
 8004de6:	807b      	strh	r3, [r7, #2]
           WriteCmdData(_SC, x);
 8004de8:	4b12      	ldr	r3, [pc, #72]	; (8004e34 <setAddrWindow+0x22c>)
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	88fa      	ldrh	r2, [r7, #6]
 8004dee:	4611      	mov	r1, r2
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7fd f918 	bl	8002026 <WriteCmdData>
           WriteCmdData(_SP, y);
 8004df6:	4b10      	ldr	r3, [pc, #64]	; (8004e38 <setAddrWindow+0x230>)
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	88ba      	ldrh	r2, [r7, #4]
 8004dfc:	4611      	mov	r1, r2
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fd f911 	bl	8002026 <WriteCmdData>
           WriteCmdData(_EC, x1);
 8004e04:	4b10      	ldr	r3, [pc, #64]	; (8004e48 <setAddrWindow+0x240>)
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	887a      	ldrh	r2, [r7, #2]
 8004e0a:	4611      	mov	r1, r2
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7fd f90a 	bl	8002026 <WriteCmdData>
           WriteCmdData(_EP, y1);
 8004e12:	4b0e      	ldr	r3, [pc, #56]	; (8004e4c <setAddrWindow+0x244>)
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	883a      	ldrh	r2, [r7, #0]
 8004e18:	4611      	mov	r1, r2
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fd f903 	bl	8002026 <WriteCmdData>
}
 8004e20:	bf00      	nop
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd90      	pop	{r4, r7, pc}
 8004e28:	200054e8 	.word	0x200054e8
 8004e2c:	200000d2 	.word	0x200000d2
 8004e30:	200054da 	.word	0x200054da
 8004e34:	200054e4 	.word	0x200054e4
 8004e38:	200054dc 	.word	0x200054dc
 8004e3c:	200000cd 	.word	0x200000cd
 8004e40:	200054e2 	.word	0x200054e2
 8004e44:	200054e0 	.word	0x200054e0
 8004e48:	200054ec 	.word	0x200054ec
 8004e4c:	200054e6 	.word	0x200054e6

08004e50 <vertScroll>:


void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	4603      	mov	r3, r0
 8004e58:	80fb      	strh	r3, [r7, #6]
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	80bb      	strh	r3, [r7, #4]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	807b      	strh	r3, [r7, #2]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8004e62:	4b89      	ldr	r3, [pc, #548]	; (8005088 <vertScroll+0x238>)
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	f249 3227 	movw	r2, #37671	; 0x9327
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d10b      	bne.n	8004e86 <vertScroll+0x36>
	    if (rotation == 2 || rotation == 3) top += OFFSET_9327;
 8004e6e:	4b87      	ldr	r3, [pc, #540]	; (800508c <vertScroll+0x23c>)
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d003      	beq.n	8004e7e <vertScroll+0x2e>
 8004e76:	4b85      	ldr	r3, [pc, #532]	; (800508c <vertScroll+0x23c>)
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d103      	bne.n	8004e86 <vertScroll+0x36>
 8004e7e:	88fb      	ldrh	r3, [r7, #6]
 8004e80:	3320      	adds	r3, #32
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	80fb      	strh	r3, [r7, #6]
    }
#endif
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 8004e86:	88fa      	ldrh	r2, [r7, #6]
 8004e88:	88bb      	ldrh	r3, [r7, #4]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	82fb      	strh	r3, [r7, #22]
    int16_t vsp;
    int16_t sea = top;
 8004e96:	88fb      	ldrh	r3, [r7, #6]
 8004e98:	827b      	strh	r3, [r7, #18]
	if (_lcd_ID == 0x9327) bfa += 32;
 8004e9a:	4b7b      	ldr	r3, [pc, #492]	; (8005088 <vertScroll+0x238>)
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	f249 3227 	movw	r2, #37671	; 0x9327
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d103      	bne.n	8004eae <vertScroll+0x5e>
 8004ea6:	8afb      	ldrh	r3, [r7, #22]
 8004ea8:	3320      	adds	r3, #32
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	82fb      	strh	r3, [r7, #22]
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 8004eae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004eb2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004eb6:	425b      	negs	r3, r3
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	dd05      	ble.n	8004ec8 <vertScroll+0x78>
 8004ebc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004ec0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	db01      	blt.n	8004ecc <vertScroll+0x7c>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	807b      	strh	r3, [r7, #2]
	vsp = top + offset; // vertical start position
 8004ecc:	88fa      	ldrh	r2, [r7, #6]
 8004ece:	887b      	ldrh	r3, [r7, #2]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	82bb      	strh	r3, [r7, #20]
    if (offset < 0)
 8004ed6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	da04      	bge.n	8004ee8 <vertScroll+0x98>
        vsp += scrollines;          //keep in unsigned range
 8004ede:	8aba      	ldrh	r2, [r7, #20]
 8004ee0:	88bb      	ldrh	r3, [r7, #4]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	82bb      	strh	r3, [r7, #20]
    sea = top + scrollines - 1;
 8004ee8:	88fa      	ldrh	r2, [r7, #6]
 8004eea:	88bb      	ldrh	r3, [r7, #4]
 8004eec:	4413      	add	r3, r2
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	827b      	strh	r3, [r7, #18]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8004ef6:	4b66      	ldr	r3, [pc, #408]	; (8005090 <vertScroll+0x240>)
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d071      	beq.n	8004fe6 <vertScroll+0x196>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 8004f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f06:	121b      	asrs	r3, r3, #8
 8004f08:	b21b      	sxth	r3, r3
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	733b      	strb	r3, [r7, #12]
        d[1] = top;
 8004f0e:	88fb      	ldrh	r3, [r7, #6]
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	737b      	strb	r3, [r7, #13]
        d[2] = scrollines >> 8; //VSA
 8004f14:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004f18:	121b      	asrs	r3, r3, #8
 8004f1a:	b21b      	sxth	r3, r3
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	73bb      	strb	r3, [r7, #14]
        d[3] = scrollines;
 8004f20:	88bb      	ldrh	r3, [r7, #4]
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	73fb      	strb	r3, [r7, #15]
        d[4] = bfa >> 8;        //BFA
 8004f26:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004f2a:	121b      	asrs	r3, r3, #8
 8004f2c:	b21b      	sxth	r3, r3
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	743b      	strb	r3, [r7, #16]
        d[5] = bfa;
 8004f32:	8afb      	ldrh	r3, [r7, #22]
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	747b      	strb	r3, [r7, #17]
        WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 8004f38:	4b56      	ldr	r3, [pc, #344]	; (8005094 <vertScroll+0x244>)
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <vertScroll+0xf4>
 8004f40:	230e      	movs	r3, #14
 8004f42:	e000      	b.n	8004f46 <vertScroll+0xf6>
 8004f44:	2333      	movs	r3, #51	; 0x33
 8004f46:	f107 020c 	add.w	r2, r7, #12
 8004f4a:	2106      	movs	r1, #6
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7fd fb41 	bl	80025d4 <WriteCmdParamN>
//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 8004f52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004f56:	121b      	asrs	r3, r3, #8
 8004f58:	b21b      	sxth	r3, r3
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	733b      	strb	r3, [r7, #12]
        d[1] = vsp;
 8004f5e:	8abb      	ldrh	r3, [r7, #20]
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	737b      	strb	r3, [r7, #13]
        WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 8004f64:	4b4b      	ldr	r3, [pc, #300]	; (8005094 <vertScroll+0x244>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <vertScroll+0x120>
 8004f6c:	2314      	movs	r3, #20
 8004f6e:	e000      	b.n	8004f72 <vertScroll+0x122>
 8004f70:	2337      	movs	r3, #55	; 0x37
 8004f72:	f107 020c 	add.w	r2, r7, #12
 8004f76:	2102      	movs	r1, #2
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7fd fb2b 	bl	80025d4 <WriteCmdParamN>
		if (is8347) {
 8004f7e:	4b45      	ldr	r3, [pc, #276]	; (8005094 <vertScroll+0x244>)
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d01f      	beq.n	8004fc6 <vertScroll+0x176>
		    d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 8004f86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d009      	beq.n	8004fa2 <vertScroll+0x152>
 8004f8e:	4b3e      	ldr	r3, [pc, #248]	; (8005088 <vertScroll+0x238>)
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	f248 3247 	movw	r2, #33607	; 0x8347
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d101      	bne.n	8004f9e <vertScroll+0x14e>
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	e002      	b.n	8004fa4 <vertScroll+0x154>
 8004f9e:	2308      	movs	r3, #8
 8004fa0:	e000      	b.n	8004fa4 <vertScroll+0x154>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	733b      	strb	r3, [r7, #12]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 8004fa6:	4b38      	ldr	r3, [pc, #224]	; (8005088 <vertScroll+0x238>)
 8004fa8:	881b      	ldrh	r3, [r3, #0]
 8004faa:	f248 3247 	movw	r2, #33607	; 0x8347
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d101      	bne.n	8004fb6 <vertScroll+0x166>
 8004fb2:	2318      	movs	r3, #24
 8004fb4:	e000      	b.n	8004fb8 <vertScroll+0x168>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	f107 020c 	add.w	r2, r7, #12
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fd fb08 	bl	80025d4 <WriteCmdParamN>
 8004fc4:	e05d      	b.n	8005082 <vertScroll+0x232>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 8004fc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d159      	bne.n	8005082 <vertScroll+0x232>
 8004fce:	4b30      	ldr	r3, [pc, #192]	; (8005090 <vertScroll+0x240>)
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d053      	beq.n	8005082 <vertScroll+0x232>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2100      	movs	r1, #0
 8004fde:	2013      	movs	r0, #19
 8004fe0:	f7fd faf8 	bl	80025d4 <WriteCmdParamN>
 8004fe4:	e04d      	b.n	8005082 <vertScroll+0x232>
		}
		return;
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8004fe6:	4b28      	ldr	r3, [pc, #160]	; (8005088 <vertScroll+0x238>)
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	f24b 5209 	movw	r2, #46345	; 0xb509
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d027      	beq.n	8005042 <vertScroll+0x1f2>
 8004ff2:	f24b 5209 	movw	r2, #46345	; 0xb509
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	dc34      	bgt.n	8005064 <vertScroll+0x214>
 8004ffa:	f249 3226 	movw	r2, #37670	; 0x9326
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d01f      	beq.n	8005042 <vertScroll+0x1f2>
 8005002:	f249 3226 	movw	r2, #37670	; 0x9326
 8005006:	4293      	cmp	r3, r2
 8005008:	dc2c      	bgt.n	8005064 <vertScroll+0x214>
 800500a:	f247 7293 	movw	r2, #30611	; 0x7793
 800500e:	4293      	cmp	r3, r2
 8005010:	d017      	beq.n	8005042 <vertScroll+0x1f2>
 8005012:	f247 7293 	movw	r2, #30611	; 0x7793
 8005016:	4293      	cmp	r3, r2
 8005018:	dc24      	bgt.n	8005064 <vertScroll+0x214>
 800501a:	f245 4220 	movw	r2, #21536	; 0x5420
 800501e:	4293      	cmp	r3, r2
 8005020:	d00f      	beq.n	8005042 <vertScroll+0x1f2>
 8005022:	f247 7283 	movw	r2, #30595	; 0x7783
 8005026:	4293      	cmp	r3, r2
 8005028:	d11c      	bne.n	8005064 <vertScroll+0x214>
    case 0x7783:
        WriteCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 800502a:	4b1b      	ldr	r3, [pc, #108]	; (8005098 <vertScroll+0x248>)
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	4619      	mov	r1, r3
 8005030:	2061      	movs	r0, #97	; 0x61
 8005032:	f7fc fff8 	bl	8002026 <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8005036:	8abb      	ldrh	r3, [r7, #20]
 8005038:	4619      	mov	r1, r3
 800503a:	206a      	movs	r0, #106	; 0x6a
 800503c:	f7fc fff3 	bl	8002026 <WriteCmdData>
        break;
 8005040:	e01f      	b.n	8005082 <vertScroll+0x232>
#endif
	case 0x5420:
    case 0x7793:
	case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 8005042:	4b15      	ldr	r3, [pc, #84]	; (8005098 <vertScroll+0x248>)
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	f043 0302 	orr.w	r3, r3, #2
 800504a:	b29b      	uxth	r3, r3
 800504c:	4619      	mov	r1, r3
 800504e:	f240 4001 	movw	r0, #1025	; 0x401
 8005052:	f7fc ffe8 	bl	8002026 <WriteCmdData>
        WriteCmdData(0x404, vsp);       //VL#
 8005056:	8abb      	ldrh	r3, [r7, #20]
 8005058:	4619      	mov	r1, r3
 800505a:	f240 4004 	movw	r0, #1028	; 0x404
 800505e:	f7fc ffe2 	bl	8002026 <WriteCmdData>
        break;
 8005062:	e00e      	b.n	8005082 <vertScroll+0x232>
    default:
        // 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
        WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 8005064:	4b0c      	ldr	r3, [pc, #48]	; (8005098 <vertScroll+0x248>)
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	f043 0302 	orr.w	r3, r3, #2
 800506c:	b29b      	uxth	r3, r3
 800506e:	4619      	mov	r1, r3
 8005070:	2061      	movs	r0, #97	; 0x61
 8005072:	f7fc ffd8 	bl	8002026 <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8005076:	8abb      	ldrh	r3, [r7, #20]
 8005078:	4619      	mov	r1, r3
 800507a:	206a      	movs	r0, #106	; 0x6a
 800507c:	f7fc ffd3 	bl	8002026 <WriteCmdData>
        break;
 8005080:	bf00      	nop
    }
}
 8005082:	3718      	adds	r7, #24
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	200054e8 	.word	0x200054e8
 800508c:	200000d2 	.word	0x200000d2
 8005090:	200054da 	.word	0x200054da
 8005094:	200000cd 	.word	0x200000cd
 8005098:	200054de 	.word	0x200054de

0800509c <fillScreen>:
    pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}


void fillScreen(uint16_t color)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af02      	add	r7, sp, #8
 80050a2:	4603      	mov	r3, r0
 80050a4:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 80050a6:	4b08      	ldr	r3, [pc, #32]	; (80050c8 <fillScreen+0x2c>)
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	b21a      	sxth	r2, r3
 80050ac:	4b07      	ldr	r3, [pc, #28]	; (80050cc <fillScreen+0x30>)
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	b219      	sxth	r1, r3
 80050b2:	88fb      	ldrh	r3, [r7, #6]
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	460b      	mov	r3, r1
 80050b8:	2100      	movs	r1, #0
 80050ba:	2000      	movs	r0, #0
 80050bc:	f000 f8c4 	bl	8005248 <fillRect>
}
 80050c0:	bf00      	nop
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	20000008 	.word	0x20000008
 80050cc:	2000000a 	.word	0x2000000a

080050d0 <invertDisplay>:


void invertDisplay(uint8_t i)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	4603      	mov	r3, r0
 80050d8:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 80050da:	4b4c      	ldr	r3, [pc, #304]	; (800520c <invertDisplay+0x13c>)
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	bf14      	ite	ne
 80050e6:	2301      	movne	r3, #1
 80050e8:	2300      	moveq	r3, #0
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	b21a      	sxth	r2, r3
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	b21b      	sxth	r3, r3
 80050f2:	4053      	eors	r3, r2
 80050f4:	b21b      	sxth	r3, r3
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	4b45      	ldr	r3, [pc, #276]	; (8005210 <invertDisplay+0x140>)
 80050fa:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 80050fc:	4b43      	ldr	r3, [pc, #268]	; (800520c <invertDisplay+0x13c>)
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d035      	beq.n	8005174 <invertDisplay+0xa4>
        if (is8347) {
 8005108:	4b42      	ldr	r3, [pc, #264]	; (8005214 <invertDisplay+0x144>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d024      	beq.n	800515a <invertDisplay+0x8a>
            // HX8347D: 0x36 Panel Characteristic. REV_Panel
            // HX8347A: 0x36 is Display Control 10
            if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 8005110:	4b41      	ldr	r3, [pc, #260]	; (8005218 <invertDisplay+0x148>)
 8005112:	881b      	ldrh	r3, [r3, #0]
 8005114:	f248 3247 	movw	r2, #33607	; 0x8347
 8005118:	4293      	cmp	r3, r2
 800511a:	d005      	beq.n	8005128 <invertDisplay+0x58>
 800511c:	4b3e      	ldr	r3, [pc, #248]	; (8005218 <invertDisplay+0x148>)
 800511e:	881b      	ldrh	r3, [r3, #0]
 8005120:	f245 2252 	movw	r2, #21074	; 0x5252
 8005124:	4293      	cmp	r3, r2
 8005126:	d108      	bne.n	800513a <invertDisplay+0x6a>
			    val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 8005128:	4b39      	ldr	r3, [pc, #228]	; (8005210 <invertDisplay+0x140>)
 800512a:	881b      	ldrh	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <invertDisplay+0x64>
 8005130:	2306      	movs	r3, #6
 8005132:	e000      	b.n	8005136 <invertDisplay+0x66>
 8005134:	2302      	movs	r3, #2
 8005136:	73fb      	strb	r3, [r7, #15]
 8005138:	e007      	b.n	800514a <invertDisplay+0x7a>
            else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 800513a:	4b35      	ldr	r3, [pc, #212]	; (8005210 <invertDisplay+0x140>)
 800513c:	881b      	ldrh	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <invertDisplay+0x76>
 8005142:	2308      	movs	r3, #8
 8005144:	e000      	b.n	8005148 <invertDisplay+0x78>
 8005146:	230a      	movs	r3, #10
 8005148:	73fb      	strb	r3, [r7, #15]
            // HX8347: 0x01 Display Mode has diff bit mapping for A, D
            WriteCmdParamN(0x01, 1, &val);
 800514a:	f107 030f 	add.w	r3, r7, #15
 800514e:	461a      	mov	r2, r3
 8005150:	2101      	movs	r1, #1
 8005152:	2001      	movs	r0, #1
 8005154:	f7fd fa3e 	bl	80025d4 <WriteCmdParamN>
        } else
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
        return;
 8005158:	e055      	b.n	8005206 <invertDisplay+0x136>
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 800515a:	4b2d      	ldr	r3, [pc, #180]	; (8005210 <invertDisplay+0x140>)
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <invertDisplay+0x96>
 8005162:	2321      	movs	r3, #33	; 0x21
 8005164:	e000      	b.n	8005168 <invertDisplay+0x98>
 8005166:	2320      	movs	r3, #32
 8005168:	2200      	movs	r2, #0
 800516a:	2100      	movs	r1, #0
 800516c:	4618      	mov	r0, r3
 800516e:	f7fd fa31 	bl	80025d4 <WriteCmdParamN>
 8005172:	e048      	b.n	8005206 <invertDisplay+0x136>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8005174:	4b28      	ldr	r3, [pc, #160]	; (8005218 <invertDisplay+0x148>)
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	f24b 5209 	movw	r2, #46345	; 0xb509
 800517c:	4293      	cmp	r3, r2
 800517e:	d030      	beq.n	80051e2 <invertDisplay+0x112>
 8005180:	f24b 5209 	movw	r2, #46345	; 0xb509
 8005184:	4293      	cmp	r3, r2
 8005186:	dc37      	bgt.n	80051f8 <invertDisplay+0x128>
 8005188:	f249 3226 	movw	r2, #37670	; 0x9326
 800518c:	4293      	cmp	r3, r2
 800518e:	d028      	beq.n	80051e2 <invertDisplay+0x112>
 8005190:	f249 3226 	movw	r2, #37670	; 0x9326
 8005194:	4293      	cmp	r3, r2
 8005196:	dc2f      	bgt.n	80051f8 <invertDisplay+0x128>
 8005198:	f249 2225 	movw	r2, #37413	; 0x9225
 800519c:	4293      	cmp	r3, r2
 800519e:	d013      	beq.n	80051c8 <invertDisplay+0xf8>
 80051a0:	f249 2225 	movw	r2, #37413	; 0x9225
 80051a4:	4293      	cmp	r3, r2
 80051a6:	dc27      	bgt.n	80051f8 <invertDisplay+0x128>
 80051a8:	f247 7293 	movw	r2, #30611	; 0x7793
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d018      	beq.n	80051e2 <invertDisplay+0x112>
 80051b0:	f247 7293 	movw	r2, #30611	; 0x7793
 80051b4:	4293      	cmp	r3, r2
 80051b6:	dc1f      	bgt.n	80051f8 <invertDisplay+0x128>
 80051b8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80051bc:	d004      	beq.n	80051c8 <invertDisplay+0xf8>
 80051be:	f245 4220 	movw	r2, #21536	; 0x5420
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d00d      	beq.n	80051e2 <invertDisplay+0x112>
 80051c6:	e017      	b.n	80051f8 <invertDisplay+0x128>
#ifdef SUPPORT_0139
    case 0x0139:
#endif
    case 0x9225:                                        //REV is in reg(0x07) like Samsung
    case 0x0154:
        WriteCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 80051c8:	4b11      	ldr	r3, [pc, #68]	; (8005210 <invertDisplay+0x140>)
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	b21b      	sxth	r3, r3
 80051d0:	f043 0313 	orr.w	r3, r3, #19
 80051d4:	b21b      	sxth	r3, r3
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	4619      	mov	r1, r3
 80051da:	2007      	movs	r0, #7
 80051dc:	f7fc ff23 	bl	8002026 <WriteCmdData>
        break;
 80051e0:	e011      	b.n	8005206 <invertDisplay+0x136>
#endif
	case 0x5420:
    case 0x7793:
    case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 80051e2:	4b0b      	ldr	r3, [pc, #44]	; (8005210 <invertDisplay+0x140>)
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	f043 0302 	orr.w	r3, r3, #2
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	4619      	mov	r1, r3
 80051ee:	f240 4001 	movw	r0, #1025	; 0x401
 80051f2:	f7fc ff18 	bl	8002026 <WriteCmdData>
        break;
 80051f6:	e006      	b.n	8005206 <invertDisplay+0x136>
    default:
        WriteCmdData(0x61, _lcd_rev);
 80051f8:	4b05      	ldr	r3, [pc, #20]	; (8005210 <invertDisplay+0x140>)
 80051fa:	881b      	ldrh	r3, [r3, #0]
 80051fc:	4619      	mov	r1, r3
 80051fe:	2061      	movs	r0, #97	; 0x61
 8005200:	f7fc ff11 	bl	8002026 <WriteCmdData>
        break;
 8005204:	bf00      	nop
    }
}
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	200054da 	.word	0x200054da
 8005210:	200054de 	.word	0x200054de
 8005214:	200000cd 	.word	0x200000cd
 8005218:	200054e8 	.word	0x200054e8

0800521c <writePixel>:
	fillRect(x, y, w, 1, color);
}


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	4603      	mov	r3, r0
 8005224:	80fb      	strh	r3, [r7, #6]
 8005226:	460b      	mov	r3, r1
 8005228:	80bb      	strh	r3, [r7, #4]
 800522a:	4613      	mov	r3, r2
 800522c:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 800522e:	887a      	ldrh	r2, [r7, #2]
 8005230:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005234:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff fbdf 	bl	80049fc <drawPixel>
}
 800523e:	bf00      	nop
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <fillRect>:
    drawFastVLine(x+w-1, y, h, color);
}


void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8005248:	b590      	push	{r4, r7, lr}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	4604      	mov	r4, r0
 8005250:	4608      	mov	r0, r1
 8005252:	4611      	mov	r1, r2
 8005254:	461a      	mov	r2, r3
 8005256:	4623      	mov	r3, r4
 8005258:	80fb      	strh	r3, [r7, #6]
 800525a:	4603      	mov	r3, r0
 800525c:	80bb      	strh	r3, [r7, #4]
 800525e:	460b      	mov	r3, r1
 8005260:	807b      	strh	r3, [r7, #2]
 8005262:	4613      	mov	r3, r2
 8005264:	803b      	strh	r3, [r7, #0]
    int16_t end;
#if defined(SUPPORT_9488_555)
    if (is555) color = color565_to_555(color);
 8005266:	4b95      	ldr	r3, [pc, #596]	; (80054bc <fillRect+0x274>)
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d005      	beq.n	800527a <fillRect+0x32>
 800526e:	8c3b      	ldrh	r3, [r7, #32]
 8005270:	4618      	mov	r0, r3
 8005272:	f7fc fe29 	bl	8001ec8 <color565_to_555>
 8005276:	4603      	mov	r3, r0
 8005278:	843b      	strh	r3, [r7, #32]
#endif
    if (w < 0) {
 800527a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800527e:	2b00      	cmp	r3, #0
 8005280:	da08      	bge.n	8005294 <fillRect+0x4c>
        w = -w;
 8005282:	887b      	ldrh	r3, [r7, #2]
 8005284:	425b      	negs	r3, r3
 8005286:	b29b      	uxth	r3, r3
 8005288:	807b      	strh	r3, [r7, #2]
        x -= w;
 800528a:	88fa      	ldrh	r2, [r7, #6]
 800528c:	887b      	ldrh	r3, [r7, #2]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	b29b      	uxth	r3, r3
 8005292:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 8005294:	88fa      	ldrh	r2, [r7, #6]
 8005296:	887b      	ldrh	r3, [r7, #2]
 8005298:	4413      	add	r3, r2
 800529a:	b29b      	uxth	r3, r3
 800529c:	81fb      	strh	r3, [r7, #14]
    if (x < 0)
 800529e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	da01      	bge.n	80052aa <fillRect+0x62>
        x = 0;
 80052a6:	2300      	movs	r3, #0
 80052a8:	80fb      	strh	r3, [r7, #6]
    if (end > width())
 80052aa:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80052ae:	f7fc fdf3 	bl	8001e98 <width>
 80052b2:	4603      	mov	r3, r0
 80052b4:	429c      	cmp	r4, r3
 80052b6:	dd03      	ble.n	80052c0 <fillRect+0x78>
        end = width();
 80052b8:	f7fc fdee 	bl	8001e98 <width>
 80052bc:	4603      	mov	r3, r0
 80052be:	81fb      	strh	r3, [r7, #14]
    w = end - x;
 80052c0:	89fa      	ldrh	r2, [r7, #14]
 80052c2:	88fb      	ldrh	r3, [r7, #6]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	807b      	strh	r3, [r7, #2]
    if (h < 0) {
 80052ca:	f9b7 3000 	ldrsh.w	r3, [r7]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	da08      	bge.n	80052e4 <fillRect+0x9c>
        h = -h;
 80052d2:	883b      	ldrh	r3, [r7, #0]
 80052d4:	425b      	negs	r3, r3
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	803b      	strh	r3, [r7, #0]
        y -= h;
 80052da:	88ba      	ldrh	r2, [r7, #4]
 80052dc:	883b      	ldrh	r3, [r7, #0]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 80052e4:	88ba      	ldrh	r2, [r7, #4]
 80052e6:	883b      	ldrh	r3, [r7, #0]
 80052e8:	4413      	add	r3, r2
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	81fb      	strh	r3, [r7, #14]
    if (y < 0)
 80052ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	da01      	bge.n	80052fa <fillRect+0xb2>
        y = 0;
 80052f6:	2300      	movs	r3, #0
 80052f8:	80bb      	strh	r3, [r7, #4]
    if (end > height())
 80052fa:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80052fe:	f7fc fdd7 	bl	8001eb0 <height>
 8005302:	4603      	mov	r3, r0
 8005304:	429c      	cmp	r4, r3
 8005306:	dd03      	ble.n	8005310 <fillRect+0xc8>
        end = height();
 8005308:	f7fc fdd2 	bl	8001eb0 <height>
 800530c:	4603      	mov	r3, r0
 800530e:	81fb      	strh	r3, [r7, #14]
    h = end - y;
 8005310:	89fa      	ldrh	r2, [r7, #14]
 8005312:	88bb      	ldrh	r3, [r7, #4]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	b29b      	uxth	r3, r3
 8005318:	803b      	strh	r3, [r7, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 800531a:	88fa      	ldrh	r2, [r7, #6]
 800531c:	887b      	ldrh	r3, [r7, #2]
 800531e:	4413      	add	r3, r2
 8005320:	b29b      	uxth	r3, r3
 8005322:	3b01      	subs	r3, #1
 8005324:	b29b      	uxth	r3, r3
 8005326:	b21c      	sxth	r4, r3
 8005328:	88ba      	ldrh	r2, [r7, #4]
 800532a:	883b      	ldrh	r3, [r7, #0]
 800532c:	4413      	add	r3, r2
 800532e:	b29b      	uxth	r3, r3
 8005330:	3b01      	subs	r3, #1
 8005332:	b29b      	uxth	r3, r3
 8005334:	b21b      	sxth	r3, r3
 8005336:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800533a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800533e:	4622      	mov	r2, r4
 8005340:	f7ff fc62 	bl	8004c08 <setAddrWindow>
    CS_ACTIVE;
 8005344:	2101      	movs	r1, #1
 8005346:	485e      	ldr	r0, [pc, #376]	; (80054c0 <fillRect+0x278>)
 8005348:	f7fc fd58 	bl	8001dfc <PIN_LOW>
    WriteCmd(_MW);
 800534c:	2110      	movs	r1, #16
 800534e:	485d      	ldr	r0, [pc, #372]	; (80054c4 <fillRect+0x27c>)
 8005350:	f7fc fd54 	bl	8001dfc <PIN_LOW>
 8005354:	4b5c      	ldr	r3, [pc, #368]	; (80054c8 <fillRect+0x280>)
 8005356:	881b      	ldrh	r3, [r3, #0]
 8005358:	0a1b      	lsrs	r3, r3, #8
 800535a:	b29b      	uxth	r3, r3
 800535c:	737b      	strb	r3, [r7, #13]
 800535e:	4b5a      	ldr	r3, [pc, #360]	; (80054c8 <fillRect+0x280>)
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	733b      	strb	r3, [r7, #12]
 8005364:	4b57      	ldr	r3, [pc, #348]	; (80054c4 <fillRect+0x27c>)
 8005366:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800536a:	619a      	str	r2, [r3, #24]
 800536c:	4b54      	ldr	r3, [pc, #336]	; (80054c0 <fillRect+0x278>)
 800536e:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8005372:	619a      	str	r2, [r3, #24]
 8005374:	4b55      	ldr	r3, [pc, #340]	; (80054cc <fillRect+0x284>)
 8005376:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800537a:	619a      	str	r2, [r3, #24]
 800537c:	7b7b      	ldrb	r3, [r7, #13]
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8005384:	7b7b      	ldrb	r3, [r7, #13]
 8005386:	021b      	lsls	r3, r3, #8
 8005388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800538c:	431a      	orrs	r2, r3
 800538e:	7b7b      	ldrb	r3, [r7, #13]
 8005390:	025b      	lsls	r3, r3, #9
 8005392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005396:	431a      	orrs	r2, r3
 8005398:	4b4a      	ldr	r3, [pc, #296]	; (80054c4 <fillRect+0x27c>)
 800539a:	619a      	str	r2, [r3, #24]
 800539c:	7b7b      	ldrb	r3, [r7, #13]
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80053a4:	7b7b      	ldrb	r3, [r7, #13]
 80053a6:	105b      	asrs	r3, r3, #1
 80053a8:	f003 0310 	and.w	r3, r3, #16
 80053ac:	431a      	orrs	r2, r3
 80053ae:	7b7b      	ldrb	r3, [r7, #13]
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	f003 0320 	and.w	r3, r3, #32
 80053b6:	431a      	orrs	r2, r3
 80053b8:	7b7b      	ldrb	r3, [r7, #13]
 80053ba:	f003 0308 	and.w	r3, r3, #8
 80053be:	431a      	orrs	r2, r3
 80053c0:	4b3f      	ldr	r3, [pc, #252]	; (80054c0 <fillRect+0x278>)
 80053c2:	619a      	str	r2, [r3, #24]
 80053c4:	7b7b      	ldrb	r3, [r7, #13]
 80053c6:	019b      	lsls	r3, r3, #6
 80053c8:	4a40      	ldr	r2, [pc, #256]	; (80054cc <fillRect+0x284>)
 80053ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ce:	6193      	str	r3, [r2, #24]
 80053d0:	2102      	movs	r1, #2
 80053d2:	483c      	ldr	r0, [pc, #240]	; (80054c4 <fillRect+0x27c>)
 80053d4:	f7fc fd12 	bl	8001dfc <PIN_LOW>
 80053d8:	2102      	movs	r1, #2
 80053da:	483a      	ldr	r0, [pc, #232]	; (80054c4 <fillRect+0x27c>)
 80053dc:	f7fc fd0e 	bl	8001dfc <PIN_LOW>
 80053e0:	2102      	movs	r1, #2
 80053e2:	4838      	ldr	r0, [pc, #224]	; (80054c4 <fillRect+0x27c>)
 80053e4:	f7fc fd0a 	bl	8001dfc <PIN_LOW>
 80053e8:	2102      	movs	r1, #2
 80053ea:	4836      	ldr	r0, [pc, #216]	; (80054c4 <fillRect+0x27c>)
 80053ec:	f7fc fd16 	bl	8001e1c <PIN_HIGH>
 80053f0:	2102      	movs	r1, #2
 80053f2:	4834      	ldr	r0, [pc, #208]	; (80054c4 <fillRect+0x27c>)
 80053f4:	f7fc fd12 	bl	8001e1c <PIN_HIGH>
 80053f8:	4b32      	ldr	r3, [pc, #200]	; (80054c4 <fillRect+0x27c>)
 80053fa:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80053fe:	619a      	str	r2, [r3, #24]
 8005400:	4b2f      	ldr	r3, [pc, #188]	; (80054c0 <fillRect+0x278>)
 8005402:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8005406:	619a      	str	r2, [r3, #24]
 8005408:	4b30      	ldr	r3, [pc, #192]	; (80054cc <fillRect+0x284>)
 800540a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800540e:	619a      	str	r2, [r3, #24]
 8005410:	7b3b      	ldrb	r3, [r7, #12]
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8005418:	7b3b      	ldrb	r3, [r7, #12]
 800541a:	021b      	lsls	r3, r3, #8
 800541c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005420:	431a      	orrs	r2, r3
 8005422:	7b3b      	ldrb	r3, [r7, #12]
 8005424:	025b      	lsls	r3, r3, #9
 8005426:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800542a:	431a      	orrs	r2, r3
 800542c:	4b25      	ldr	r3, [pc, #148]	; (80054c4 <fillRect+0x27c>)
 800542e:	619a      	str	r2, [r3, #24]
 8005430:	7b3b      	ldrb	r3, [r7, #12]
 8005432:	011b      	lsls	r3, r3, #4
 8005434:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8005438:	7b3b      	ldrb	r3, [r7, #12]
 800543a:	105b      	asrs	r3, r3, #1
 800543c:	f003 0310 	and.w	r3, r3, #16
 8005440:	431a      	orrs	r2, r3
 8005442:	7b3b      	ldrb	r3, [r7, #12]
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	f003 0320 	and.w	r3, r3, #32
 800544a:	431a      	orrs	r2, r3
 800544c:	7b3b      	ldrb	r3, [r7, #12]
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	431a      	orrs	r2, r3
 8005454:	4b1a      	ldr	r3, [pc, #104]	; (80054c0 <fillRect+0x278>)
 8005456:	619a      	str	r2, [r3, #24]
 8005458:	7b3b      	ldrb	r3, [r7, #12]
 800545a:	019b      	lsls	r3, r3, #6
 800545c:	4a1b      	ldr	r2, [pc, #108]	; (80054cc <fillRect+0x284>)
 800545e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005462:	6193      	str	r3, [r2, #24]
 8005464:	2102      	movs	r1, #2
 8005466:	4817      	ldr	r0, [pc, #92]	; (80054c4 <fillRect+0x27c>)
 8005468:	f7fc fcc8 	bl	8001dfc <PIN_LOW>
 800546c:	2102      	movs	r1, #2
 800546e:	4815      	ldr	r0, [pc, #84]	; (80054c4 <fillRect+0x27c>)
 8005470:	f7fc fcc4 	bl	8001dfc <PIN_LOW>
 8005474:	2102      	movs	r1, #2
 8005476:	4813      	ldr	r0, [pc, #76]	; (80054c4 <fillRect+0x27c>)
 8005478:	f7fc fcc0 	bl	8001dfc <PIN_LOW>
 800547c:	2102      	movs	r1, #2
 800547e:	4811      	ldr	r0, [pc, #68]	; (80054c4 <fillRect+0x27c>)
 8005480:	f7fc fccc 	bl	8001e1c <PIN_HIGH>
 8005484:	2102      	movs	r1, #2
 8005486:	480f      	ldr	r0, [pc, #60]	; (80054c4 <fillRect+0x27c>)
 8005488:	f7fc fcc8 	bl	8001e1c <PIN_HIGH>
 800548c:	2110      	movs	r1, #16
 800548e:	480d      	ldr	r0, [pc, #52]	; (80054c4 <fillRect+0x27c>)
 8005490:	f7fc fcc4 	bl	8001e1c <PIN_HIGH>
    if (h > w) {
 8005494:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005498:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800549c:	429a      	cmp	r2, r3
 800549e:	dd05      	ble.n	80054ac <fillRect+0x264>
        end = h;
 80054a0:	883b      	ldrh	r3, [r7, #0]
 80054a2:	81fb      	strh	r3, [r7, #14]
        h = w;
 80054a4:	887b      	ldrh	r3, [r7, #2]
 80054a6:	803b      	strh	r3, [r7, #0]
        w = end;
 80054a8:	89fb      	ldrh	r3, [r7, #14]
 80054aa:	807b      	strh	r3, [r7, #2]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 80054ac:	8c3b      	ldrh	r3, [r7, #32]
 80054ae:	0a1b      	lsrs	r3, r3, #8
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	72fb      	strb	r3, [r7, #11]
 80054b4:	8c3b      	ldrh	r3, [r7, #32]
 80054b6:	72bb      	strb	r3, [r7, #10]
    while (h-- > 0) {
 80054b8:	e0a9      	b.n	800560e <fillRect+0x3c6>
 80054ba:	bf00      	nop
 80054bc:	200000ce 	.word	0x200000ce
 80054c0:	40020400 	.word	0x40020400
 80054c4:	40020000 	.word	0x40020000
 80054c8:	200054d8 	.word	0x200054d8
 80054cc:	40020800 	.word	0x40020800
        end = w;
 80054d0:	887b      	ldrh	r3, [r7, #2]
 80054d2:	81fb      	strh	r3, [r7, #14]
//                 write8(b);
//             } while (--end != 0);
//        } else
//#endif
        do {
            write8(hi);
 80054d4:	4b68      	ldr	r3, [pc, #416]	; (8005678 <fillRect+0x430>)
 80054d6:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80054da:	619a      	str	r2, [r3, #24]
 80054dc:	4b67      	ldr	r3, [pc, #412]	; (800567c <fillRect+0x434>)
 80054de:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80054e2:	619a      	str	r2, [r3, #24]
 80054e4:	4b66      	ldr	r3, [pc, #408]	; (8005680 <fillRect+0x438>)
 80054e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80054ea:	619a      	str	r2, [r3, #24]
 80054ec:	7afb      	ldrb	r3, [r7, #11]
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80054f4:	7afb      	ldrb	r3, [r7, #11]
 80054f6:	021b      	lsls	r3, r3, #8
 80054f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054fc:	431a      	orrs	r2, r3
 80054fe:	7afb      	ldrb	r3, [r7, #11]
 8005500:	025b      	lsls	r3, r3, #9
 8005502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005506:	431a      	orrs	r2, r3
 8005508:	4b5b      	ldr	r3, [pc, #364]	; (8005678 <fillRect+0x430>)
 800550a:	619a      	str	r2, [r3, #24]
 800550c:	7afb      	ldrb	r3, [r7, #11]
 800550e:	011b      	lsls	r3, r3, #4
 8005510:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8005514:	7afb      	ldrb	r3, [r7, #11]
 8005516:	105b      	asrs	r3, r3, #1
 8005518:	f003 0310 	and.w	r3, r3, #16
 800551c:	431a      	orrs	r2, r3
 800551e:	7afb      	ldrb	r3, [r7, #11]
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	f003 0320 	and.w	r3, r3, #32
 8005526:	431a      	orrs	r2, r3
 8005528:	7afb      	ldrb	r3, [r7, #11]
 800552a:	f003 0308 	and.w	r3, r3, #8
 800552e:	431a      	orrs	r2, r3
 8005530:	4b52      	ldr	r3, [pc, #328]	; (800567c <fillRect+0x434>)
 8005532:	619a      	str	r2, [r3, #24]
 8005534:	7afb      	ldrb	r3, [r7, #11]
 8005536:	019b      	lsls	r3, r3, #6
 8005538:	4a51      	ldr	r2, [pc, #324]	; (8005680 <fillRect+0x438>)
 800553a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553e:	6193      	str	r3, [r2, #24]
 8005540:	2102      	movs	r1, #2
 8005542:	484d      	ldr	r0, [pc, #308]	; (8005678 <fillRect+0x430>)
 8005544:	f7fc fc5a 	bl	8001dfc <PIN_LOW>
 8005548:	2102      	movs	r1, #2
 800554a:	484b      	ldr	r0, [pc, #300]	; (8005678 <fillRect+0x430>)
 800554c:	f7fc fc56 	bl	8001dfc <PIN_LOW>
 8005550:	2102      	movs	r1, #2
 8005552:	4849      	ldr	r0, [pc, #292]	; (8005678 <fillRect+0x430>)
 8005554:	f7fc fc52 	bl	8001dfc <PIN_LOW>
 8005558:	2102      	movs	r1, #2
 800555a:	4847      	ldr	r0, [pc, #284]	; (8005678 <fillRect+0x430>)
 800555c:	f7fc fc5e 	bl	8001e1c <PIN_HIGH>
 8005560:	2102      	movs	r1, #2
 8005562:	4845      	ldr	r0, [pc, #276]	; (8005678 <fillRect+0x430>)
 8005564:	f7fc fc5a 	bl	8001e1c <PIN_HIGH>
            write8(lo);
 8005568:	4b43      	ldr	r3, [pc, #268]	; (8005678 <fillRect+0x430>)
 800556a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800556e:	619a      	str	r2, [r3, #24]
 8005570:	4b42      	ldr	r3, [pc, #264]	; (800567c <fillRect+0x434>)
 8005572:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8005576:	619a      	str	r2, [r3, #24]
 8005578:	4b41      	ldr	r3, [pc, #260]	; (8005680 <fillRect+0x438>)
 800557a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800557e:	619a      	str	r2, [r3, #24]
 8005580:	7abb      	ldrb	r3, [r7, #10]
 8005582:	005b      	lsls	r3, r3, #1
 8005584:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8005588:	7abb      	ldrb	r3, [r7, #10]
 800558a:	021b      	lsls	r3, r3, #8
 800558c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005590:	431a      	orrs	r2, r3
 8005592:	7abb      	ldrb	r3, [r7, #10]
 8005594:	025b      	lsls	r3, r3, #9
 8005596:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800559a:	431a      	orrs	r2, r3
 800559c:	4b36      	ldr	r3, [pc, #216]	; (8005678 <fillRect+0x430>)
 800559e:	619a      	str	r2, [r3, #24]
 80055a0:	7abb      	ldrb	r3, [r7, #10]
 80055a2:	011b      	lsls	r3, r3, #4
 80055a4:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80055a8:	7abb      	ldrb	r3, [r7, #10]
 80055aa:	105b      	asrs	r3, r3, #1
 80055ac:	f003 0310 	and.w	r3, r3, #16
 80055b0:	431a      	orrs	r2, r3
 80055b2:	7abb      	ldrb	r3, [r7, #10]
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	f003 0320 	and.w	r3, r3, #32
 80055ba:	431a      	orrs	r2, r3
 80055bc:	7abb      	ldrb	r3, [r7, #10]
 80055be:	f003 0308 	and.w	r3, r3, #8
 80055c2:	431a      	orrs	r2, r3
 80055c4:	4b2d      	ldr	r3, [pc, #180]	; (800567c <fillRect+0x434>)
 80055c6:	619a      	str	r2, [r3, #24]
 80055c8:	7abb      	ldrb	r3, [r7, #10]
 80055ca:	019b      	lsls	r3, r3, #6
 80055cc:	4a2c      	ldr	r2, [pc, #176]	; (8005680 <fillRect+0x438>)
 80055ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d2:	6193      	str	r3, [r2, #24]
 80055d4:	2102      	movs	r1, #2
 80055d6:	4828      	ldr	r0, [pc, #160]	; (8005678 <fillRect+0x430>)
 80055d8:	f7fc fc10 	bl	8001dfc <PIN_LOW>
 80055dc:	2102      	movs	r1, #2
 80055de:	4826      	ldr	r0, [pc, #152]	; (8005678 <fillRect+0x430>)
 80055e0:	f7fc fc0c 	bl	8001dfc <PIN_LOW>
 80055e4:	2102      	movs	r1, #2
 80055e6:	4824      	ldr	r0, [pc, #144]	; (8005678 <fillRect+0x430>)
 80055e8:	f7fc fc08 	bl	8001dfc <PIN_LOW>
 80055ec:	2102      	movs	r1, #2
 80055ee:	4822      	ldr	r0, [pc, #136]	; (8005678 <fillRect+0x430>)
 80055f0:	f7fc fc14 	bl	8001e1c <PIN_HIGH>
 80055f4:	2102      	movs	r1, #2
 80055f6:	4820      	ldr	r0, [pc, #128]	; (8005678 <fillRect+0x430>)
 80055f8:	f7fc fc10 	bl	8001e1c <PIN_HIGH>
        } while (--end != 0);
 80055fc:	89fb      	ldrh	r3, [r7, #14]
 80055fe:	3b01      	subs	r3, #1
 8005600:	b29b      	uxth	r3, r3
 8005602:	81fb      	strh	r3, [r7, #14]
 8005604:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005608:	2b00      	cmp	r3, #0
 800560a:	f47f af63 	bne.w	80054d4 <fillRect+0x28c>
    while (h-- > 0) {
 800560e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005612:	b29a      	uxth	r2, r3
 8005614:	3a01      	subs	r2, #1
 8005616:	b292      	uxth	r2, r2
 8005618:	803a      	strh	r2, [r7, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	f73f af58 	bgt.w	80054d0 <fillRect+0x288>
#endif
    }
    CS_IDLE;
 8005620:	2101      	movs	r1, #1
 8005622:	4816      	ldr	r0, [pc, #88]	; (800567c <fillRect+0x434>)
 8005624:	f7fc fbfa 	bl	8001e1c <PIN_HIGH>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 8005628:	4b16      	ldr	r3, [pc, #88]	; (8005684 <fillRect+0x43c>)
 800562a:	881b      	ldrh	r3, [r3, #0]
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00b      	beq.n	800564c <fillRect+0x404>
 8005634:	4b14      	ldr	r3, [pc, #80]	; (8005688 <fillRect+0x440>)
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	f241 5226 	movw	r2, #5414	; 0x1526
 800563c:	4293      	cmp	r3, r2
 800563e:	d116      	bne.n	800566e <fillRect+0x426>
 8005640:	4b12      	ldr	r3, [pc, #72]	; (800568c <fillRect+0x444>)
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b00      	cmp	r3, #0
 800564a:	d010      	beq.n	800566e <fillRect+0x426>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 800564c:	f7fc fc24 	bl	8001e98 <width>
 8005650:	4603      	mov	r3, r0
 8005652:	3b01      	subs	r3, #1
 8005654:	b29b      	uxth	r3, r3
 8005656:	b21c      	sxth	r4, r3
 8005658:	f7fc fc2a 	bl	8001eb0 <height>
 800565c:	4603      	mov	r3, r0
 800565e:	3b01      	subs	r3, #1
 8005660:	b29b      	uxth	r3, r3
 8005662:	b21b      	sxth	r3, r3
 8005664:	4622      	mov	r2, r4
 8005666:	2100      	movs	r1, #0
 8005668:	2000      	movs	r0, #0
 800566a:	f7ff facd 	bl	8004c08 <setAddrWindow>
}
 800566e:	bf00      	nop
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	bd90      	pop	{r4, r7, pc}
 8005676:	bf00      	nop
 8005678:	40020000 	.word	0x40020000
 800567c:	40020400 	.word	0x40020400
 8005680:	40020800 	.word	0x40020800
 8005684:	200054da 	.word	0x200054da
 8005688:	200054e8 	.word	0x200054e8
 800568c:	200000d2 	.word	0x200000d2

08005690 <drawChar>:


/********************************* END TESTS  *********************************************/

void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8005690:	b590      	push	{r4, r7, lr}
 8005692:	b08b      	sub	sp, #44	; 0x2c
 8005694:	af02      	add	r7, sp, #8
 8005696:	4604      	mov	r4, r0
 8005698:	4608      	mov	r0, r1
 800569a:	4611      	mov	r1, r2
 800569c:	461a      	mov	r2, r3
 800569e:	4623      	mov	r3, r4
 80056a0:	80fb      	strh	r3, [r7, #6]
 80056a2:	4603      	mov	r3, r0
 80056a4:	80bb      	strh	r3, [r7, #4]
 80056a6:	460b      	mov	r3, r1
 80056a8:	70fb      	strb	r3, [r7, #3]
 80056aa:	4613      	mov	r3, r2
 80056ac:	803b      	strh	r3, [r7, #0]

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 80056ae:	4b56      	ldr	r3, [pc, #344]	; (8005808 <drawChar+0x178>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3308      	adds	r3, #8
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	78fa      	ldrb	r2, [r7, #3]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	70fb      	strb	r3, [r7, #3]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
 80056bc:	78fb      	ldrb	r3, [r7, #3]
 80056be:	00da      	lsls	r2, r3, #3
 80056c0:	4b51      	ldr	r3, [pc, #324]	; (8005808 <drawChar+0x178>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3304      	adds	r3, #4
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4413      	add	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
 80056cc:	4b4e      	ldr	r3, [pc, #312]	; (8005808 <drawChar+0x178>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	60fb      	str	r3, [r7, #12]

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	83fb      	strh	r3, [r7, #30]
        uint8_t  w  = pgm_read_byte(&glyph->width),
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	789b      	ldrb	r3, [r3, #2]
 80056de:	72fb      	strb	r3, [r7, #11]
                 h  = pgm_read_byte(&glyph->height);
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	78db      	ldrb	r3, [r3, #3]
 80056e4:	72bb      	strb	r3, [r7, #10]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	3305      	adds	r3, #5
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	727b      	strb	r3, [r7, #9]
                 yo = pgm_read_byte(&glyph->yOffset);
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	3306      	adds	r3, #6
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	723b      	strb	r3, [r7, #8]
        uint8_t  xx, yy, bits = 0, bit = 0;
 80056f6:	2300      	movs	r3, #0
 80056f8:	76fb      	strb	r3, [r7, #27]
 80056fa:	2300      	movs	r3, #0
 80056fc:	76bb      	strb	r3, [r7, #26]
        int16_t  xo16 = 0, yo16 = 0;
 80056fe:	2300      	movs	r3, #0
 8005700:	833b      	strh	r3, [r7, #24]
 8005702:	2300      	movs	r3, #0
 8005704:	82fb      	strh	r3, [r7, #22]

        if(size > 1) {
 8005706:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800570a:	2b01      	cmp	r3, #1
 800570c:	d905      	bls.n	800571a <drawChar+0x8a>
            xo16 = xo;
 800570e:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8005712:	833b      	strh	r3, [r7, #24]
            yo16 = yo;
 8005714:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8005718:	82fb      	strh	r3, [r7, #22]
        }

        for(yy=0; yy<h; yy++) {
 800571a:	2300      	movs	r3, #0
 800571c:	773b      	strb	r3, [r7, #28]
 800571e:	e06a      	b.n	80057f6 <drawChar+0x166>
            for(xx=0; xx<w; xx++) {
 8005720:	2300      	movs	r3, #0
 8005722:	777b      	strb	r3, [r7, #29]
 8005724:	e060      	b.n	80057e8 <drawChar+0x158>
                if(!(bit++ & 7)) {
 8005726:	7ebb      	ldrb	r3, [r7, #26]
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	76ba      	strb	r2, [r7, #26]
 800572c:	f003 0307 	and.w	r3, r3, #7
 8005730:	2b00      	cmp	r3, #0
 8005732:	d107      	bne.n	8005744 <drawChar+0xb4>
                    bits = pgm_read_byte(&bitmap[bo++]);
 8005734:	8bfb      	ldrh	r3, [r7, #30]
 8005736:	1c5a      	adds	r2, r3, #1
 8005738:	83fa      	strh	r2, [r7, #30]
 800573a:	461a      	mov	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4413      	add	r3, r2
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	76fb      	strb	r3, [r7, #27]
                }
                if(bits & 0x80) {
 8005744:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005748:	2b00      	cmp	r3, #0
 800574a:	da47      	bge.n	80057dc <drawChar+0x14c>
                    if(size == 1) {
 800574c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005750:	2b01      	cmp	r3, #1
 8005752:	d11a      	bne.n	800578a <drawChar+0xfa>
                        writePixel(x+xo+xx, y+yo+yy, color);
 8005754:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8005758:	b29a      	uxth	r2, r3
 800575a:	88fb      	ldrh	r3, [r7, #6]
 800575c:	4413      	add	r3, r2
 800575e:	b29a      	uxth	r2, r3
 8005760:	7f7b      	ldrb	r3, [r7, #29]
 8005762:	b29b      	uxth	r3, r3
 8005764:	4413      	add	r3, r2
 8005766:	b29b      	uxth	r3, r3
 8005768:	b218      	sxth	r0, r3
 800576a:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800576e:	b29a      	uxth	r2, r3
 8005770:	88bb      	ldrh	r3, [r7, #4]
 8005772:	4413      	add	r3, r2
 8005774:	b29a      	uxth	r2, r3
 8005776:	7f3b      	ldrb	r3, [r7, #28]
 8005778:	b29b      	uxth	r3, r3
 800577a:	4413      	add	r3, r2
 800577c:	b29b      	uxth	r3, r3
 800577e:	b21b      	sxth	r3, r3
 8005780:	883a      	ldrh	r2, [r7, #0]
 8005782:	4619      	mov	r1, r3
 8005784:	f7ff fd4a 	bl	800521c <writePixel>
 8005788:	e028      	b.n	80057dc <drawChar+0x14c>
                    } else {
                        fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
 800578a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800578e:	7f7b      	ldrb	r3, [r7, #29]
 8005790:	4413      	add	r3, r2
 8005792:	b29a      	uxth	r2, r3
 8005794:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005798:	b29b      	uxth	r3, r3
 800579a:	fb12 f303 	smulbb	r3, r2, r3
 800579e:	b29a      	uxth	r2, r3
 80057a0:	88fb      	ldrh	r3, [r7, #6]
 80057a2:	4413      	add	r3, r2
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	b218      	sxth	r0, r3
 80057a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80057ac:	7f3b      	ldrb	r3, [r7, #28]
 80057ae:	4413      	add	r3, r2
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	fb12 f303 	smulbb	r3, r2, r3
 80057bc:	b29a      	uxth	r2, r3
 80057be:	88bb      	ldrh	r3, [r7, #4]
 80057c0:	4413      	add	r3, r2
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	b219      	sxth	r1, r3
 80057c6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80057ca:	b21a      	sxth	r2, r3
 80057cc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80057d0:	b21c      	sxth	r4, r3
 80057d2:	883b      	ldrh	r3, [r7, #0]
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	4623      	mov	r3, r4
 80057d8:	f7ff fd36 	bl	8005248 <fillRect>
                          size, size, color);
                    }
                }
                bits <<= 1;
 80057dc:	7efb      	ldrb	r3, [r7, #27]
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	76fb      	strb	r3, [r7, #27]
            for(xx=0; xx<w; xx++) {
 80057e2:	7f7b      	ldrb	r3, [r7, #29]
 80057e4:	3301      	adds	r3, #1
 80057e6:	777b      	strb	r3, [r7, #29]
 80057e8:	7f7a      	ldrb	r2, [r7, #29]
 80057ea:	7afb      	ldrb	r3, [r7, #11]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d39a      	bcc.n	8005726 <drawChar+0x96>
        for(yy=0; yy<h; yy++) {
 80057f0:	7f3b      	ldrb	r3, [r7, #28]
 80057f2:	3301      	adds	r3, #1
 80057f4:	773b      	strb	r3, [r7, #28]
 80057f6:	7f3a      	ldrb	r2, [r7, #28]
 80057f8:	7abb      	ldrb	r3, [r7, #10]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d390      	bcc.n	8005720 <drawChar+0x90>
            }
        }

    } // End classic vs custom font
}
 80057fe:	bf00      	nop
 8005800:	bf00      	nop
 8005802:	3724      	adds	r7, #36	; 0x24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd90      	pop	{r4, r7, pc}
 8005808:	20000310 	.word	0x20000310

0800580c <write>:
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t write(uint8_t c)
{
 800580c:	b5b0      	push	{r4, r5, r7, lr}
 800580e:	b088      	sub	sp, #32
 8005810:	af02      	add	r7, sp, #8
 8005812:	4603      	mov	r3, r0
 8005814:	71fb      	strb	r3, [r7, #7]
	{

        if(c == '\n') {
 8005816:	79fb      	ldrb	r3, [r7, #7]
 8005818:	2b0a      	cmp	r3, #10
 800581a:	d112      	bne.n	8005842 <write+0x36>
            cursor_x  = 0;
 800581c:	4b46      	ldr	r3, [pc, #280]	; (8005938 <write+0x12c>)
 800581e:	2200      	movs	r2, #0
 8005820:	701a      	strb	r2, [r3, #0]
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8005822:	4b46      	ldr	r3, [pc, #280]	; (800593c <write+0x130>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	330a      	adds	r3, #10
 8005828:	781a      	ldrb	r2, [r3, #0]
            cursor_y += (int16_t)textsize *
 800582a:	4b45      	ldr	r3, [pc, #276]	; (8005940 <write+0x134>)
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	fb12 f303 	smulbb	r3, r2, r3
 8005832:	b2da      	uxtb	r2, r3
 8005834:	4b43      	ldr	r3, [pc, #268]	; (8005944 <write+0x138>)
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	4413      	add	r3, r2
 800583a:	b2da      	uxtb	r2, r3
 800583c:	4b41      	ldr	r3, [pc, #260]	; (8005944 <write+0x138>)
 800583e:	701a      	strb	r2, [r3, #0]
 8005840:	e074      	b.n	800592c <write+0x120>
        } else if(c != '\r') {
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	2b0d      	cmp	r3, #13
 8005846:	d071      	beq.n	800592c <write+0x120>
            uint8_t first = pgm_read_byte(&gfxFont->first);
 8005848:	4b3c      	ldr	r3, [pc, #240]	; (800593c <write+0x130>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	7a1b      	ldrb	r3, [r3, #8]
 800584e:	75fb      	strb	r3, [r7, #23]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 8005850:	79fa      	ldrb	r2, [r7, #7]
 8005852:	7dfb      	ldrb	r3, [r7, #23]
 8005854:	429a      	cmp	r2, r3
 8005856:	d369      	bcc.n	800592c <write+0x120>
 8005858:	4b38      	ldr	r3, [pc, #224]	; (800593c <write+0x130>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3309      	adds	r3, #9
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	79fa      	ldrb	r2, [r7, #7]
 8005862:	429a      	cmp	r2, r3
 8005864:	d862      	bhi.n	800592c <write+0x120>
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
                  &gfxFont->glyph))[c - first]);
 8005866:	79fa      	ldrb	r2, [r7, #7]
 8005868:	7dfb      	ldrb	r3, [r7, #23]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	00da      	lsls	r2, r3, #3
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 800586e:	4b33      	ldr	r3, [pc, #204]	; (800593c <write+0x130>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3304      	adds	r3, #4
                  &gfxFont->glyph))[c - first]);
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4413      	add	r3, r2
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 8005878:	613b      	str	r3, [r7, #16]
                uint8_t   w     = pgm_read_byte(&glyph->width),
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	789b      	ldrb	r3, [r3, #2]
 800587e:	73fb      	strb	r3, [r7, #15]
                          h     = pgm_read_byte(&glyph->height);
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	78db      	ldrb	r3, [r3, #3]
 8005884:	73bb      	strb	r3, [r7, #14]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 8005886:	7bfb      	ldrb	r3, [r7, #15]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d041      	beq.n	8005910 <write+0x104>
 800588c:	7bbb      	ldrb	r3, [r7, #14]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d03e      	beq.n	8005910 <write+0x104>
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	3305      	adds	r3, #5
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	b25b      	sxtb	r3, r3
 800589a:	81bb      	strh	r3, [r7, #12]
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
 800589c:	4b2a      	ldr	r3, [pc, #168]	; (8005948 <write+0x13c>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d022      	beq.n	80058ea <write+0xde>
 80058a4:	4b24      	ldr	r3, [pc, #144]	; (8005938 <write+0x12c>)
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	4619      	mov	r1, r3
 80058aa:	4b25      	ldr	r3, [pc, #148]	; (8005940 <write+0x134>)
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
 80058b6:	4413      	add	r3, r2
 80058b8:	fb03 f300 	mul.w	r3, r3, r0
 80058bc:	440b      	add	r3, r1
 80058be:	4a23      	ldr	r2, [pc, #140]	; (800594c <write+0x140>)
 80058c0:	8812      	ldrh	r2, [r2, #0]
 80058c2:	4293      	cmp	r3, r2
 80058c4:	dd11      	ble.n	80058ea <write+0xde>
                        cursor_x  = 0;
 80058c6:	4b1c      	ldr	r3, [pc, #112]	; (8005938 <write+0x12c>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	701a      	strb	r2, [r3, #0]
                        cursor_y += (int16_t)textsize *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80058cc:	4b1b      	ldr	r3, [pc, #108]	; (800593c <write+0x130>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	330a      	adds	r3, #10
 80058d2:	781a      	ldrb	r2, [r3, #0]
                        cursor_y += (int16_t)textsize *
 80058d4:	4b1a      	ldr	r3, [pc, #104]	; (8005940 <write+0x134>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	fb12 f303 	smulbb	r3, r2, r3
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	4b19      	ldr	r3, [pc, #100]	; (8005944 <write+0x138>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	4413      	add	r3, r2
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	4b17      	ldr	r3, [pc, #92]	; (8005944 <write+0x138>)
 80058e8:	701a      	strb	r2, [r3, #0]
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 80058ea:	4b13      	ldr	r3, [pc, #76]	; (8005938 <write+0x12c>)
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	b218      	sxth	r0, r3
 80058f0:	4b14      	ldr	r3, [pc, #80]	; (8005944 <write+0x138>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	b219      	sxth	r1, r3
 80058f6:	4b16      	ldr	r3, [pc, #88]	; (8005950 <write+0x144>)
 80058f8:	881d      	ldrh	r5, [r3, #0]
 80058fa:	4b16      	ldr	r3, [pc, #88]	; (8005954 <write+0x148>)
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	4a10      	ldr	r2, [pc, #64]	; (8005940 <write+0x134>)
 8005900:	7812      	ldrb	r2, [r2, #0]
 8005902:	79fc      	ldrb	r4, [r7, #7]
 8005904:	9201      	str	r2, [sp, #4]
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	462b      	mov	r3, r5
 800590a:	4622      	mov	r2, r4
 800590c:	f7ff fec0 	bl	8005690 <drawChar>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	3304      	adds	r3, #4
 8005914:	781a      	ldrb	r2, [r3, #0]
 8005916:	4b0a      	ldr	r3, [pc, #40]	; (8005940 <write+0x134>)
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	fb12 f303 	smulbb	r3, r2, r3
 800591e:	b2da      	uxtb	r2, r3
 8005920:	4b05      	ldr	r3, [pc, #20]	; (8005938 <write+0x12c>)
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	4413      	add	r3, r2
 8005926:	b2da      	uxtb	r2, r3
 8005928:	4b03      	ldr	r3, [pc, #12]	; (8005938 <write+0x12c>)
 800592a:	701a      	strb	r2, [r3, #0]
            }
        }

    }
    return 1;
 800592c:	2301      	movs	r3, #1
}
 800592e:	4618      	mov	r0, r3
 8005930:	3718      	adds	r7, #24
 8005932:	46bd      	mov	sp, r7
 8005934:	bdb0      	pop	{r4, r5, r7, pc}
 8005936:	bf00      	nop
 8005938:	200000d1 	.word	0x200000d1
 800593c:	20000310 	.word	0x20000310
 8005940:	2000000c 	.word	0x2000000c
 8005944:	200000d0 	.word	0x200000d0
 8005948:	20000012 	.word	0x20000012
 800594c:	20000008 	.word	0x20000008
 8005950:	2000000e 	.word	0x2000000e
 8005954:	20000010 	.word	0x20000010

08005958 <setFont>:
/*!
    @brief Set the font to display when print()ing, either custom or default
    @param  f  The GFXfont object, if NULL use built in 6x8 font
*/
/**************************************************************************/
void setFont(const GFXfont *f) {
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
    if(f) {            // Font struct pointer passed in?
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <setFont+0x24>
        if(!gfxFont) { // And no current font struct?
 8005966:	4b0f      	ldr	r3, [pc, #60]	; (80059a4 <setFont+0x4c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d110      	bne.n	8005990 <setFont+0x38>
            // Switching from classic to new font behavior.
            // Move cursor pos down 6 pixels so it's on baseline.
            cursor_y += 6;
 800596e:	4b0e      	ldr	r3, [pc, #56]	; (80059a8 <setFont+0x50>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	3306      	adds	r3, #6
 8005974:	b2da      	uxtb	r2, r3
 8005976:	4b0c      	ldr	r3, [pc, #48]	; (80059a8 <setFont+0x50>)
 8005978:	701a      	strb	r2, [r3, #0]
 800597a:	e009      	b.n	8005990 <setFont+0x38>
        }
    } else if(gfxFont) { // NULL passed.  Current font struct defined?
 800597c:	4b09      	ldr	r3, [pc, #36]	; (80059a4 <setFont+0x4c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d005      	beq.n	8005990 <setFont+0x38>
        // Switching from new to classic font behavior.
        // Move cursor pos up 6 pixels so it's at top-left of char.
        cursor_y -= 6;
 8005984:	4b08      	ldr	r3, [pc, #32]	; (80059a8 <setFont+0x50>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	3b06      	subs	r3, #6
 800598a:	b2da      	uxtb	r2, r3
 800598c:	4b06      	ldr	r3, [pc, #24]	; (80059a8 <setFont+0x50>)
 800598e:	701a      	strb	r2, [r3, #0]
    }
    gfxFont = (GFXfont *)f;
 8005990:	4a04      	ldr	r2, [pc, #16]	; (80059a4 <setFont+0x4c>)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6013      	str	r3, [r2, #0]
}
 8005996:	bf00      	nop
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	20000310 	.word	0x20000310
 80059a8:	200000d0 	.word	0x200000d0

080059ac <printnewtstr>:
    @param	txtsize	The size of de text
    @param	str	A point to the string
*/
/**************************************************************************/
void printnewtstr (int row, uint16_t txtcolor, const GFXfont *f, uint8_t txtsize, uint8_t *str)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	607a      	str	r2, [r7, #4]
 80059b6:	461a      	mov	r2, r3
 80059b8:	460b      	mov	r3, r1
 80059ba:	817b      	strh	r3, [r7, #10]
 80059bc:	4613      	mov	r3, r2
 80059be:	727b      	strb	r3, [r7, #9]
	setFont(f);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7ff ffc9 	bl	8005958 <setFont>
	textcolor = txtcolor;
 80059c6:	4a11      	ldr	r2, [pc, #68]	; (8005a0c <printnewtstr+0x60>)
 80059c8:	897b      	ldrh	r3, [r7, #10]
 80059ca:	8013      	strh	r3, [r2, #0]
	textsize = (txtsize > 0) ? txtsize : 1;
 80059cc:	7a7b      	ldrb	r3, [r7, #9]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <printnewtstr+0x2a>
 80059d2:	7a7b      	ldrb	r3, [r7, #9]
 80059d4:	e000      	b.n	80059d8 <printnewtstr+0x2c>
 80059d6:	2301      	movs	r3, #1
 80059d8:	4a0d      	ldr	r2, [pc, #52]	; (8005a10 <printnewtstr+0x64>)
 80059da:	7013      	strb	r3, [r2, #0]
	setCursor(0, row);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	b21b      	sxth	r3, r3
 80059e0:	4619      	mov	r1, r3
 80059e2:	2000      	movs	r0, #0
 80059e4:	f000 f816 	bl	8005a14 <setCursor>
	//while (*str) write (*str++);
	while (*str) write(*str++);
 80059e8:	e006      	b.n	80059f8 <printnewtstr+0x4c>
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	61ba      	str	r2, [r7, #24]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7ff ff0a 	bl	800580c <write>
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1f4      	bne.n	80059ea <printnewtstr+0x3e>
}
 8005a00:	bf00      	nop
 8005a02:	bf00      	nop
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	2000000e 	.word	0x2000000e
 8005a10:	2000000c 	.word	0x2000000c

08005a14 <setCursor>:
	textsize = size;
}


void setCursor(int16_t x, int16_t y)
{ cursor_x = x; cursor_y = y; }
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	460a      	mov	r2, r1
 8005a1e:	80fb      	strh	r3, [r7, #6]
 8005a20:	4613      	mov	r3, r2
 8005a22:	80bb      	strh	r3, [r7, #4]
 8005a24:	88fb      	ldrh	r3, [r7, #6]
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	4b05      	ldr	r3, [pc, #20]	; (8005a40 <setCursor+0x2c>)
 8005a2a:	701a      	strb	r2, [r3, #0]
 8005a2c:	88bb      	ldrh	r3, [r7, #4]
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	4b04      	ldr	r3, [pc, #16]	; (8005a44 <setCursor+0x30>)
 8005a32:	701a      	strb	r2, [r3, #0]
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	200000d1 	.word	0x200000d1
 8005a44:	200000d0 	.word	0x200000d0

08005a48 <delay>:


/****************** delay in microseconds ***********************/
extern TIM_HandleTypeDef htim1;
void delay (uint32_t time)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8005a50:	4b08      	ldr	r3, [pc, #32]	; (8005a74 <delay+0x2c>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2200      	movs	r2, #0
 8005a56:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8005a58:	bf00      	nop
 8005a5a:	4b06      	ldr	r3, [pc, #24]	; (8005a74 <delay+0x2c>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d8f9      	bhi.n	8005a5a <delay+0x12>
}
 8005a66:	bf00      	nop
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	200043b0 	.word	0x200043b0

08005a78 <desenhaPixel>:


/****************** Integração com câmera ***********************/
//Testado com LCF TFT ILI9340
void desenhaPixel(uint16_t pixel)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	4603      	mov	r3, r0
 8005a80:	80fb      	strh	r3, [r7, #6]
	write16(pixel);
 8005a82:	88fb      	ldrh	r3, [r7, #6]
 8005a84:	0a1b      	lsrs	r3, r3, #8
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	73fb      	strb	r3, [r7, #15]
 8005a8a:	88fb      	ldrh	r3, [r7, #6]
 8005a8c:	73bb      	strb	r3, [r7, #14]
 8005a8e:	4b4c      	ldr	r3, [pc, #304]	; (8005bc0 <desenhaPixel+0x148>)
 8005a90:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8005a94:	619a      	str	r2, [r3, #24]
 8005a96:	4b4b      	ldr	r3, [pc, #300]	; (8005bc4 <desenhaPixel+0x14c>)
 8005a98:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8005a9c:	619a      	str	r2, [r3, #24]
 8005a9e:	4b4a      	ldr	r3, [pc, #296]	; (8005bc8 <desenhaPixel+0x150>)
 8005aa0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005aa4:	619a      	str	r2, [r3, #24]
 8005aa6:	7bfb      	ldrb	r3, [r7, #15]
 8005aa8:	005b      	lsls	r3, r3, #1
 8005aaa:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
 8005ab0:	021b      	lsls	r3, r3, #8
 8005ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
 8005aba:	025b      	lsls	r3, r3, #9
 8005abc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	4b3f      	ldr	r3, [pc, #252]	; (8005bc0 <desenhaPixel+0x148>)
 8005ac4:	619a      	str	r2, [r3, #24]
 8005ac6:	7bfb      	ldrb	r3, [r7, #15]
 8005ac8:	011b      	lsls	r3, r3, #4
 8005aca:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8005ace:	7bfb      	ldrb	r3, [r7, #15]
 8005ad0:	105b      	asrs	r3, r3, #1
 8005ad2:	f003 0310 	and.w	r3, r3, #16
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
 8005ada:	005b      	lsls	r3, r3, #1
 8005adc:	f003 0320 	and.w	r3, r3, #32
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	7bfb      	ldrb	r3, [r7, #15]
 8005ae4:	f003 0308 	and.w	r3, r3, #8
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	4b36      	ldr	r3, [pc, #216]	; (8005bc4 <desenhaPixel+0x14c>)
 8005aec:	619a      	str	r2, [r3, #24]
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
 8005af0:	019b      	lsls	r3, r3, #6
 8005af2:	4a35      	ldr	r2, [pc, #212]	; (8005bc8 <desenhaPixel+0x150>)
 8005af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af8:	6193      	str	r3, [r2, #24]
 8005afa:	2102      	movs	r1, #2
 8005afc:	4830      	ldr	r0, [pc, #192]	; (8005bc0 <desenhaPixel+0x148>)
 8005afe:	f7fc f97d 	bl	8001dfc <PIN_LOW>
 8005b02:	2102      	movs	r1, #2
 8005b04:	482e      	ldr	r0, [pc, #184]	; (8005bc0 <desenhaPixel+0x148>)
 8005b06:	f7fc f979 	bl	8001dfc <PIN_LOW>
 8005b0a:	2102      	movs	r1, #2
 8005b0c:	482c      	ldr	r0, [pc, #176]	; (8005bc0 <desenhaPixel+0x148>)
 8005b0e:	f7fc f975 	bl	8001dfc <PIN_LOW>
 8005b12:	2102      	movs	r1, #2
 8005b14:	482a      	ldr	r0, [pc, #168]	; (8005bc0 <desenhaPixel+0x148>)
 8005b16:	f7fc f981 	bl	8001e1c <PIN_HIGH>
 8005b1a:	2102      	movs	r1, #2
 8005b1c:	4828      	ldr	r0, [pc, #160]	; (8005bc0 <desenhaPixel+0x148>)
 8005b1e:	f7fc f97d 	bl	8001e1c <PIN_HIGH>
 8005b22:	4b27      	ldr	r3, [pc, #156]	; (8005bc0 <desenhaPixel+0x148>)
 8005b24:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8005b28:	619a      	str	r2, [r3, #24]
 8005b2a:	4b26      	ldr	r3, [pc, #152]	; (8005bc4 <desenhaPixel+0x14c>)
 8005b2c:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8005b30:	619a      	str	r2, [r3, #24]
 8005b32:	4b25      	ldr	r3, [pc, #148]	; (8005bc8 <desenhaPixel+0x150>)
 8005b34:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005b38:	619a      	str	r2, [r3, #24]
 8005b3a:	7bbb      	ldrb	r3, [r7, #14]
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8005b42:	7bbb      	ldrb	r3, [r7, #14]
 8005b44:	021b      	lsls	r3, r3, #8
 8005b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	7bbb      	ldrb	r3, [r7, #14]
 8005b4e:	025b      	lsls	r3, r3, #9
 8005b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b54:	431a      	orrs	r2, r3
 8005b56:	4b1a      	ldr	r3, [pc, #104]	; (8005bc0 <desenhaPixel+0x148>)
 8005b58:	619a      	str	r2, [r3, #24]
 8005b5a:	7bbb      	ldrb	r3, [r7, #14]
 8005b5c:	011b      	lsls	r3, r3, #4
 8005b5e:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8005b62:	7bbb      	ldrb	r3, [r7, #14]
 8005b64:	105b      	asrs	r3, r3, #1
 8005b66:	f003 0310 	and.w	r3, r3, #16
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	7bbb      	ldrb	r3, [r7, #14]
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	f003 0320 	and.w	r3, r3, #32
 8005b74:	431a      	orrs	r2, r3
 8005b76:	7bbb      	ldrb	r3, [r7, #14]
 8005b78:	f003 0308 	and.w	r3, r3, #8
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	4b11      	ldr	r3, [pc, #68]	; (8005bc4 <desenhaPixel+0x14c>)
 8005b80:	619a      	str	r2, [r3, #24]
 8005b82:	7bbb      	ldrb	r3, [r7, #14]
 8005b84:	019b      	lsls	r3, r3, #6
 8005b86:	4a10      	ldr	r2, [pc, #64]	; (8005bc8 <desenhaPixel+0x150>)
 8005b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8c:	6193      	str	r3, [r2, #24]
 8005b8e:	2102      	movs	r1, #2
 8005b90:	480b      	ldr	r0, [pc, #44]	; (8005bc0 <desenhaPixel+0x148>)
 8005b92:	f7fc f933 	bl	8001dfc <PIN_LOW>
 8005b96:	2102      	movs	r1, #2
 8005b98:	4809      	ldr	r0, [pc, #36]	; (8005bc0 <desenhaPixel+0x148>)
 8005b9a:	f7fc f92f 	bl	8001dfc <PIN_LOW>
 8005b9e:	2102      	movs	r1, #2
 8005ba0:	4807      	ldr	r0, [pc, #28]	; (8005bc0 <desenhaPixel+0x148>)
 8005ba2:	f7fc f92b 	bl	8001dfc <PIN_LOW>
 8005ba6:	2102      	movs	r1, #2
 8005ba8:	4805      	ldr	r0, [pc, #20]	; (8005bc0 <desenhaPixel+0x148>)
 8005baa:	f7fc f937 	bl	8001e1c <PIN_HIGH>
 8005bae:	2102      	movs	r1, #2
 8005bb0:	4803      	ldr	r0, [pc, #12]	; (8005bc0 <desenhaPixel+0x148>)
 8005bb2:	f7fc f933 	bl	8001e1c <PIN_HIGH>
}
 8005bb6:	bf00      	nop
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	40020000 	.word	0x40020000
 8005bc4:	40020400 	.word	0x40020400
 8005bc8:	40020800 	.word	0x40020800

08005bcc <inicioDados>:


void inicioDados(void)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
	CS_ACTIVE;
 8005bd2:	2101      	movs	r1, #1
 8005bd4:	4853      	ldr	r0, [pc, #332]	; (8005d24 <inicioDados+0x158>)
 8005bd6:	f7fc f911 	bl	8001dfc <PIN_LOW>
	WriteCmd(0x2C);
 8005bda:	2110      	movs	r1, #16
 8005bdc:	4852      	ldr	r0, [pc, #328]	; (8005d28 <inicioDados+0x15c>)
 8005bde:	f7fc f90d 	bl	8001dfc <PIN_LOW>
 8005be2:	2300      	movs	r3, #0
 8005be4:	71fb      	strb	r3, [r7, #7]
 8005be6:	232c      	movs	r3, #44	; 0x2c
 8005be8:	71bb      	strb	r3, [r7, #6]
 8005bea:	4b4f      	ldr	r3, [pc, #316]	; (8005d28 <inicioDados+0x15c>)
 8005bec:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8005bf0:	619a      	str	r2, [r3, #24]
 8005bf2:	4b4c      	ldr	r3, [pc, #304]	; (8005d24 <inicioDados+0x158>)
 8005bf4:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8005bf8:	619a      	str	r2, [r3, #24]
 8005bfa:	4b4c      	ldr	r3, [pc, #304]	; (8005d2c <inicioDados+0x160>)
 8005bfc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005c00:	619a      	str	r2, [r3, #24]
 8005c02:	79fb      	ldrb	r3, [r7, #7]
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8005c0a:	79fb      	ldrb	r3, [r7, #7]
 8005c0c:	021b      	lsls	r3, r3, #8
 8005c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c12:	431a      	orrs	r2, r3
 8005c14:	79fb      	ldrb	r3, [r7, #7]
 8005c16:	025b      	lsls	r3, r3, #9
 8005c18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	4b42      	ldr	r3, [pc, #264]	; (8005d28 <inicioDados+0x15c>)
 8005c20:	619a      	str	r2, [r3, #24]
 8005c22:	79fb      	ldrb	r3, [r7, #7]
 8005c24:	011b      	lsls	r3, r3, #4
 8005c26:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8005c2a:	79fb      	ldrb	r3, [r7, #7]
 8005c2c:	105b      	asrs	r3, r3, #1
 8005c2e:	f003 0310 	and.w	r3, r3, #16
 8005c32:	431a      	orrs	r2, r3
 8005c34:	79fb      	ldrb	r3, [r7, #7]
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	f003 0320 	and.w	r3, r3, #32
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	79fb      	ldrb	r3, [r7, #7]
 8005c40:	f003 0308 	and.w	r3, r3, #8
 8005c44:	431a      	orrs	r2, r3
 8005c46:	4b37      	ldr	r3, [pc, #220]	; (8005d24 <inicioDados+0x158>)
 8005c48:	619a      	str	r2, [r3, #24]
 8005c4a:	79fb      	ldrb	r3, [r7, #7]
 8005c4c:	019b      	lsls	r3, r3, #6
 8005c4e:	4a37      	ldr	r2, [pc, #220]	; (8005d2c <inicioDados+0x160>)
 8005c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c54:	6193      	str	r3, [r2, #24]
 8005c56:	2102      	movs	r1, #2
 8005c58:	4833      	ldr	r0, [pc, #204]	; (8005d28 <inicioDados+0x15c>)
 8005c5a:	f7fc f8cf 	bl	8001dfc <PIN_LOW>
 8005c5e:	2102      	movs	r1, #2
 8005c60:	4831      	ldr	r0, [pc, #196]	; (8005d28 <inicioDados+0x15c>)
 8005c62:	f7fc f8cb 	bl	8001dfc <PIN_LOW>
 8005c66:	2102      	movs	r1, #2
 8005c68:	482f      	ldr	r0, [pc, #188]	; (8005d28 <inicioDados+0x15c>)
 8005c6a:	f7fc f8c7 	bl	8001dfc <PIN_LOW>
 8005c6e:	2102      	movs	r1, #2
 8005c70:	482d      	ldr	r0, [pc, #180]	; (8005d28 <inicioDados+0x15c>)
 8005c72:	f7fc f8d3 	bl	8001e1c <PIN_HIGH>
 8005c76:	2102      	movs	r1, #2
 8005c78:	482b      	ldr	r0, [pc, #172]	; (8005d28 <inicioDados+0x15c>)
 8005c7a:	f7fc f8cf 	bl	8001e1c <PIN_HIGH>
 8005c7e:	4b2a      	ldr	r3, [pc, #168]	; (8005d28 <inicioDados+0x15c>)
 8005c80:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8005c84:	619a      	str	r2, [r3, #24]
 8005c86:	4b27      	ldr	r3, [pc, #156]	; (8005d24 <inicioDados+0x158>)
 8005c88:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8005c8c:	619a      	str	r2, [r3, #24]
 8005c8e:	4b27      	ldr	r3, [pc, #156]	; (8005d2c <inicioDados+0x160>)
 8005c90:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005c94:	619a      	str	r2, [r3, #24]
 8005c96:	79bb      	ldrb	r3, [r7, #6]
 8005c98:	005b      	lsls	r3, r3, #1
 8005c9a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8005c9e:	79bb      	ldrb	r3, [r7, #6]
 8005ca0:	021b      	lsls	r3, r3, #8
 8005ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	79bb      	ldrb	r3, [r7, #6]
 8005caa:	025b      	lsls	r3, r3, #9
 8005cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	4b1d      	ldr	r3, [pc, #116]	; (8005d28 <inicioDados+0x15c>)
 8005cb4:	619a      	str	r2, [r3, #24]
 8005cb6:	79bb      	ldrb	r3, [r7, #6]
 8005cb8:	011b      	lsls	r3, r3, #4
 8005cba:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8005cbe:	79bb      	ldrb	r3, [r7, #6]
 8005cc0:	105b      	asrs	r3, r3, #1
 8005cc2:	f003 0310 	and.w	r3, r3, #16
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	79bb      	ldrb	r3, [r7, #6]
 8005cca:	005b      	lsls	r3, r3, #1
 8005ccc:	f003 0320 	and.w	r3, r3, #32
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	79bb      	ldrb	r3, [r7, #6]
 8005cd4:	f003 0308 	and.w	r3, r3, #8
 8005cd8:	431a      	orrs	r2, r3
 8005cda:	4b12      	ldr	r3, [pc, #72]	; (8005d24 <inicioDados+0x158>)
 8005cdc:	619a      	str	r2, [r3, #24]
 8005cde:	79bb      	ldrb	r3, [r7, #6]
 8005ce0:	019b      	lsls	r3, r3, #6
 8005ce2:	4a12      	ldr	r2, [pc, #72]	; (8005d2c <inicioDados+0x160>)
 8005ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce8:	6193      	str	r3, [r2, #24]
 8005cea:	2102      	movs	r1, #2
 8005cec:	480e      	ldr	r0, [pc, #56]	; (8005d28 <inicioDados+0x15c>)
 8005cee:	f7fc f885 	bl	8001dfc <PIN_LOW>
 8005cf2:	2102      	movs	r1, #2
 8005cf4:	480c      	ldr	r0, [pc, #48]	; (8005d28 <inicioDados+0x15c>)
 8005cf6:	f7fc f881 	bl	8001dfc <PIN_LOW>
 8005cfa:	2102      	movs	r1, #2
 8005cfc:	480a      	ldr	r0, [pc, #40]	; (8005d28 <inicioDados+0x15c>)
 8005cfe:	f7fc f87d 	bl	8001dfc <PIN_LOW>
 8005d02:	2102      	movs	r1, #2
 8005d04:	4808      	ldr	r0, [pc, #32]	; (8005d28 <inicioDados+0x15c>)
 8005d06:	f7fc f889 	bl	8001e1c <PIN_HIGH>
 8005d0a:	2102      	movs	r1, #2
 8005d0c:	4806      	ldr	r0, [pc, #24]	; (8005d28 <inicioDados+0x15c>)
 8005d0e:	f7fc f885 	bl	8001e1c <PIN_HIGH>
 8005d12:	2110      	movs	r1, #16
 8005d14:	4804      	ldr	r0, [pc, #16]	; (8005d28 <inicioDados+0x15c>)
 8005d16:	f7fc f881 	bl	8001e1c <PIN_HIGH>
}
 8005d1a:	bf00      	nop
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	40020400 	.word	0x40020400
 8005d28:	40020000 	.word	0x40020000
 8005d2c:	40020800 	.word	0x40020800

08005d30 <fimDados>:


void fimDados(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	af00      	add	r7, sp, #0
	CS_IDLE;
 8005d34:	2101      	movs	r1, #1
 8005d36:	4802      	ldr	r0, [pc, #8]	; (8005d40 <fimDados+0x10>)
 8005d38:	f7fc f870 	bl	8001e1c <PIN_HIGH>
}
 8005d3c:	bf00      	nop
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	40020400 	.word	0x40020400

08005d44 <tft_gpio_init>:


/****************** Inicialização de GPIOs **********************/
void tft_gpio_init(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	4b32      	ldr	r3, [pc, #200]	; (8005e18 <tft_gpio_init+0xd4>)
 8005d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d52:	4a31      	ldr	r2, [pc, #196]	; (8005e18 <tft_gpio_init+0xd4>)
 8005d54:	f043 0304 	orr.w	r3, r3, #4
 8005d58:	6313      	str	r3, [r2, #48]	; 0x30
 8005d5a:	4b2f      	ldr	r3, [pc, #188]	; (8005e18 <tft_gpio_init+0xd4>)
 8005d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5e:	f003 0304 	and.w	r3, r3, #4
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005d66:	2300      	movs	r3, #0
 8005d68:	60bb      	str	r3, [r7, #8]
 8005d6a:	4b2b      	ldr	r3, [pc, #172]	; (8005e18 <tft_gpio_init+0xd4>)
 8005d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6e:	4a2a      	ldr	r2, [pc, #168]	; (8005e18 <tft_gpio_init+0xd4>)
 8005d70:	f043 0301 	orr.w	r3, r3, #1
 8005d74:	6313      	str	r3, [r2, #48]	; 0x30
 8005d76:	4b28      	ldr	r3, [pc, #160]	; (8005e18 <tft_gpio_init+0xd4>)
 8005d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7a:	f003 0301 	and.w	r3, r3, #1
 8005d7e:	60bb      	str	r3, [r7, #8]
 8005d80:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005d82:	2300      	movs	r3, #0
 8005d84:	607b      	str	r3, [r7, #4]
 8005d86:	4b24      	ldr	r3, [pc, #144]	; (8005e18 <tft_gpio_init+0xd4>)
 8005d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8a:	4a23      	ldr	r2, [pc, #140]	; (8005e18 <tft_gpio_init+0xd4>)
 8005d8c:	f043 0302 	orr.w	r3, r3, #2
 8005d90:	6313      	str	r3, [r2, #48]	; 0x30
 8005d92:	4b21      	ldr	r3, [pc, #132]	; (8005e18 <tft_gpio_init+0xd4>)
 8005d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	607b      	str	r3, [r7, #4]
 8005d9c:	687b      	ldr	r3, [r7, #4]

	PIN_OUTPUT(RD_PORT, RD_PIN);
 8005d9e:	2101      	movs	r1, #1
 8005da0:	481e      	ldr	r0, [pc, #120]	; (8005e1c <tft_gpio_init+0xd8>)
 8005da2:	f7fc f861 	bl	8001e68 <PIN_OUTPUT>
	PIN_OUTPUT(WR_PORT, WR_PIN);
 8005da6:	2102      	movs	r1, #2
 8005da8:	481c      	ldr	r0, [pc, #112]	; (8005e1c <tft_gpio_init+0xd8>)
 8005daa:	f7fc f85d 	bl	8001e68 <PIN_OUTPUT>
	PIN_OUTPUT(CD_PORT, CD_PIN);
 8005dae:	2110      	movs	r1, #16
 8005db0:	481a      	ldr	r0, [pc, #104]	; (8005e1c <tft_gpio_init+0xd8>)
 8005db2:	f7fc f859 	bl	8001e68 <PIN_OUTPUT>
	PIN_OUTPUT(CS_PORT, CS_PIN);
 8005db6:	2101      	movs	r1, #1
 8005db8:	4819      	ldr	r0, [pc, #100]	; (8005e20 <tft_gpio_init+0xdc>)
 8005dba:	f7fc f855 	bl	8001e68 <PIN_OUTPUT>
	PIN_OUTPUT(RESET_PORT, RESET_PIN);
 8005dbe:	2102      	movs	r1, #2
 8005dc0:	4818      	ldr	r0, [pc, #96]	; (8005e24 <tft_gpio_init+0xe0>)
 8005dc2:	f7fc f851 	bl	8001e68 <PIN_OUTPUT>

	PIN_OUTPUT(D0_PORT, D0_PIN);
 8005dc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005dca:	4814      	ldr	r0, [pc, #80]	; (8005e1c <tft_gpio_init+0xd8>)
 8005dcc:	f7fc f84c 	bl	8001e68 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 8005dd0:	2180      	movs	r1, #128	; 0x80
 8005dd2:	4814      	ldr	r0, [pc, #80]	; (8005e24 <tft_gpio_init+0xe0>)
 8005dd4:	f7fc f848 	bl	8001e68 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 8005dd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005ddc:	480f      	ldr	r0, [pc, #60]	; (8005e1c <tft_gpio_init+0xd8>)
 8005dde:	f7fc f843 	bl	8001e68 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8005de2:	2108      	movs	r1, #8
 8005de4:	480e      	ldr	r0, [pc, #56]	; (8005e20 <tft_gpio_init+0xdc>)
 8005de6:	f7fc f83f 	bl	8001e68 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8005dea:	2120      	movs	r1, #32
 8005dec:	480c      	ldr	r0, [pc, #48]	; (8005e20 <tft_gpio_init+0xdc>)
 8005dee:	f7fc f83b 	bl	8001e68 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8005df2:	2110      	movs	r1, #16
 8005df4:	480a      	ldr	r0, [pc, #40]	; (8005e20 <tft_gpio_init+0xdc>)
 8005df6:	f7fc f837 	bl	8001e68 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8005dfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005dfe:	4808      	ldr	r0, [pc, #32]	; (8005e20 <tft_gpio_init+0xdc>)
 8005e00:	f7fc f832 	bl	8001e68 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 8005e04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e08:	4804      	ldr	r0, [pc, #16]	; (8005e1c <tft_gpio_init+0xd8>)
 8005e0a:	f7fc f82d 	bl	8001e68 <PIN_OUTPUT>
}
 8005e0e:	bf00      	nop
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	40023800 	.word	0x40023800
 8005e1c:	40020000 	.word	0x40020000
 8005e20:	40020400 	.word	0x40020400
 8005e24:	40020800 	.word	0x40020800

08005e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005e60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005e2c:	480d      	ldr	r0, [pc, #52]	; (8005e64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005e2e:	490e      	ldr	r1, [pc, #56]	; (8005e68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005e30:	4a0e      	ldr	r2, [pc, #56]	; (8005e6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e34:	e002      	b.n	8005e3c <LoopCopyDataInit>

08005e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e3a:	3304      	adds	r3, #4

08005e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e40:	d3f9      	bcc.n	8005e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e42:	4a0b      	ldr	r2, [pc, #44]	; (8005e70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005e44:	4c0b      	ldr	r4, [pc, #44]	; (8005e74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e48:	e001      	b.n	8005e4e <LoopFillZerobss>

08005e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e4c:	3204      	adds	r2, #4

08005e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e50:	d3fb      	bcc.n	8005e4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005e52:	f7fb ffc1 	bl	8001dd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005e56:	f005 fad1 	bl	800b3fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005e5a:	f7fb f87f 	bl	8000f5c <main>
  bx  lr    
 8005e5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005e60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e68:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8005e6c:	0800d1ec 	.word	0x0800d1ec
  ldr r2, =_sbss
 8005e70:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8005e74:	20007574 	.word	0x20007574

08005e78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005e78:	e7fe      	b.n	8005e78 <ADC_IRQHandler>
	...

08005e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005e80:	4b0e      	ldr	r3, [pc, #56]	; (8005ebc <HAL_Init+0x40>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a0d      	ldr	r2, [pc, #52]	; (8005ebc <HAL_Init+0x40>)
 8005e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005e8c:	4b0b      	ldr	r3, [pc, #44]	; (8005ebc <HAL_Init+0x40>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a0a      	ldr	r2, [pc, #40]	; (8005ebc <HAL_Init+0x40>)
 8005e92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e98:	4b08      	ldr	r3, [pc, #32]	; (8005ebc <HAL_Init+0x40>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a07      	ldr	r2, [pc, #28]	; (8005ebc <HAL_Init+0x40>)
 8005e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ea2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ea4:	2003      	movs	r0, #3
 8005ea6:	f000 f931 	bl	800610c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005eaa:	2000      	movs	r0, #0
 8005eac:	f000 f808 	bl	8005ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005eb0:	f7fb fe20 	bl	8001af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	40023c00 	.word	0x40023c00

08005ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005ec8:	4b12      	ldr	r3, [pc, #72]	; (8005f14 <HAL_InitTick+0x54>)
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	4b12      	ldr	r3, [pc, #72]	; (8005f18 <HAL_InitTick+0x58>)
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 f93b 	bl	800615a <HAL_SYSTICK_Config>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e00e      	b.n	8005f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b0f      	cmp	r3, #15
 8005ef2:	d80a      	bhi.n	8005f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	6879      	ldr	r1, [r7, #4]
 8005ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8005efc:	f000 f911 	bl	8006122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005f00:	4a06      	ldr	r2, [pc, #24]	; (8005f1c <HAL_InitTick+0x5c>)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	e000      	b.n	8005f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3708      	adds	r7, #8
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	20000004 	.word	0x20000004
 8005f18:	20000018 	.word	0x20000018
 8005f1c:	20000014 	.word	0x20000014

08005f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005f24:	4b06      	ldr	r3, [pc, #24]	; (8005f40 <HAL_IncTick+0x20>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	461a      	mov	r2, r3
 8005f2a:	4b06      	ldr	r3, [pc, #24]	; (8005f44 <HAL_IncTick+0x24>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4413      	add	r3, r2
 8005f30:	4a04      	ldr	r2, [pc, #16]	; (8005f44 <HAL_IncTick+0x24>)
 8005f32:	6013      	str	r3, [r2, #0]
}
 8005f34:	bf00      	nop
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	20000018 	.word	0x20000018
 8005f44:	200054f0 	.word	0x200054f0

08005f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8005f4c:	4b03      	ldr	r3, [pc, #12]	; (8005f5c <HAL_GetTick+0x14>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	200054f0 	.word	0x200054f0

08005f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f68:	f7ff ffee 	bl	8005f48 <HAL_GetTick>
 8005f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f78:	d005      	beq.n	8005f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f7a:	4b0a      	ldr	r3, [pc, #40]	; (8005fa4 <HAL_Delay+0x44>)
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4413      	add	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005f86:	bf00      	nop
 8005f88:	f7ff ffde 	bl	8005f48 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d8f7      	bhi.n	8005f88 <HAL_Delay+0x28>
  {
  }
}
 8005f98:	bf00      	nop
 8005f9a:	bf00      	nop
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	20000018 	.word	0x20000018

08005fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f003 0307 	and.w	r3, r3, #7
 8005fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005fb8:	4b0c      	ldr	r3, [pc, #48]	; (8005fec <__NVIC_SetPriorityGrouping+0x44>)
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005fd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005fda:	4a04      	ldr	r2, [pc, #16]	; (8005fec <__NVIC_SetPriorityGrouping+0x44>)
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	60d3      	str	r3, [r2, #12]
}
 8005fe0:	bf00      	nop
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	e000ed00 	.word	0xe000ed00

08005ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ff4:	4b04      	ldr	r3, [pc, #16]	; (8006008 <__NVIC_GetPriorityGrouping+0x18>)
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	0a1b      	lsrs	r3, r3, #8
 8005ffa:	f003 0307 	and.w	r3, r3, #7
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	e000ed00 	.word	0xe000ed00

0800600c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	4603      	mov	r3, r0
 8006014:	6039      	str	r1, [r7, #0]
 8006016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800601c:	2b00      	cmp	r3, #0
 800601e:	db0a      	blt.n	8006036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	b2da      	uxtb	r2, r3
 8006024:	490c      	ldr	r1, [pc, #48]	; (8006058 <__NVIC_SetPriority+0x4c>)
 8006026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800602a:	0112      	lsls	r2, r2, #4
 800602c:	b2d2      	uxtb	r2, r2
 800602e:	440b      	add	r3, r1
 8006030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006034:	e00a      	b.n	800604c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	b2da      	uxtb	r2, r3
 800603a:	4908      	ldr	r1, [pc, #32]	; (800605c <__NVIC_SetPriority+0x50>)
 800603c:	79fb      	ldrb	r3, [r7, #7]
 800603e:	f003 030f 	and.w	r3, r3, #15
 8006042:	3b04      	subs	r3, #4
 8006044:	0112      	lsls	r2, r2, #4
 8006046:	b2d2      	uxtb	r2, r2
 8006048:	440b      	add	r3, r1
 800604a:	761a      	strb	r2, [r3, #24]
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	e000e100 	.word	0xe000e100
 800605c:	e000ed00 	.word	0xe000ed00

08006060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006060:	b480      	push	{r7}
 8006062:	b089      	sub	sp, #36	; 0x24
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f003 0307 	and.w	r3, r3, #7
 8006072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	f1c3 0307 	rsb	r3, r3, #7
 800607a:	2b04      	cmp	r3, #4
 800607c:	bf28      	it	cs
 800607e:	2304      	movcs	r3, #4
 8006080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	3304      	adds	r3, #4
 8006086:	2b06      	cmp	r3, #6
 8006088:	d902      	bls.n	8006090 <NVIC_EncodePriority+0x30>
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	3b03      	subs	r3, #3
 800608e:	e000      	b.n	8006092 <NVIC_EncodePriority+0x32>
 8006090:	2300      	movs	r3, #0
 8006092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006094:	f04f 32ff 	mov.w	r2, #4294967295
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	fa02 f303 	lsl.w	r3, r2, r3
 800609e:	43da      	mvns	r2, r3
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	401a      	ands	r2, r3
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80060a8:	f04f 31ff 	mov.w	r1, #4294967295
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	fa01 f303 	lsl.w	r3, r1, r3
 80060b2:	43d9      	mvns	r1, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060b8:	4313      	orrs	r3, r2
         );
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3724      	adds	r7, #36	; 0x24
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
	...

080060c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3b01      	subs	r3, #1
 80060d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060d8:	d301      	bcc.n	80060de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80060da:	2301      	movs	r3, #1
 80060dc:	e00f      	b.n	80060fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80060de:	4a0a      	ldr	r2, [pc, #40]	; (8006108 <SysTick_Config+0x40>)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	3b01      	subs	r3, #1
 80060e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060e6:	210f      	movs	r1, #15
 80060e8:	f04f 30ff 	mov.w	r0, #4294967295
 80060ec:	f7ff ff8e 	bl	800600c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060f0:	4b05      	ldr	r3, [pc, #20]	; (8006108 <SysTick_Config+0x40>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060f6:	4b04      	ldr	r3, [pc, #16]	; (8006108 <SysTick_Config+0x40>)
 80060f8:	2207      	movs	r2, #7
 80060fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	e000e010 	.word	0xe000e010

0800610c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7ff ff47 	bl	8005fa8 <__NVIC_SetPriorityGrouping>
}
 800611a:	bf00      	nop
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006122:	b580      	push	{r7, lr}
 8006124:	b086      	sub	sp, #24
 8006126:	af00      	add	r7, sp, #0
 8006128:	4603      	mov	r3, r0
 800612a:	60b9      	str	r1, [r7, #8]
 800612c:	607a      	str	r2, [r7, #4]
 800612e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006130:	2300      	movs	r3, #0
 8006132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006134:	f7ff ff5c 	bl	8005ff0 <__NVIC_GetPriorityGrouping>
 8006138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	68b9      	ldr	r1, [r7, #8]
 800613e:	6978      	ldr	r0, [r7, #20]
 8006140:	f7ff ff8e 	bl	8006060 <NVIC_EncodePriority>
 8006144:	4602      	mov	r2, r0
 8006146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800614a:	4611      	mov	r1, r2
 800614c:	4618      	mov	r0, r3
 800614e:	f7ff ff5d 	bl	800600c <__NVIC_SetPriority>
}
 8006152:	bf00      	nop
 8006154:	3718      	adds	r7, #24
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b082      	sub	sp, #8
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7ff ffb0 	bl	80060c8 <SysTick_Config>
 8006168:	4603      	mov	r3, r0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
	...

08006174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006174:	b480      	push	{r7}
 8006176:	b089      	sub	sp, #36	; 0x24
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800617e:	2300      	movs	r3, #0
 8006180:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006182:	2300      	movs	r3, #0
 8006184:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006186:	2300      	movs	r3, #0
 8006188:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800618a:	2300      	movs	r3, #0
 800618c:	61fb      	str	r3, [r7, #28]
 800618e:	e165      	b.n	800645c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006190:	2201      	movs	r2, #1
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	fa02 f303 	lsl.w	r3, r2, r3
 8006198:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	4013      	ands	r3, r2
 80061a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	f040 8154 	bne.w	8006456 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f003 0303 	and.w	r3, r3, #3
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d005      	beq.n	80061c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d130      	bne.n	8006228 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	2203      	movs	r2, #3
 80061d2:	fa02 f303 	lsl.w	r3, r2, r3
 80061d6:	43db      	mvns	r3, r3
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	4013      	ands	r3, r2
 80061dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	68da      	ldr	r2, [r3, #12]
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	69ba      	ldr	r2, [r7, #24]
 80061f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80061fc:	2201      	movs	r2, #1
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	fa02 f303 	lsl.w	r3, r2, r3
 8006204:	43db      	mvns	r3, r3
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	4013      	ands	r3, r2
 800620a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	091b      	lsrs	r3, r3, #4
 8006212:	f003 0201 	and.w	r2, r3, #1
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	fa02 f303 	lsl.w	r3, r2, r3
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	4313      	orrs	r3, r2
 8006220:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	69ba      	ldr	r2, [r7, #24]
 8006226:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f003 0303 	and.w	r3, r3, #3
 8006230:	2b03      	cmp	r3, #3
 8006232:	d017      	beq.n	8006264 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	2203      	movs	r2, #3
 8006240:	fa02 f303 	lsl.w	r3, r2, r3
 8006244:	43db      	mvns	r3, r3
 8006246:	69ba      	ldr	r2, [r7, #24]
 8006248:	4013      	ands	r3, r2
 800624a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	689a      	ldr	r2, [r3, #8]
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	005b      	lsls	r3, r3, #1
 8006254:	fa02 f303 	lsl.w	r3, r2, r3
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	4313      	orrs	r3, r2
 800625c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f003 0303 	and.w	r3, r3, #3
 800626c:	2b02      	cmp	r3, #2
 800626e:	d123      	bne.n	80062b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	08da      	lsrs	r2, r3, #3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	3208      	adds	r2, #8
 8006278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800627c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	f003 0307 	and.w	r3, r3, #7
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	220f      	movs	r2, #15
 8006288:	fa02 f303 	lsl.w	r3, r2, r3
 800628c:	43db      	mvns	r3, r3
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	4013      	ands	r3, r2
 8006292:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	691a      	ldr	r2, [r3, #16]
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	f003 0307 	and.w	r3, r3, #7
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	fa02 f303 	lsl.w	r3, r2, r3
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	08da      	lsrs	r2, r3, #3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	3208      	adds	r2, #8
 80062b2:	69b9      	ldr	r1, [r7, #24]
 80062b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	005b      	lsls	r3, r3, #1
 80062c2:	2203      	movs	r2, #3
 80062c4:	fa02 f303 	lsl.w	r3, r2, r3
 80062c8:	43db      	mvns	r3, r3
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	4013      	ands	r3, r2
 80062ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f003 0203 	and.w	r2, r3, #3
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	005b      	lsls	r3, r3, #1
 80062dc:	fa02 f303 	lsl.w	r3, r2, r3
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 80ae 	beq.w	8006456 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062fa:	2300      	movs	r3, #0
 80062fc:	60fb      	str	r3, [r7, #12]
 80062fe:	4b5d      	ldr	r3, [pc, #372]	; (8006474 <HAL_GPIO_Init+0x300>)
 8006300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006302:	4a5c      	ldr	r2, [pc, #368]	; (8006474 <HAL_GPIO_Init+0x300>)
 8006304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006308:	6453      	str	r3, [r2, #68]	; 0x44
 800630a:	4b5a      	ldr	r3, [pc, #360]	; (8006474 <HAL_GPIO_Init+0x300>)
 800630c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800630e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006316:	4a58      	ldr	r2, [pc, #352]	; (8006478 <HAL_GPIO_Init+0x304>)
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	089b      	lsrs	r3, r3, #2
 800631c:	3302      	adds	r3, #2
 800631e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006322:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	f003 0303 	and.w	r3, r3, #3
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	220f      	movs	r2, #15
 800632e:	fa02 f303 	lsl.w	r3, r2, r3
 8006332:	43db      	mvns	r3, r3
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	4013      	ands	r3, r2
 8006338:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a4f      	ldr	r2, [pc, #316]	; (800647c <HAL_GPIO_Init+0x308>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d025      	beq.n	800638e <HAL_GPIO_Init+0x21a>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a4e      	ldr	r2, [pc, #312]	; (8006480 <HAL_GPIO_Init+0x30c>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d01f      	beq.n	800638a <HAL_GPIO_Init+0x216>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a4d      	ldr	r2, [pc, #308]	; (8006484 <HAL_GPIO_Init+0x310>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d019      	beq.n	8006386 <HAL_GPIO_Init+0x212>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a4c      	ldr	r2, [pc, #304]	; (8006488 <HAL_GPIO_Init+0x314>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d013      	beq.n	8006382 <HAL_GPIO_Init+0x20e>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a4b      	ldr	r2, [pc, #300]	; (800648c <HAL_GPIO_Init+0x318>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d00d      	beq.n	800637e <HAL_GPIO_Init+0x20a>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a4a      	ldr	r2, [pc, #296]	; (8006490 <HAL_GPIO_Init+0x31c>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d007      	beq.n	800637a <HAL_GPIO_Init+0x206>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a49      	ldr	r2, [pc, #292]	; (8006494 <HAL_GPIO_Init+0x320>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d101      	bne.n	8006376 <HAL_GPIO_Init+0x202>
 8006372:	2306      	movs	r3, #6
 8006374:	e00c      	b.n	8006390 <HAL_GPIO_Init+0x21c>
 8006376:	2307      	movs	r3, #7
 8006378:	e00a      	b.n	8006390 <HAL_GPIO_Init+0x21c>
 800637a:	2305      	movs	r3, #5
 800637c:	e008      	b.n	8006390 <HAL_GPIO_Init+0x21c>
 800637e:	2304      	movs	r3, #4
 8006380:	e006      	b.n	8006390 <HAL_GPIO_Init+0x21c>
 8006382:	2303      	movs	r3, #3
 8006384:	e004      	b.n	8006390 <HAL_GPIO_Init+0x21c>
 8006386:	2302      	movs	r3, #2
 8006388:	e002      	b.n	8006390 <HAL_GPIO_Init+0x21c>
 800638a:	2301      	movs	r3, #1
 800638c:	e000      	b.n	8006390 <HAL_GPIO_Init+0x21c>
 800638e:	2300      	movs	r3, #0
 8006390:	69fa      	ldr	r2, [r7, #28]
 8006392:	f002 0203 	and.w	r2, r2, #3
 8006396:	0092      	lsls	r2, r2, #2
 8006398:	4093      	lsls	r3, r2
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	4313      	orrs	r3, r2
 800639e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80063a0:	4935      	ldr	r1, [pc, #212]	; (8006478 <HAL_GPIO_Init+0x304>)
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	089b      	lsrs	r3, r3, #2
 80063a6:	3302      	adds	r3, #2
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80063ae:	4b3a      	ldr	r3, [pc, #232]	; (8006498 <HAL_GPIO_Init+0x324>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	43db      	mvns	r3, r3
 80063b8:	69ba      	ldr	r2, [r7, #24]
 80063ba:	4013      	ands	r3, r2
 80063bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80063d2:	4a31      	ldr	r2, [pc, #196]	; (8006498 <HAL_GPIO_Init+0x324>)
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80063d8:	4b2f      	ldr	r3, [pc, #188]	; (8006498 <HAL_GPIO_Init+0x324>)
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	43db      	mvns	r3, r3
 80063e2:	69ba      	ldr	r2, [r7, #24]
 80063e4:	4013      	ands	r3, r2
 80063e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d003      	beq.n	80063fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80063fc:	4a26      	ldr	r2, [pc, #152]	; (8006498 <HAL_GPIO_Init+0x324>)
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006402:	4b25      	ldr	r3, [pc, #148]	; (8006498 <HAL_GPIO_Init+0x324>)
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	43db      	mvns	r3, r3
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	4013      	ands	r3, r2
 8006410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	4313      	orrs	r3, r2
 8006424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006426:	4a1c      	ldr	r2, [pc, #112]	; (8006498 <HAL_GPIO_Init+0x324>)
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800642c:	4b1a      	ldr	r3, [pc, #104]	; (8006498 <HAL_GPIO_Init+0x324>)
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	43db      	mvns	r3, r3
 8006436:	69ba      	ldr	r2, [r7, #24]
 8006438:	4013      	ands	r3, r2
 800643a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d003      	beq.n	8006450 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	4313      	orrs	r3, r2
 800644e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006450:	4a11      	ldr	r2, [pc, #68]	; (8006498 <HAL_GPIO_Init+0x324>)
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	3301      	adds	r3, #1
 800645a:	61fb      	str	r3, [r7, #28]
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	2b0f      	cmp	r3, #15
 8006460:	f67f ae96 	bls.w	8006190 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006464:	bf00      	nop
 8006466:	bf00      	nop
 8006468:	3724      	adds	r7, #36	; 0x24
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	40023800 	.word	0x40023800
 8006478:	40013800 	.word	0x40013800
 800647c:	40020000 	.word	0x40020000
 8006480:	40020400 	.word	0x40020400
 8006484:	40020800 	.word	0x40020800
 8006488:	40020c00 	.word	0x40020c00
 800648c:	40021000 	.word	0x40021000
 8006490:	40021400 	.word	0x40021400
 8006494:	40021800 	.word	0x40021800
 8006498:	40013c00 	.word	0x40013c00

0800649c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	460b      	mov	r3, r1
 80064a6:	807b      	strh	r3, [r7, #2]
 80064a8:	4613      	mov	r3, r2
 80064aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80064ac:	787b      	ldrb	r3, [r7, #1]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80064b2:	887a      	ldrh	r2, [r7, #2]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80064b8:	e003      	b.n	80064c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80064ba:	887b      	ldrh	r3, [r7, #2]
 80064bc:	041a      	lsls	r2, r3, #16
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	619a      	str	r2, [r3, #24]
}
 80064c2:	bf00      	nop
 80064c4:	370c      	adds	r7, #12
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
	...

080064d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e0cc      	b.n	800667e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064e4:	4b68      	ldr	r3, [pc, #416]	; (8006688 <HAL_RCC_ClockConfig+0x1b8>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 030f 	and.w	r3, r3, #15
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d90c      	bls.n	800650c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064f2:	4b65      	ldr	r3, [pc, #404]	; (8006688 <HAL_RCC_ClockConfig+0x1b8>)
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	b2d2      	uxtb	r2, r2
 80064f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064fa:	4b63      	ldr	r3, [pc, #396]	; (8006688 <HAL_RCC_ClockConfig+0x1b8>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 030f 	and.w	r3, r3, #15
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	429a      	cmp	r2, r3
 8006506:	d001      	beq.n	800650c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e0b8      	b.n	800667e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d020      	beq.n	800655a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0304 	and.w	r3, r3, #4
 8006520:	2b00      	cmp	r3, #0
 8006522:	d005      	beq.n	8006530 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006524:	4b59      	ldr	r3, [pc, #356]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	4a58      	ldr	r2, [pc, #352]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 800652a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800652e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0308 	and.w	r3, r3, #8
 8006538:	2b00      	cmp	r3, #0
 800653a:	d005      	beq.n	8006548 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800653c:	4b53      	ldr	r3, [pc, #332]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	4a52      	ldr	r2, [pc, #328]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 8006542:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006546:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006548:	4b50      	ldr	r3, [pc, #320]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	494d      	ldr	r1, [pc, #308]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 8006556:	4313      	orrs	r3, r2
 8006558:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d044      	beq.n	80065f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d107      	bne.n	800657e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800656e:	4b47      	ldr	r3, [pc, #284]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d119      	bne.n	80065ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e07f      	b.n	800667e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	2b02      	cmp	r3, #2
 8006584:	d003      	beq.n	800658e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800658a:	2b03      	cmp	r3, #3
 800658c:	d107      	bne.n	800659e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800658e:	4b3f      	ldr	r3, [pc, #252]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d109      	bne.n	80065ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e06f      	b.n	800667e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800659e:	4b3b      	ldr	r3, [pc, #236]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e067      	b.n	800667e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065ae:	4b37      	ldr	r3, [pc, #220]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f023 0203 	bic.w	r2, r3, #3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	4934      	ldr	r1, [pc, #208]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065c0:	f7ff fcc2 	bl	8005f48 <HAL_GetTick>
 80065c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065c6:	e00a      	b.n	80065de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065c8:	f7ff fcbe 	bl	8005f48 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d901      	bls.n	80065de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e04f      	b.n	800667e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065de:	4b2b      	ldr	r3, [pc, #172]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f003 020c 	and.w	r2, r3, #12
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d1eb      	bne.n	80065c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065f0:	4b25      	ldr	r3, [pc, #148]	; (8006688 <HAL_RCC_ClockConfig+0x1b8>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 030f 	and.w	r3, r3, #15
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d20c      	bcs.n	8006618 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065fe:	4b22      	ldr	r3, [pc, #136]	; (8006688 <HAL_RCC_ClockConfig+0x1b8>)
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	b2d2      	uxtb	r2, r2
 8006604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006606:	4b20      	ldr	r3, [pc, #128]	; (8006688 <HAL_RCC_ClockConfig+0x1b8>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 030f 	and.w	r3, r3, #15
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	429a      	cmp	r2, r3
 8006612:	d001      	beq.n	8006618 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e032      	b.n	800667e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0304 	and.w	r3, r3, #4
 8006620:	2b00      	cmp	r3, #0
 8006622:	d008      	beq.n	8006636 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006624:	4b19      	ldr	r3, [pc, #100]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	4916      	ldr	r1, [pc, #88]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 8006632:	4313      	orrs	r3, r2
 8006634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0308 	and.w	r3, r3, #8
 800663e:	2b00      	cmp	r3, #0
 8006640:	d009      	beq.n	8006656 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006642:	4b12      	ldr	r3, [pc, #72]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	00db      	lsls	r3, r3, #3
 8006650:	490e      	ldr	r1, [pc, #56]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 8006652:	4313      	orrs	r3, r2
 8006654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006656:	f000 f855 	bl	8006704 <HAL_RCC_GetSysClockFreq>
 800665a:	4602      	mov	r2, r0
 800665c:	4b0b      	ldr	r3, [pc, #44]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	091b      	lsrs	r3, r3, #4
 8006662:	f003 030f 	and.w	r3, r3, #15
 8006666:	490a      	ldr	r1, [pc, #40]	; (8006690 <HAL_RCC_ClockConfig+0x1c0>)
 8006668:	5ccb      	ldrb	r3, [r1, r3]
 800666a:	fa22 f303 	lsr.w	r3, r2, r3
 800666e:	4a09      	ldr	r2, [pc, #36]	; (8006694 <HAL_RCC_ClockConfig+0x1c4>)
 8006670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006672:	4b09      	ldr	r3, [pc, #36]	; (8006698 <HAL_RCC_ClockConfig+0x1c8>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff fc22 	bl	8005ec0 <HAL_InitTick>

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	40023c00 	.word	0x40023c00
 800668c:	40023800 	.word	0x40023800
 8006690:	0800c84c 	.word	0x0800c84c
 8006694:	20000004 	.word	0x20000004
 8006698:	20000014 	.word	0x20000014

0800669c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800669c:	b480      	push	{r7}
 800669e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066a0:	4b03      	ldr	r3, [pc, #12]	; (80066b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80066a2:	681b      	ldr	r3, [r3, #0]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	20000004 	.word	0x20000004

080066b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80066b8:	f7ff fff0 	bl	800669c <HAL_RCC_GetHCLKFreq>
 80066bc:	4602      	mov	r2, r0
 80066be:	4b05      	ldr	r3, [pc, #20]	; (80066d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	0a9b      	lsrs	r3, r3, #10
 80066c4:	f003 0307 	and.w	r3, r3, #7
 80066c8:	4903      	ldr	r1, [pc, #12]	; (80066d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066ca:	5ccb      	ldrb	r3, [r1, r3]
 80066cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	40023800 	.word	0x40023800
 80066d8:	0800c85c 	.word	0x0800c85c

080066dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066e0:	f7ff ffdc 	bl	800669c <HAL_RCC_GetHCLKFreq>
 80066e4:	4602      	mov	r2, r0
 80066e6:	4b05      	ldr	r3, [pc, #20]	; (80066fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	0b5b      	lsrs	r3, r3, #13
 80066ec:	f003 0307 	and.w	r3, r3, #7
 80066f0:	4903      	ldr	r1, [pc, #12]	; (8006700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066f2:	5ccb      	ldrb	r3, [r1, r3]
 80066f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	40023800 	.word	0x40023800
 8006700:	0800c85c 	.word	0x0800c85c

08006704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006708:	b088      	sub	sp, #32
 800670a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800670c:	2300      	movs	r3, #0
 800670e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8006718:	2300      	movs	r3, #0
 800671a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006720:	4bce      	ldr	r3, [pc, #824]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x358>)
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f003 030c 	and.w	r3, r3, #12
 8006728:	2b0c      	cmp	r3, #12
 800672a:	f200 818d 	bhi.w	8006a48 <HAL_RCC_GetSysClockFreq+0x344>
 800672e:	a201      	add	r2, pc, #4	; (adr r2, 8006734 <HAL_RCC_GetSysClockFreq+0x30>)
 8006730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006734:	08006769 	.word	0x08006769
 8006738:	08006a49 	.word	0x08006a49
 800673c:	08006a49 	.word	0x08006a49
 8006740:	08006a49 	.word	0x08006a49
 8006744:	0800676f 	.word	0x0800676f
 8006748:	08006a49 	.word	0x08006a49
 800674c:	08006a49 	.word	0x08006a49
 8006750:	08006a49 	.word	0x08006a49
 8006754:	08006775 	.word	0x08006775
 8006758:	08006a49 	.word	0x08006a49
 800675c:	08006a49 	.word	0x08006a49
 8006760:	08006a49 	.word	0x08006a49
 8006764:	080068e9 	.word	0x080068e9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006768:	4bbd      	ldr	r3, [pc, #756]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x35c>)
 800676a:	61bb      	str	r3, [r7, #24]
       break;
 800676c:	e16f      	b.n	8006a4e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800676e:	4bbd      	ldr	r3, [pc, #756]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x360>)
 8006770:	61bb      	str	r3, [r7, #24]
      break;
 8006772:	e16c      	b.n	8006a4e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006774:	4bb9      	ldr	r3, [pc, #740]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x358>)
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800677c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800677e:	4bb7      	ldr	r3, [pc, #732]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x358>)
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d053      	beq.n	8006832 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800678a:	4bb4      	ldr	r3, [pc, #720]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x358>)
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	099b      	lsrs	r3, r3, #6
 8006790:	461a      	mov	r2, r3
 8006792:	f04f 0300 	mov.w	r3, #0
 8006796:	f240 10ff 	movw	r0, #511	; 0x1ff
 800679a:	f04f 0100 	mov.w	r1, #0
 800679e:	ea02 0400 	and.w	r4, r2, r0
 80067a2:	603c      	str	r4, [r7, #0]
 80067a4:	400b      	ands	r3, r1
 80067a6:	607b      	str	r3, [r7, #4]
 80067a8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067ac:	4620      	mov	r0, r4
 80067ae:	4629      	mov	r1, r5
 80067b0:	f04f 0200 	mov.w	r2, #0
 80067b4:	f04f 0300 	mov.w	r3, #0
 80067b8:	014b      	lsls	r3, r1, #5
 80067ba:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80067be:	0142      	lsls	r2, r0, #5
 80067c0:	4610      	mov	r0, r2
 80067c2:	4619      	mov	r1, r3
 80067c4:	4623      	mov	r3, r4
 80067c6:	1ac0      	subs	r0, r0, r3
 80067c8:	462b      	mov	r3, r5
 80067ca:	eb61 0103 	sbc.w	r1, r1, r3
 80067ce:	f04f 0200 	mov.w	r2, #0
 80067d2:	f04f 0300 	mov.w	r3, #0
 80067d6:	018b      	lsls	r3, r1, #6
 80067d8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80067dc:	0182      	lsls	r2, r0, #6
 80067de:	1a12      	subs	r2, r2, r0
 80067e0:	eb63 0301 	sbc.w	r3, r3, r1
 80067e4:	f04f 0000 	mov.w	r0, #0
 80067e8:	f04f 0100 	mov.w	r1, #0
 80067ec:	00d9      	lsls	r1, r3, #3
 80067ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80067f2:	00d0      	lsls	r0, r2, #3
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	4621      	mov	r1, r4
 80067fa:	1852      	adds	r2, r2, r1
 80067fc:	4629      	mov	r1, r5
 80067fe:	eb43 0101 	adc.w	r1, r3, r1
 8006802:	460b      	mov	r3, r1
 8006804:	f04f 0000 	mov.w	r0, #0
 8006808:	f04f 0100 	mov.w	r1, #0
 800680c:	0259      	lsls	r1, r3, #9
 800680e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006812:	0250      	lsls	r0, r2, #9
 8006814:	4602      	mov	r2, r0
 8006816:	460b      	mov	r3, r1
 8006818:	4610      	mov	r0, r2
 800681a:	4619      	mov	r1, r3
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	461a      	mov	r2, r3
 8006820:	f04f 0300 	mov.w	r3, #0
 8006824:	f7f9 fd44 	bl	80002b0 <__aeabi_uldivmod>
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	4613      	mov	r3, r2
 800682e:	61fb      	str	r3, [r7, #28]
 8006830:	e04c      	b.n	80068cc <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006832:	4b8a      	ldr	r3, [pc, #552]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x358>)
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	099b      	lsrs	r3, r3, #6
 8006838:	461a      	mov	r2, r3
 800683a:	f04f 0300 	mov.w	r3, #0
 800683e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006842:	f04f 0100 	mov.w	r1, #0
 8006846:	ea02 0a00 	and.w	sl, r2, r0
 800684a:	ea03 0b01 	and.w	fp, r3, r1
 800684e:	4650      	mov	r0, sl
 8006850:	4659      	mov	r1, fp
 8006852:	f04f 0200 	mov.w	r2, #0
 8006856:	f04f 0300 	mov.w	r3, #0
 800685a:	014b      	lsls	r3, r1, #5
 800685c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006860:	0142      	lsls	r2, r0, #5
 8006862:	4610      	mov	r0, r2
 8006864:	4619      	mov	r1, r3
 8006866:	ebb0 000a 	subs.w	r0, r0, sl
 800686a:	eb61 010b 	sbc.w	r1, r1, fp
 800686e:	f04f 0200 	mov.w	r2, #0
 8006872:	f04f 0300 	mov.w	r3, #0
 8006876:	018b      	lsls	r3, r1, #6
 8006878:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800687c:	0182      	lsls	r2, r0, #6
 800687e:	1a12      	subs	r2, r2, r0
 8006880:	eb63 0301 	sbc.w	r3, r3, r1
 8006884:	f04f 0000 	mov.w	r0, #0
 8006888:	f04f 0100 	mov.w	r1, #0
 800688c:	00d9      	lsls	r1, r3, #3
 800688e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006892:	00d0      	lsls	r0, r2, #3
 8006894:	4602      	mov	r2, r0
 8006896:	460b      	mov	r3, r1
 8006898:	eb12 020a 	adds.w	r2, r2, sl
 800689c:	eb43 030b 	adc.w	r3, r3, fp
 80068a0:	f04f 0000 	mov.w	r0, #0
 80068a4:	f04f 0100 	mov.w	r1, #0
 80068a8:	0299      	lsls	r1, r3, #10
 80068aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80068ae:	0290      	lsls	r0, r2, #10
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	4610      	mov	r0, r2
 80068b6:	4619      	mov	r1, r3
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	461a      	mov	r2, r3
 80068bc:	f04f 0300 	mov.w	r3, #0
 80068c0:	f7f9 fcf6 	bl	80002b0 <__aeabi_uldivmod>
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	4613      	mov	r3, r2
 80068ca:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80068cc:	4b63      	ldr	r3, [pc, #396]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x358>)
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	0c1b      	lsrs	r3, r3, #16
 80068d2:	f003 0303 	and.w	r3, r3, #3
 80068d6:	3301      	adds	r3, #1
 80068d8:	005b      	lsls	r3, r3, #1
 80068da:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80068dc:	69fa      	ldr	r2, [r7, #28]
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e4:	61bb      	str	r3, [r7, #24]
      break;
 80068e6:	e0b2      	b.n	8006a4e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068e8:	4b5c      	ldr	r3, [pc, #368]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x358>)
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068f0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068f2:	4b5a      	ldr	r3, [pc, #360]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x358>)
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d04d      	beq.n	800699a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068fe:	4b57      	ldr	r3, [pc, #348]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x358>)
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	099b      	lsrs	r3, r3, #6
 8006904:	461a      	mov	r2, r3
 8006906:	f04f 0300 	mov.w	r3, #0
 800690a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800690e:	f04f 0100 	mov.w	r1, #0
 8006912:	ea02 0800 	and.w	r8, r2, r0
 8006916:	ea03 0901 	and.w	r9, r3, r1
 800691a:	4640      	mov	r0, r8
 800691c:	4649      	mov	r1, r9
 800691e:	f04f 0200 	mov.w	r2, #0
 8006922:	f04f 0300 	mov.w	r3, #0
 8006926:	014b      	lsls	r3, r1, #5
 8006928:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800692c:	0142      	lsls	r2, r0, #5
 800692e:	4610      	mov	r0, r2
 8006930:	4619      	mov	r1, r3
 8006932:	ebb0 0008 	subs.w	r0, r0, r8
 8006936:	eb61 0109 	sbc.w	r1, r1, r9
 800693a:	f04f 0200 	mov.w	r2, #0
 800693e:	f04f 0300 	mov.w	r3, #0
 8006942:	018b      	lsls	r3, r1, #6
 8006944:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006948:	0182      	lsls	r2, r0, #6
 800694a:	1a12      	subs	r2, r2, r0
 800694c:	eb63 0301 	sbc.w	r3, r3, r1
 8006950:	f04f 0000 	mov.w	r0, #0
 8006954:	f04f 0100 	mov.w	r1, #0
 8006958:	00d9      	lsls	r1, r3, #3
 800695a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800695e:	00d0      	lsls	r0, r2, #3
 8006960:	4602      	mov	r2, r0
 8006962:	460b      	mov	r3, r1
 8006964:	eb12 0208 	adds.w	r2, r2, r8
 8006968:	eb43 0309 	adc.w	r3, r3, r9
 800696c:	f04f 0000 	mov.w	r0, #0
 8006970:	f04f 0100 	mov.w	r1, #0
 8006974:	0259      	lsls	r1, r3, #9
 8006976:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800697a:	0250      	lsls	r0, r2, #9
 800697c:	4602      	mov	r2, r0
 800697e:	460b      	mov	r3, r1
 8006980:	4610      	mov	r0, r2
 8006982:	4619      	mov	r1, r3
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	461a      	mov	r2, r3
 8006988:	f04f 0300 	mov.w	r3, #0
 800698c:	f7f9 fc90 	bl	80002b0 <__aeabi_uldivmod>
 8006990:	4602      	mov	r2, r0
 8006992:	460b      	mov	r3, r1
 8006994:	4613      	mov	r3, r2
 8006996:	61fb      	str	r3, [r7, #28]
 8006998:	e04a      	b.n	8006a30 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800699a:	4b30      	ldr	r3, [pc, #192]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x358>)
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	099b      	lsrs	r3, r3, #6
 80069a0:	461a      	mov	r2, r3
 80069a2:	f04f 0300 	mov.w	r3, #0
 80069a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80069aa:	f04f 0100 	mov.w	r1, #0
 80069ae:	ea02 0400 	and.w	r4, r2, r0
 80069b2:	ea03 0501 	and.w	r5, r3, r1
 80069b6:	4620      	mov	r0, r4
 80069b8:	4629      	mov	r1, r5
 80069ba:	f04f 0200 	mov.w	r2, #0
 80069be:	f04f 0300 	mov.w	r3, #0
 80069c2:	014b      	lsls	r3, r1, #5
 80069c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80069c8:	0142      	lsls	r2, r0, #5
 80069ca:	4610      	mov	r0, r2
 80069cc:	4619      	mov	r1, r3
 80069ce:	1b00      	subs	r0, r0, r4
 80069d0:	eb61 0105 	sbc.w	r1, r1, r5
 80069d4:	f04f 0200 	mov.w	r2, #0
 80069d8:	f04f 0300 	mov.w	r3, #0
 80069dc:	018b      	lsls	r3, r1, #6
 80069de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80069e2:	0182      	lsls	r2, r0, #6
 80069e4:	1a12      	subs	r2, r2, r0
 80069e6:	eb63 0301 	sbc.w	r3, r3, r1
 80069ea:	f04f 0000 	mov.w	r0, #0
 80069ee:	f04f 0100 	mov.w	r1, #0
 80069f2:	00d9      	lsls	r1, r3, #3
 80069f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069f8:	00d0      	lsls	r0, r2, #3
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	1912      	adds	r2, r2, r4
 8006a00:	eb45 0303 	adc.w	r3, r5, r3
 8006a04:	f04f 0000 	mov.w	r0, #0
 8006a08:	f04f 0100 	mov.w	r1, #0
 8006a0c:	0299      	lsls	r1, r3, #10
 8006a0e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006a12:	0290      	lsls	r0, r2, #10
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4610      	mov	r0, r2
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	f04f 0300 	mov.w	r3, #0
 8006a24:	f7f9 fc44 	bl	80002b0 <__aeabi_uldivmod>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006a30:	4b0a      	ldr	r3, [pc, #40]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x358>)
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	0f1b      	lsrs	r3, r3, #28
 8006a36:	f003 0307 	and.w	r3, r3, #7
 8006a3a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8006a3c:	69fa      	ldr	r2, [r7, #28]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a44:	61bb      	str	r3, [r7, #24]
      break;
 8006a46:	e002      	b.n	8006a4e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a48:	4b05      	ldr	r3, [pc, #20]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006a4a:	61bb      	str	r3, [r7, #24]
      break;
 8006a4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a4e:	69bb      	ldr	r3, [r7, #24]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3720      	adds	r7, #32
 8006a54:	46bd      	mov	sp, r7
 8006a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a5a:	bf00      	nop
 8006a5c:	40023800 	.word	0x40023800
 8006a60:	00f42400 	.word	0x00f42400
 8006a64:	007a1200 	.word	0x007a1200

08006a68 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e28d      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 8083 	beq.w	8006b8e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006a88:	4b94      	ldr	r3, [pc, #592]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f003 030c 	and.w	r3, r3, #12
 8006a90:	2b04      	cmp	r3, #4
 8006a92:	d019      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006a94:	4b91      	ldr	r3, [pc, #580]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006a9c:	2b08      	cmp	r3, #8
 8006a9e:	d106      	bne.n	8006aae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006aa0:	4b8e      	ldr	r3, [pc, #568]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006aac:	d00c      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aae:	4b8b      	ldr	r3, [pc, #556]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006ab6:	2b0c      	cmp	r3, #12
 8006ab8:	d112      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aba:	4b88      	ldr	r3, [pc, #544]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ac6:	d10b      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ac8:	4b84      	ldr	r3, [pc, #528]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d05b      	beq.n	8006b8c <HAL_RCC_OscConfig+0x124>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d157      	bne.n	8006b8c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e25a      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ae8:	d106      	bne.n	8006af8 <HAL_RCC_OscConfig+0x90>
 8006aea:	4b7c      	ldr	r3, [pc, #496]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a7b      	ldr	r2, [pc, #492]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006af4:	6013      	str	r3, [r2, #0]
 8006af6:	e01d      	b.n	8006b34 <HAL_RCC_OscConfig+0xcc>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b00:	d10c      	bne.n	8006b1c <HAL_RCC_OscConfig+0xb4>
 8006b02:	4b76      	ldr	r3, [pc, #472]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a75      	ldr	r2, [pc, #468]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b0c:	6013      	str	r3, [r2, #0]
 8006b0e:	4b73      	ldr	r3, [pc, #460]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a72      	ldr	r2, [pc, #456]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	e00b      	b.n	8006b34 <HAL_RCC_OscConfig+0xcc>
 8006b1c:	4b6f      	ldr	r3, [pc, #444]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a6e      	ldr	r2, [pc, #440]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b26:	6013      	str	r3, [r2, #0]
 8006b28:	4b6c      	ldr	r3, [pc, #432]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a6b      	ldr	r2, [pc, #428]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d013      	beq.n	8006b64 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b3c:	f7ff fa04 	bl	8005f48 <HAL_GetTick>
 8006b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b42:	e008      	b.n	8006b56 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b44:	f7ff fa00 	bl	8005f48 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b64      	cmp	r3, #100	; 0x64
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e21f      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b56:	4b61      	ldr	r3, [pc, #388]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d0f0      	beq.n	8006b44 <HAL_RCC_OscConfig+0xdc>
 8006b62:	e014      	b.n	8006b8e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b64:	f7ff f9f0 	bl	8005f48 <HAL_GetTick>
 8006b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b6a:	e008      	b.n	8006b7e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b6c:	f7ff f9ec 	bl	8005f48 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b64      	cmp	r3, #100	; 0x64
 8006b78:	d901      	bls.n	8006b7e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e20b      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b7e:	4b57      	ldr	r3, [pc, #348]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1f0      	bne.n	8006b6c <HAL_RCC_OscConfig+0x104>
 8006b8a:	e000      	b.n	8006b8e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d06f      	beq.n	8006c7a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006b9a:	4b50      	ldr	r3, [pc, #320]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f003 030c 	and.w	r3, r3, #12
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d017      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006ba6:	4b4d      	ldr	r3, [pc, #308]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006bae:	2b08      	cmp	r3, #8
 8006bb0:	d105      	bne.n	8006bbe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006bb2:	4b4a      	ldr	r3, [pc, #296]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00b      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bbe:	4b47      	ldr	r3, [pc, #284]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006bc6:	2b0c      	cmp	r3, #12
 8006bc8:	d11c      	bne.n	8006c04 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bca:	4b44      	ldr	r3, [pc, #272]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d116      	bne.n	8006c04 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bd6:	4b41      	ldr	r3, [pc, #260]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d005      	beq.n	8006bee <HAL_RCC_OscConfig+0x186>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d001      	beq.n	8006bee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e1d3      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bee:	4b3b      	ldr	r3, [pc, #236]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	4937      	ldr	r1, [pc, #220]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c02:	e03a      	b.n	8006c7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d020      	beq.n	8006c4e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c0c:	4b34      	ldr	r3, [pc, #208]	; (8006ce0 <HAL_RCC_OscConfig+0x278>)
 8006c0e:	2201      	movs	r2, #1
 8006c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c12:	f7ff f999 	bl	8005f48 <HAL_GetTick>
 8006c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c18:	e008      	b.n	8006c2c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c1a:	f7ff f995 	bl	8005f48 <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d901      	bls.n	8006c2c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e1b4      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c2c:	4b2b      	ldr	r3, [pc, #172]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0f0      	beq.n	8006c1a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c38:	4b28      	ldr	r3, [pc, #160]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	00db      	lsls	r3, r3, #3
 8006c46:	4925      	ldr	r1, [pc, #148]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	600b      	str	r3, [r1, #0]
 8006c4c:	e015      	b.n	8006c7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c4e:	4b24      	ldr	r3, [pc, #144]	; (8006ce0 <HAL_RCC_OscConfig+0x278>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c54:	f7ff f978 	bl	8005f48 <HAL_GetTick>
 8006c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c5a:	e008      	b.n	8006c6e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c5c:	f7ff f974 	bl	8005f48 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d901      	bls.n	8006c6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e193      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c6e:	4b1b      	ldr	r3, [pc, #108]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1f0      	bne.n	8006c5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0308 	and.w	r3, r3, #8
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d036      	beq.n	8006cf4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d016      	beq.n	8006cbc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c8e:	4b15      	ldr	r3, [pc, #84]	; (8006ce4 <HAL_RCC_OscConfig+0x27c>)
 8006c90:	2201      	movs	r2, #1
 8006c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c94:	f7ff f958 	bl	8005f48 <HAL_GetTick>
 8006c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c9a:	e008      	b.n	8006cae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c9c:	f7ff f954 	bl	8005f48 <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e173      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cae:	4b0b      	ldr	r3, [pc, #44]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d0f0      	beq.n	8006c9c <HAL_RCC_OscConfig+0x234>
 8006cba:	e01b      	b.n	8006cf4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cbc:	4b09      	ldr	r3, [pc, #36]	; (8006ce4 <HAL_RCC_OscConfig+0x27c>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cc2:	f7ff f941 	bl	8005f48 <HAL_GetTick>
 8006cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cc8:	e00e      	b.n	8006ce8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cca:	f7ff f93d 	bl	8005f48 <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d907      	bls.n	8006ce8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e15c      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
 8006cdc:	40023800 	.word	0x40023800
 8006ce0:	42470000 	.word	0x42470000
 8006ce4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ce8:	4b8a      	ldr	r3, [pc, #552]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cec:	f003 0302 	and.w	r3, r3, #2
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1ea      	bne.n	8006cca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0304 	and.w	r3, r3, #4
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 8097 	beq.w	8006e30 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d02:	2300      	movs	r3, #0
 8006d04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d06:	4b83      	ldr	r3, [pc, #524]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10f      	bne.n	8006d32 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d12:	2300      	movs	r3, #0
 8006d14:	60bb      	str	r3, [r7, #8]
 8006d16:	4b7f      	ldr	r3, [pc, #508]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1a:	4a7e      	ldr	r2, [pc, #504]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d20:	6413      	str	r3, [r2, #64]	; 0x40
 8006d22:	4b7c      	ldr	r3, [pc, #496]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d2a:	60bb      	str	r3, [r7, #8]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d32:	4b79      	ldr	r3, [pc, #484]	; (8006f18 <HAL_RCC_OscConfig+0x4b0>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d118      	bne.n	8006d70 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d3e:	4b76      	ldr	r3, [pc, #472]	; (8006f18 <HAL_RCC_OscConfig+0x4b0>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a75      	ldr	r2, [pc, #468]	; (8006f18 <HAL_RCC_OscConfig+0x4b0>)
 8006d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d4a:	f7ff f8fd 	bl	8005f48 <HAL_GetTick>
 8006d4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d50:	e008      	b.n	8006d64 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d52:	f7ff f8f9 	bl	8005f48 <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d901      	bls.n	8006d64 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e118      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d64:	4b6c      	ldr	r3, [pc, #432]	; (8006f18 <HAL_RCC_OscConfig+0x4b0>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d0f0      	beq.n	8006d52 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d106      	bne.n	8006d86 <HAL_RCC_OscConfig+0x31e>
 8006d78:	4b66      	ldr	r3, [pc, #408]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7c:	4a65      	ldr	r2, [pc, #404]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006d7e:	f043 0301 	orr.w	r3, r3, #1
 8006d82:	6713      	str	r3, [r2, #112]	; 0x70
 8006d84:	e01c      	b.n	8006dc0 <HAL_RCC_OscConfig+0x358>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	2b05      	cmp	r3, #5
 8006d8c:	d10c      	bne.n	8006da8 <HAL_RCC_OscConfig+0x340>
 8006d8e:	4b61      	ldr	r3, [pc, #388]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d92:	4a60      	ldr	r2, [pc, #384]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006d94:	f043 0304 	orr.w	r3, r3, #4
 8006d98:	6713      	str	r3, [r2, #112]	; 0x70
 8006d9a:	4b5e      	ldr	r3, [pc, #376]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9e:	4a5d      	ldr	r2, [pc, #372]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006da0:	f043 0301 	orr.w	r3, r3, #1
 8006da4:	6713      	str	r3, [r2, #112]	; 0x70
 8006da6:	e00b      	b.n	8006dc0 <HAL_RCC_OscConfig+0x358>
 8006da8:	4b5a      	ldr	r3, [pc, #360]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dac:	4a59      	ldr	r2, [pc, #356]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006dae:	f023 0301 	bic.w	r3, r3, #1
 8006db2:	6713      	str	r3, [r2, #112]	; 0x70
 8006db4:	4b57      	ldr	r3, [pc, #348]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db8:	4a56      	ldr	r2, [pc, #344]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006dba:	f023 0304 	bic.w	r3, r3, #4
 8006dbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d015      	beq.n	8006df4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dc8:	f7ff f8be 	bl	8005f48 <HAL_GetTick>
 8006dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dce:	e00a      	b.n	8006de6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dd0:	f7ff f8ba 	bl	8005f48 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d901      	bls.n	8006de6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e0d7      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006de6:	4b4b      	ldr	r3, [pc, #300]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dea:	f003 0302 	and.w	r3, r3, #2
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d0ee      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x368>
 8006df2:	e014      	b.n	8006e1e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006df4:	f7ff f8a8 	bl	8005f48 <HAL_GetTick>
 8006df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dfa:	e00a      	b.n	8006e12 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dfc:	f7ff f8a4 	bl	8005f48 <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d901      	bls.n	8006e12 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e0c1      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e12:	4b40      	ldr	r3, [pc, #256]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1ee      	bne.n	8006dfc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e1e:	7dfb      	ldrb	r3, [r7, #23]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d105      	bne.n	8006e30 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e24:	4b3b      	ldr	r3, [pc, #236]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e28:	4a3a      	ldr	r2, [pc, #232]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006e2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 80ad 	beq.w	8006f94 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e3a:	4b36      	ldr	r3, [pc, #216]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f003 030c 	and.w	r3, r3, #12
 8006e42:	2b08      	cmp	r3, #8
 8006e44:	d060      	beq.n	8006f08 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d145      	bne.n	8006eda <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e4e:	4b33      	ldr	r3, [pc, #204]	; (8006f1c <HAL_RCC_OscConfig+0x4b4>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e54:	f7ff f878 	bl	8005f48 <HAL_GetTick>
 8006e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e5a:	e008      	b.n	8006e6e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e5c:	f7ff f874 	bl	8005f48 <HAL_GetTick>
 8006e60:	4602      	mov	r2, r0
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d901      	bls.n	8006e6e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e093      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e6e:	4b29      	ldr	r3, [pc, #164]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1f0      	bne.n	8006e5c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	69da      	ldr	r2, [r3, #28]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	431a      	orrs	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e88:	019b      	lsls	r3, r3, #6
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e90:	085b      	lsrs	r3, r3, #1
 8006e92:	3b01      	subs	r3, #1
 8006e94:	041b      	lsls	r3, r3, #16
 8006e96:	431a      	orrs	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9c:	061b      	lsls	r3, r3, #24
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea4:	071b      	lsls	r3, r3, #28
 8006ea6:	491b      	ldr	r1, [pc, #108]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006eac:	4b1b      	ldr	r3, [pc, #108]	; (8006f1c <HAL_RCC_OscConfig+0x4b4>)
 8006eae:	2201      	movs	r2, #1
 8006eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb2:	f7ff f849 	bl	8005f48 <HAL_GetTick>
 8006eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eb8:	e008      	b.n	8006ecc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006eba:	f7ff f845 	bl	8005f48 <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d901      	bls.n	8006ecc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e064      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ecc:	4b11      	ldr	r3, [pc, #68]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d0f0      	beq.n	8006eba <HAL_RCC_OscConfig+0x452>
 8006ed8:	e05c      	b.n	8006f94 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eda:	4b10      	ldr	r3, [pc, #64]	; (8006f1c <HAL_RCC_OscConfig+0x4b4>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee0:	f7ff f832 	bl	8005f48 <HAL_GetTick>
 8006ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ee6:	e008      	b.n	8006efa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ee8:	f7ff f82e 	bl	8005f48 <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d901      	bls.n	8006efa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e04d      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006efa:	4b06      	ldr	r3, [pc, #24]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1f0      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x480>
 8006f06:	e045      	b.n	8006f94 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d107      	bne.n	8006f20 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e040      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
 8006f14:	40023800 	.word	0x40023800
 8006f18:	40007000 	.word	0x40007000
 8006f1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f20:	4b1f      	ldr	r3, [pc, #124]	; (8006fa0 <HAL_RCC_OscConfig+0x538>)
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d030      	beq.n	8006f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d129      	bne.n	8006f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d122      	bne.n	8006f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f50:	4013      	ands	r3, r2
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d119      	bne.n	8006f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f66:	085b      	lsrs	r3, r3, #1
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d10f      	bne.n	8006f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d107      	bne.n	8006f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d001      	beq.n	8006f94 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e000      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	40023800 	.word	0x40023800

08006fa4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d101      	bne.n	8006fb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e07b      	b.n	80070ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d108      	bne.n	8006fd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fc6:	d009      	beq.n	8006fdc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	61da      	str	r2, [r3, #28]
 8006fce:	e005      	b.n	8006fdc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d106      	bne.n	8006ffc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7fa fda4 	bl	8001b44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2202      	movs	r2, #2
 8007000:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007012:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007024:	431a      	orrs	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800702e:	431a      	orrs	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	f003 0302 	and.w	r3, r3, #2
 8007038:	431a      	orrs	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	431a      	orrs	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800704c:	431a      	orrs	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007056:	431a      	orrs	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a1b      	ldr	r3, [r3, #32]
 800705c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007060:	ea42 0103 	orr.w	r1, r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007068:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	430a      	orrs	r2, r1
 8007072:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	0c1b      	lsrs	r3, r3, #16
 800707a:	f003 0104 	and.w	r1, r3, #4
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007082:	f003 0210 	and.w	r2, r3, #16
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	430a      	orrs	r2, r1
 800708c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	69da      	ldr	r2, [r3, #28]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800709c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3708      	adds	r7, #8
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b088      	sub	sp, #32
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	60f8      	str	r0, [r7, #12]
 80070be:	60b9      	str	r1, [r7, #8]
 80070c0:	603b      	str	r3, [r7, #0]
 80070c2:	4613      	mov	r3, r2
 80070c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d101      	bne.n	80070d8 <HAL_SPI_Transmit+0x22>
 80070d4:	2302      	movs	r3, #2
 80070d6:	e126      	b.n	8007326 <HAL_SPI_Transmit+0x270>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070e0:	f7fe ff32 	bl	8005f48 <HAL_GetTick>
 80070e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80070e6:	88fb      	ldrh	r3, [r7, #6]
 80070e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d002      	beq.n	80070fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80070f6:	2302      	movs	r3, #2
 80070f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80070fa:	e10b      	b.n	8007314 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d002      	beq.n	8007108 <HAL_SPI_Transmit+0x52>
 8007102:	88fb      	ldrh	r3, [r7, #6]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d102      	bne.n	800710e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800710c:	e102      	b.n	8007314 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2203      	movs	r2, #3
 8007112:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	88fa      	ldrh	r2, [r7, #6]
 8007126:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	88fa      	ldrh	r2, [r7, #6]
 800712c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007154:	d10f      	bne.n	8007176 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007164:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007174:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007180:	2b40      	cmp	r3, #64	; 0x40
 8007182:	d007      	beq.n	8007194 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007192:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800719c:	d14b      	bne.n	8007236 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d002      	beq.n	80071ac <HAL_SPI_Transmit+0xf6>
 80071a6:	8afb      	ldrh	r3, [r7, #22]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d13e      	bne.n	800722a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b0:	881a      	ldrh	r2, [r3, #0]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071bc:	1c9a      	adds	r2, r3, #2
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	3b01      	subs	r3, #1
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80071d0:	e02b      	b.n	800722a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f003 0302 	and.w	r3, r3, #2
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d112      	bne.n	8007206 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e4:	881a      	ldrh	r2, [r3, #0]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f0:	1c9a      	adds	r2, r3, #2
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	3b01      	subs	r3, #1
 80071fe:	b29a      	uxth	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	86da      	strh	r2, [r3, #54]	; 0x36
 8007204:	e011      	b.n	800722a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007206:	f7fe fe9f 	bl	8005f48 <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	683a      	ldr	r2, [r7, #0]
 8007212:	429a      	cmp	r2, r3
 8007214:	d803      	bhi.n	800721e <HAL_SPI_Transmit+0x168>
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721c:	d102      	bne.n	8007224 <HAL_SPI_Transmit+0x16e>
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d102      	bne.n	800722a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007228:	e074      	b.n	8007314 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800722e:	b29b      	uxth	r3, r3
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1ce      	bne.n	80071d2 <HAL_SPI_Transmit+0x11c>
 8007234:	e04c      	b.n	80072d0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d002      	beq.n	8007244 <HAL_SPI_Transmit+0x18e>
 800723e:	8afb      	ldrh	r3, [r7, #22]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d140      	bne.n	80072c6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	330c      	adds	r3, #12
 800724e:	7812      	ldrb	r2, [r2, #0]
 8007250:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007256:	1c5a      	adds	r2, r3, #1
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007260:	b29b      	uxth	r3, r3
 8007262:	3b01      	subs	r3, #1
 8007264:	b29a      	uxth	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800726a:	e02c      	b.n	80072c6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b02      	cmp	r3, #2
 8007278:	d113      	bne.n	80072a2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	330c      	adds	r3, #12
 8007284:	7812      	ldrb	r2, [r2, #0]
 8007286:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728c:	1c5a      	adds	r2, r3, #1
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007296:	b29b      	uxth	r3, r3
 8007298:	3b01      	subs	r3, #1
 800729a:	b29a      	uxth	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	86da      	strh	r2, [r3, #54]	; 0x36
 80072a0:	e011      	b.n	80072c6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072a2:	f7fe fe51 	bl	8005f48 <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	683a      	ldr	r2, [r7, #0]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d803      	bhi.n	80072ba <HAL_SPI_Transmit+0x204>
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b8:	d102      	bne.n	80072c0 <HAL_SPI_Transmit+0x20a>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d102      	bne.n	80072c6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80072c4:	e026      	b.n	8007314 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1cd      	bne.n	800726c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f000 fa63 	bl	80077a0 <SPI_EndRxTxTransaction>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d002      	beq.n	80072e6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2220      	movs	r2, #32
 80072e4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10a      	bne.n	8007304 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072ee:	2300      	movs	r3, #0
 80072f0:	613b      	str	r3, [r7, #16]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	613b      	str	r3, [r7, #16]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	613b      	str	r3, [r7, #16]
 8007302:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007308:	2b00      	cmp	r3, #0
 800730a:	d002      	beq.n	8007312 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	77fb      	strb	r3, [r7, #31]
 8007310:	e000      	b.n	8007314 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007312:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007324:	7ffb      	ldrb	r3, [r7, #31]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3720      	adds	r7, #32
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b08c      	sub	sp, #48	; 0x30
 8007332:	af00      	add	r7, sp, #0
 8007334:	60f8      	str	r0, [r7, #12]
 8007336:	60b9      	str	r1, [r7, #8]
 8007338:	607a      	str	r2, [r7, #4]
 800733a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800733c:	2301      	movs	r3, #1
 800733e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007340:	2300      	movs	r3, #0
 8007342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800734c:	2b01      	cmp	r3, #1
 800734e:	d101      	bne.n	8007354 <HAL_SPI_TransmitReceive+0x26>
 8007350:	2302      	movs	r3, #2
 8007352:	e18a      	b.n	800766a <HAL_SPI_TransmitReceive+0x33c>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800735c:	f7fe fdf4 	bl	8005f48 <HAL_GetTick>
 8007360:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007372:	887b      	ldrh	r3, [r7, #2]
 8007374:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007376:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800737a:	2b01      	cmp	r3, #1
 800737c:	d00f      	beq.n	800739e <HAL_SPI_TransmitReceive+0x70>
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007384:	d107      	bne.n	8007396 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d103      	bne.n	8007396 <HAL_SPI_TransmitReceive+0x68>
 800738e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007392:	2b04      	cmp	r3, #4
 8007394:	d003      	beq.n	800739e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007396:	2302      	movs	r3, #2
 8007398:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800739c:	e15b      	b.n	8007656 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d005      	beq.n	80073b0 <HAL_SPI_TransmitReceive+0x82>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d002      	beq.n	80073b0 <HAL_SPI_TransmitReceive+0x82>
 80073aa:	887b      	ldrh	r3, [r7, #2]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d103      	bne.n	80073b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80073b6:	e14e      	b.n	8007656 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	2b04      	cmp	r3, #4
 80073c2:	d003      	beq.n	80073cc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2205      	movs	r2, #5
 80073c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	887a      	ldrh	r2, [r7, #2]
 80073dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	887a      	ldrh	r2, [r7, #2]
 80073e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	887a      	ldrh	r2, [r7, #2]
 80073ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	887a      	ldrh	r2, [r7, #2]
 80073f4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800740c:	2b40      	cmp	r3, #64	; 0x40
 800740e:	d007      	beq.n	8007420 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800741e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007428:	d178      	bne.n	800751c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d002      	beq.n	8007438 <HAL_SPI_TransmitReceive+0x10a>
 8007432:	8b7b      	ldrh	r3, [r7, #26]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d166      	bne.n	8007506 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743c:	881a      	ldrh	r2, [r3, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007448:	1c9a      	adds	r2, r3, #2
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007452:	b29b      	uxth	r3, r3
 8007454:	3b01      	subs	r3, #1
 8007456:	b29a      	uxth	r2, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800745c:	e053      	b.n	8007506 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f003 0302 	and.w	r3, r3, #2
 8007468:	2b02      	cmp	r3, #2
 800746a:	d11b      	bne.n	80074a4 <HAL_SPI_TransmitReceive+0x176>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007470:	b29b      	uxth	r3, r3
 8007472:	2b00      	cmp	r3, #0
 8007474:	d016      	beq.n	80074a4 <HAL_SPI_TransmitReceive+0x176>
 8007476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007478:	2b01      	cmp	r3, #1
 800747a:	d113      	bne.n	80074a4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007480:	881a      	ldrh	r2, [r3, #0]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748c:	1c9a      	adds	r2, r3, #2
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007496:	b29b      	uxth	r3, r3
 8007498:	3b01      	subs	r3, #1
 800749a:	b29a      	uxth	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074a0:	2300      	movs	r3, #0
 80074a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d119      	bne.n	80074e6 <HAL_SPI_TransmitReceive+0x1b8>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d014      	beq.n	80074e6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68da      	ldr	r2, [r3, #12]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c6:	b292      	uxth	r2, r2
 80074c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ce:	1c9a      	adds	r2, r3, #2
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074d8:	b29b      	uxth	r3, r3
 80074da:	3b01      	subs	r3, #1
 80074dc:	b29a      	uxth	r2, r3
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074e2:	2301      	movs	r3, #1
 80074e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80074e6:	f7fe fd2f 	bl	8005f48 <HAL_GetTick>
 80074ea:	4602      	mov	r2, r0
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d807      	bhi.n	8007506 <HAL_SPI_TransmitReceive+0x1d8>
 80074f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fc:	d003      	beq.n	8007506 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007504:	e0a7      	b.n	8007656 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800750a:	b29b      	uxth	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1a6      	bne.n	800745e <HAL_SPI_TransmitReceive+0x130>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007514:	b29b      	uxth	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d1a1      	bne.n	800745e <HAL_SPI_TransmitReceive+0x130>
 800751a:	e07c      	b.n	8007616 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d002      	beq.n	800752a <HAL_SPI_TransmitReceive+0x1fc>
 8007524:	8b7b      	ldrh	r3, [r7, #26]
 8007526:	2b01      	cmp	r3, #1
 8007528:	d16b      	bne.n	8007602 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	330c      	adds	r3, #12
 8007534:	7812      	ldrb	r2, [r2, #0]
 8007536:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753c:	1c5a      	adds	r2, r3, #1
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007546:	b29b      	uxth	r3, r3
 8007548:	3b01      	subs	r3, #1
 800754a:	b29a      	uxth	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007550:	e057      	b.n	8007602 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	f003 0302 	and.w	r3, r3, #2
 800755c:	2b02      	cmp	r3, #2
 800755e:	d11c      	bne.n	800759a <HAL_SPI_TransmitReceive+0x26c>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007564:	b29b      	uxth	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d017      	beq.n	800759a <HAL_SPI_TransmitReceive+0x26c>
 800756a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756c:	2b01      	cmp	r3, #1
 800756e:	d114      	bne.n	800759a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	330c      	adds	r3, #12
 800757a:	7812      	ldrb	r2, [r2, #0]
 800757c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007582:	1c5a      	adds	r2, r3, #1
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800758c:	b29b      	uxth	r3, r3
 800758e:	3b01      	subs	r3, #1
 8007590:	b29a      	uxth	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007596:	2300      	movs	r3, #0
 8007598:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d119      	bne.n	80075dc <HAL_SPI_TransmitReceive+0x2ae>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d014      	beq.n	80075dc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68da      	ldr	r2, [r3, #12]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075bc:	b2d2      	uxtb	r2, r2
 80075be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c4:	1c5a      	adds	r2, r3, #1
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	3b01      	subs	r3, #1
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075d8:	2301      	movs	r3, #1
 80075da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80075dc:	f7fe fcb4 	bl	8005f48 <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d803      	bhi.n	80075f4 <HAL_SPI_TransmitReceive+0x2c6>
 80075ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f2:	d102      	bne.n	80075fa <HAL_SPI_TransmitReceive+0x2cc>
 80075f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d103      	bne.n	8007602 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007600:	e029      	b.n	8007656 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007606:	b29b      	uxth	r3, r3
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1a2      	bne.n	8007552 <HAL_SPI_TransmitReceive+0x224>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007610:	b29b      	uxth	r3, r3
 8007612:	2b00      	cmp	r3, #0
 8007614:	d19d      	bne.n	8007552 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007618:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f000 f8c0 	bl	80077a0 <SPI_EndRxTxTransaction>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d006      	beq.n	8007634 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2220      	movs	r2, #32
 8007630:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007632:	e010      	b.n	8007656 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10b      	bne.n	8007654 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800763c:	2300      	movs	r3, #0
 800763e:	617b      	str	r3, [r7, #20]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	617b      	str	r3, [r7, #20]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	617b      	str	r3, [r7, #20]
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	e000      	b.n	8007656 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007654:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007666:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800766a:	4618      	mov	r0, r3
 800766c:	3730      	adds	r7, #48	; 0x30
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007672:	b480      	push	{r7}
 8007674:	b083      	sub	sp, #12
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007680:	b2db      	uxtb	r3, r3
}
 8007682:	4618      	mov	r0, r3
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
	...

08007690 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b088      	sub	sp, #32
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	603b      	str	r3, [r7, #0]
 800769c:	4613      	mov	r3, r2
 800769e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80076a0:	f7fe fc52 	bl	8005f48 <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a8:	1a9b      	subs	r3, r3, r2
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	4413      	add	r3, r2
 80076ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80076b0:	f7fe fc4a 	bl	8005f48 <HAL_GetTick>
 80076b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80076b6:	4b39      	ldr	r3, [pc, #228]	; (800779c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	015b      	lsls	r3, r3, #5
 80076bc:	0d1b      	lsrs	r3, r3, #20
 80076be:	69fa      	ldr	r2, [r7, #28]
 80076c0:	fb02 f303 	mul.w	r3, r2, r3
 80076c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076c6:	e054      	b.n	8007772 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ce:	d050      	beq.n	8007772 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80076d0:	f7fe fc3a 	bl	8005f48 <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	69fa      	ldr	r2, [r7, #28]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d902      	bls.n	80076e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d13d      	bne.n	8007762 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80076f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076fe:	d111      	bne.n	8007724 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007708:	d004      	beq.n	8007714 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007712:	d107      	bne.n	8007724 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007722:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800772c:	d10f      	bne.n	800774e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800773c:	601a      	str	r2, [r3, #0]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800774c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800775e:	2303      	movs	r3, #3
 8007760:	e017      	b.n	8007792 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d101      	bne.n	800776c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007768:	2300      	movs	r3, #0
 800776a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	3b01      	subs	r3, #1
 8007770:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	689a      	ldr	r2, [r3, #8]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	4013      	ands	r3, r2
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	429a      	cmp	r2, r3
 8007780:	bf0c      	ite	eq
 8007782:	2301      	moveq	r3, #1
 8007784:	2300      	movne	r3, #0
 8007786:	b2db      	uxtb	r3, r3
 8007788:	461a      	mov	r2, r3
 800778a:	79fb      	ldrb	r3, [r7, #7]
 800778c:	429a      	cmp	r2, r3
 800778e:	d19b      	bne.n	80076c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3720      	adds	r7, #32
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	20000004 	.word	0x20000004

080077a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b088      	sub	sp, #32
 80077a4:	af02      	add	r7, sp, #8
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80077ac:	4b1b      	ldr	r3, [pc, #108]	; (800781c <SPI_EndRxTxTransaction+0x7c>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a1b      	ldr	r2, [pc, #108]	; (8007820 <SPI_EndRxTxTransaction+0x80>)
 80077b2:	fba2 2303 	umull	r2, r3, r2, r3
 80077b6:	0d5b      	lsrs	r3, r3, #21
 80077b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80077bc:	fb02 f303 	mul.w	r3, r2, r3
 80077c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077ca:	d112      	bne.n	80077f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	9300      	str	r3, [sp, #0]
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	2200      	movs	r2, #0
 80077d4:	2180      	movs	r1, #128	; 0x80
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f7ff ff5a 	bl	8007690 <SPI_WaitFlagStateUntilTimeout>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d016      	beq.n	8007810 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077e6:	f043 0220 	orr.w	r2, r3, #32
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e00f      	b.n	8007812 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00a      	beq.n	800780e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	3b01      	subs	r3, #1
 80077fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007808:	2b80      	cmp	r3, #128	; 0x80
 800780a:	d0f2      	beq.n	80077f2 <SPI_EndRxTxTransaction+0x52>
 800780c:	e000      	b.n	8007810 <SPI_EndRxTxTransaction+0x70>
        break;
 800780e:	bf00      	nop
  }

  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3718      	adds	r7, #24
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	20000004 	.word	0x20000004
 8007820:	165e9f81 	.word	0x165e9f81

08007824 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d101      	bne.n	8007836 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e041      	b.n	80078ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2b00      	cmp	r3, #0
 8007840:	d106      	bne.n	8007850 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f7fa f9c2 	bl	8001bd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2202      	movs	r2, #2
 8007854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	3304      	adds	r3, #4
 8007860:	4619      	mov	r1, r3
 8007862:	4610      	mov	r0, r2
 8007864:	f000 f95e 	bl	8007b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
	...

080078c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d001      	beq.n	80078dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	e046      	b.n	800796a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2202      	movs	r2, #2
 80078e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a23      	ldr	r2, [pc, #140]	; (8007978 <HAL_TIM_Base_Start+0xb4>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d022      	beq.n	8007934 <HAL_TIM_Base_Start+0x70>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078f6:	d01d      	beq.n	8007934 <HAL_TIM_Base_Start+0x70>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a1f      	ldr	r2, [pc, #124]	; (800797c <HAL_TIM_Base_Start+0xb8>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d018      	beq.n	8007934 <HAL_TIM_Base_Start+0x70>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a1e      	ldr	r2, [pc, #120]	; (8007980 <HAL_TIM_Base_Start+0xbc>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d013      	beq.n	8007934 <HAL_TIM_Base_Start+0x70>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a1c      	ldr	r2, [pc, #112]	; (8007984 <HAL_TIM_Base_Start+0xc0>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d00e      	beq.n	8007934 <HAL_TIM_Base_Start+0x70>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a1b      	ldr	r2, [pc, #108]	; (8007988 <HAL_TIM_Base_Start+0xc4>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d009      	beq.n	8007934 <HAL_TIM_Base_Start+0x70>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a19      	ldr	r2, [pc, #100]	; (800798c <HAL_TIM_Base_Start+0xc8>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d004      	beq.n	8007934 <HAL_TIM_Base_Start+0x70>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a18      	ldr	r2, [pc, #96]	; (8007990 <HAL_TIM_Base_Start+0xcc>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d111      	bne.n	8007958 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	f003 0307 	and.w	r3, r3, #7
 800793e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2b06      	cmp	r3, #6
 8007944:	d010      	beq.n	8007968 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f042 0201 	orr.w	r2, r2, #1
 8007954:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007956:	e007      	b.n	8007968 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f042 0201 	orr.w	r2, r2, #1
 8007966:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	40010000 	.word	0x40010000
 800797c:	40000400 	.word	0x40000400
 8007980:	40000800 	.word	0x40000800
 8007984:	40000c00 	.word	0x40000c00
 8007988:	40010400 	.word	0x40010400
 800798c:	40014000 	.word	0x40014000
 8007990:	40001800 	.word	0x40001800

08007994 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800799e:	2300      	movs	r3, #0
 80079a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d101      	bne.n	80079b0 <HAL_TIM_ConfigClockSource+0x1c>
 80079ac:	2302      	movs	r3, #2
 80079ae:	e0b4      	b.n	8007b1a <HAL_TIM_ConfigClockSource+0x186>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2202      	movs	r2, #2
 80079bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80079ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079e8:	d03e      	beq.n	8007a68 <HAL_TIM_ConfigClockSource+0xd4>
 80079ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079ee:	f200 8087 	bhi.w	8007b00 <HAL_TIM_ConfigClockSource+0x16c>
 80079f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079f6:	f000 8086 	beq.w	8007b06 <HAL_TIM_ConfigClockSource+0x172>
 80079fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079fe:	d87f      	bhi.n	8007b00 <HAL_TIM_ConfigClockSource+0x16c>
 8007a00:	2b70      	cmp	r3, #112	; 0x70
 8007a02:	d01a      	beq.n	8007a3a <HAL_TIM_ConfigClockSource+0xa6>
 8007a04:	2b70      	cmp	r3, #112	; 0x70
 8007a06:	d87b      	bhi.n	8007b00 <HAL_TIM_ConfigClockSource+0x16c>
 8007a08:	2b60      	cmp	r3, #96	; 0x60
 8007a0a:	d050      	beq.n	8007aae <HAL_TIM_ConfigClockSource+0x11a>
 8007a0c:	2b60      	cmp	r3, #96	; 0x60
 8007a0e:	d877      	bhi.n	8007b00 <HAL_TIM_ConfigClockSource+0x16c>
 8007a10:	2b50      	cmp	r3, #80	; 0x50
 8007a12:	d03c      	beq.n	8007a8e <HAL_TIM_ConfigClockSource+0xfa>
 8007a14:	2b50      	cmp	r3, #80	; 0x50
 8007a16:	d873      	bhi.n	8007b00 <HAL_TIM_ConfigClockSource+0x16c>
 8007a18:	2b40      	cmp	r3, #64	; 0x40
 8007a1a:	d058      	beq.n	8007ace <HAL_TIM_ConfigClockSource+0x13a>
 8007a1c:	2b40      	cmp	r3, #64	; 0x40
 8007a1e:	d86f      	bhi.n	8007b00 <HAL_TIM_ConfigClockSource+0x16c>
 8007a20:	2b30      	cmp	r3, #48	; 0x30
 8007a22:	d064      	beq.n	8007aee <HAL_TIM_ConfigClockSource+0x15a>
 8007a24:	2b30      	cmp	r3, #48	; 0x30
 8007a26:	d86b      	bhi.n	8007b00 <HAL_TIM_ConfigClockSource+0x16c>
 8007a28:	2b20      	cmp	r3, #32
 8007a2a:	d060      	beq.n	8007aee <HAL_TIM_ConfigClockSource+0x15a>
 8007a2c:	2b20      	cmp	r3, #32
 8007a2e:	d867      	bhi.n	8007b00 <HAL_TIM_ConfigClockSource+0x16c>
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d05c      	beq.n	8007aee <HAL_TIM_ConfigClockSource+0x15a>
 8007a34:	2b10      	cmp	r3, #16
 8007a36:	d05a      	beq.n	8007aee <HAL_TIM_ConfigClockSource+0x15a>
 8007a38:	e062      	b.n	8007b00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6818      	ldr	r0, [r3, #0]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	6899      	ldr	r1, [r3, #8]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	f000 f985 	bl	8007d58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68ba      	ldr	r2, [r7, #8]
 8007a64:	609a      	str	r2, [r3, #8]
      break;
 8007a66:	e04f      	b.n	8007b08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6818      	ldr	r0, [r3, #0]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	6899      	ldr	r1, [r3, #8]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	685a      	ldr	r2, [r3, #4]
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	f000 f96e 	bl	8007d58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	689a      	ldr	r2, [r3, #8]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a8a:	609a      	str	r2, [r3, #8]
      break;
 8007a8c:	e03c      	b.n	8007b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6818      	ldr	r0, [r3, #0]
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	6859      	ldr	r1, [r3, #4]
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	f000 f8e2 	bl	8007c64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2150      	movs	r1, #80	; 0x50
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 f93b 	bl	8007d22 <TIM_ITRx_SetConfig>
      break;
 8007aac:	e02c      	b.n	8007b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6818      	ldr	r0, [r3, #0]
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	6859      	ldr	r1, [r3, #4]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	461a      	mov	r2, r3
 8007abc:	f000 f901 	bl	8007cc2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2160      	movs	r1, #96	; 0x60
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 f92b 	bl	8007d22 <TIM_ITRx_SetConfig>
      break;
 8007acc:	e01c      	b.n	8007b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6818      	ldr	r0, [r3, #0]
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	6859      	ldr	r1, [r3, #4]
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	461a      	mov	r2, r3
 8007adc:	f000 f8c2 	bl	8007c64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2140      	movs	r1, #64	; 0x40
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 f91b 	bl	8007d22 <TIM_ITRx_SetConfig>
      break;
 8007aec:	e00c      	b.n	8007b08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4619      	mov	r1, r3
 8007af8:	4610      	mov	r0, r2
 8007afa:	f000 f912 	bl	8007d22 <TIM_ITRx_SetConfig>
      break;
 8007afe:	e003      	b.n	8007b08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	73fb      	strb	r3, [r7, #15]
      break;
 8007b04:	e000      	b.n	8007b08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007b06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
	...

08007b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a40      	ldr	r2, [pc, #256]	; (8007c38 <TIM_Base_SetConfig+0x114>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d013      	beq.n	8007b64 <TIM_Base_SetConfig+0x40>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b42:	d00f      	beq.n	8007b64 <TIM_Base_SetConfig+0x40>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a3d      	ldr	r2, [pc, #244]	; (8007c3c <TIM_Base_SetConfig+0x118>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d00b      	beq.n	8007b64 <TIM_Base_SetConfig+0x40>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a3c      	ldr	r2, [pc, #240]	; (8007c40 <TIM_Base_SetConfig+0x11c>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d007      	beq.n	8007b64 <TIM_Base_SetConfig+0x40>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a3b      	ldr	r2, [pc, #236]	; (8007c44 <TIM_Base_SetConfig+0x120>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d003      	beq.n	8007b64 <TIM_Base_SetConfig+0x40>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a3a      	ldr	r2, [pc, #232]	; (8007c48 <TIM_Base_SetConfig+0x124>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d108      	bne.n	8007b76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a2f      	ldr	r2, [pc, #188]	; (8007c38 <TIM_Base_SetConfig+0x114>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d02b      	beq.n	8007bd6 <TIM_Base_SetConfig+0xb2>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b84:	d027      	beq.n	8007bd6 <TIM_Base_SetConfig+0xb2>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a2c      	ldr	r2, [pc, #176]	; (8007c3c <TIM_Base_SetConfig+0x118>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d023      	beq.n	8007bd6 <TIM_Base_SetConfig+0xb2>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a2b      	ldr	r2, [pc, #172]	; (8007c40 <TIM_Base_SetConfig+0x11c>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d01f      	beq.n	8007bd6 <TIM_Base_SetConfig+0xb2>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a2a      	ldr	r2, [pc, #168]	; (8007c44 <TIM_Base_SetConfig+0x120>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d01b      	beq.n	8007bd6 <TIM_Base_SetConfig+0xb2>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a29      	ldr	r2, [pc, #164]	; (8007c48 <TIM_Base_SetConfig+0x124>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d017      	beq.n	8007bd6 <TIM_Base_SetConfig+0xb2>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a28      	ldr	r2, [pc, #160]	; (8007c4c <TIM_Base_SetConfig+0x128>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d013      	beq.n	8007bd6 <TIM_Base_SetConfig+0xb2>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a27      	ldr	r2, [pc, #156]	; (8007c50 <TIM_Base_SetConfig+0x12c>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d00f      	beq.n	8007bd6 <TIM_Base_SetConfig+0xb2>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a26      	ldr	r2, [pc, #152]	; (8007c54 <TIM_Base_SetConfig+0x130>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d00b      	beq.n	8007bd6 <TIM_Base_SetConfig+0xb2>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a25      	ldr	r2, [pc, #148]	; (8007c58 <TIM_Base_SetConfig+0x134>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d007      	beq.n	8007bd6 <TIM_Base_SetConfig+0xb2>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a24      	ldr	r2, [pc, #144]	; (8007c5c <TIM_Base_SetConfig+0x138>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d003      	beq.n	8007bd6 <TIM_Base_SetConfig+0xb2>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a23      	ldr	r2, [pc, #140]	; (8007c60 <TIM_Base_SetConfig+0x13c>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d108      	bne.n	8007be8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	689a      	ldr	r2, [r3, #8]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a0a      	ldr	r2, [pc, #40]	; (8007c38 <TIM_Base_SetConfig+0x114>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d003      	beq.n	8007c1c <TIM_Base_SetConfig+0xf8>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a0c      	ldr	r2, [pc, #48]	; (8007c48 <TIM_Base_SetConfig+0x124>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d103      	bne.n	8007c24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	691a      	ldr	r2, [r3, #16]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	615a      	str	r2, [r3, #20]
}
 8007c2a:	bf00      	nop
 8007c2c:	3714      	adds	r7, #20
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	40010000 	.word	0x40010000
 8007c3c:	40000400 	.word	0x40000400
 8007c40:	40000800 	.word	0x40000800
 8007c44:	40000c00 	.word	0x40000c00
 8007c48:	40010400 	.word	0x40010400
 8007c4c:	40014000 	.word	0x40014000
 8007c50:	40014400 	.word	0x40014400
 8007c54:	40014800 	.word	0x40014800
 8007c58:	40001800 	.word	0x40001800
 8007c5c:	40001c00 	.word	0x40001c00
 8007c60:	40002000 	.word	0x40002000

08007c64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6a1b      	ldr	r3, [r3, #32]
 8007c74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	f023 0201 	bic.w	r2, r3, #1
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	011b      	lsls	r3, r3, #4
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	f023 030a 	bic.w	r3, r3, #10
 8007ca0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	697a      	ldr	r2, [r7, #20]
 8007cb4:	621a      	str	r2, [r3, #32]
}
 8007cb6:	bf00      	nop
 8007cb8:	371c      	adds	r7, #28
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr

08007cc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b087      	sub	sp, #28
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	60f8      	str	r0, [r7, #12]
 8007cca:	60b9      	str	r1, [r7, #8]
 8007ccc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6a1b      	ldr	r3, [r3, #32]
 8007cd2:	f023 0210 	bic.w	r2, r3, #16
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6a1b      	ldr	r3, [r3, #32]
 8007ce4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	031b      	lsls	r3, r3, #12
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007cfe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	011b      	lsls	r3, r3, #4
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	621a      	str	r2, [r3, #32]
}
 8007d16:	bf00      	nop
 8007d18:	371c      	adds	r7, #28
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b085      	sub	sp, #20
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d3a:	683a      	ldr	r2, [r7, #0]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	f043 0307 	orr.w	r3, r3, #7
 8007d44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	609a      	str	r2, [r3, #8]
}
 8007d4c:	bf00      	nop
 8007d4e:	3714      	adds	r7, #20
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b087      	sub	sp, #28
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
 8007d64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	021a      	lsls	r2, r3, #8
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	431a      	orrs	r2, r3
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	697a      	ldr	r2, [r7, #20]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	609a      	str	r2, [r3, #8]
}
 8007d8c:	bf00      	nop
 8007d8e:	371c      	adds	r7, #28
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d101      	bne.n	8007db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007dac:	2302      	movs	r3, #2
 8007dae:	e05a      	b.n	8007e66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2202      	movs	r2, #2
 8007dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a21      	ldr	r2, [pc, #132]	; (8007e74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d022      	beq.n	8007e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dfc:	d01d      	beq.n	8007e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a1d      	ldr	r2, [pc, #116]	; (8007e78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d018      	beq.n	8007e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a1b      	ldr	r2, [pc, #108]	; (8007e7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d013      	beq.n	8007e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a1a      	ldr	r2, [pc, #104]	; (8007e80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d00e      	beq.n	8007e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a18      	ldr	r2, [pc, #96]	; (8007e84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d009      	beq.n	8007e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a17      	ldr	r2, [pc, #92]	; (8007e88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d004      	beq.n	8007e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a15      	ldr	r2, [pc, #84]	; (8007e8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d10c      	bne.n	8007e54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	68ba      	ldr	r2, [r7, #8]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	40010000 	.word	0x40010000
 8007e78:	40000400 	.word	0x40000400
 8007e7c:	40000800 	.word	0x40000800
 8007e80:	40000c00 	.word	0x40000c00
 8007e84:	40010400 	.word	0x40010400
 8007e88:	40014000 	.word	0x40014000
 8007e8c:	40001800 	.word	0x40001800

08007e90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d101      	bne.n	8007ea2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e03f      	b.n	8007f22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d106      	bne.n	8007ebc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7f9 feae 	bl	8001c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2224      	movs	r2, #36	; 0x24
 8007ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68da      	ldr	r2, [r3, #12]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ed2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f929 	bl	800812c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	691a      	ldr	r2, [r3, #16]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ee8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	695a      	ldr	r2, [r3, #20]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ef8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68da      	ldr	r2, [r3, #12]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2220      	movs	r2, #32
 8007f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2220      	movs	r2, #32
 8007f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b08a      	sub	sp, #40	; 0x28
 8007f2e:	af02      	add	r7, sp, #8
 8007f30:	60f8      	str	r0, [r7, #12]
 8007f32:	60b9      	str	r1, [r7, #8]
 8007f34:	603b      	str	r3, [r7, #0]
 8007f36:	4613      	mov	r3, r2
 8007f38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b20      	cmp	r3, #32
 8007f48:	d17c      	bne.n	8008044 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d002      	beq.n	8007f56 <HAL_UART_Transmit+0x2c>
 8007f50:	88fb      	ldrh	r3, [r7, #6]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e075      	b.n	8008046 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d101      	bne.n	8007f68 <HAL_UART_Transmit+0x3e>
 8007f64:	2302      	movs	r3, #2
 8007f66:	e06e      	b.n	8008046 <HAL_UART_Transmit+0x11c>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2221      	movs	r2, #33	; 0x21
 8007f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f7e:	f7fd ffe3 	bl	8005f48 <HAL_GetTick>
 8007f82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	88fa      	ldrh	r2, [r7, #6]
 8007f88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	88fa      	ldrh	r2, [r7, #6]
 8007f8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f98:	d108      	bne.n	8007fac <HAL_UART_Transmit+0x82>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d104      	bne.n	8007fac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	61bb      	str	r3, [r7, #24]
 8007faa:	e003      	b.n	8007fb4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007fbc:	e02a      	b.n	8008014 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	2180      	movs	r1, #128	; 0x80
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f000 f840 	bl	800804e <UART_WaitOnFlagUntilTimeout>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e036      	b.n	8008046 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d10b      	bne.n	8007ff6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	881b      	ldrh	r3, [r3, #0]
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	3302      	adds	r3, #2
 8007ff2:	61bb      	str	r3, [r7, #24]
 8007ff4:	e007      	b.n	8008006 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	781a      	ldrb	r2, [r3, #0]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	3301      	adds	r3, #1
 8008004:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800800a:	b29b      	uxth	r3, r3
 800800c:	3b01      	subs	r3, #1
 800800e:	b29a      	uxth	r2, r3
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008018:	b29b      	uxth	r3, r3
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1cf      	bne.n	8007fbe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	2200      	movs	r2, #0
 8008026:	2140      	movs	r1, #64	; 0x40
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f000 f810 	bl	800804e <UART_WaitOnFlagUntilTimeout>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d001      	beq.n	8008038 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e006      	b.n	8008046 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2220      	movs	r2, #32
 800803c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008040:	2300      	movs	r3, #0
 8008042:	e000      	b.n	8008046 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008044:	2302      	movs	r3, #2
  }
}
 8008046:	4618      	mov	r0, r3
 8008048:	3720      	adds	r7, #32
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b090      	sub	sp, #64	; 0x40
 8008052:	af00      	add	r7, sp, #0
 8008054:	60f8      	str	r0, [r7, #12]
 8008056:	60b9      	str	r1, [r7, #8]
 8008058:	603b      	str	r3, [r7, #0]
 800805a:	4613      	mov	r3, r2
 800805c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800805e:	e050      	b.n	8008102 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008066:	d04c      	beq.n	8008102 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008068:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800806a:	2b00      	cmp	r3, #0
 800806c:	d007      	beq.n	800807e <UART_WaitOnFlagUntilTimeout+0x30>
 800806e:	f7fd ff6b 	bl	8005f48 <HAL_GetTick>
 8008072:	4602      	mov	r2, r0
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800807a:	429a      	cmp	r2, r3
 800807c:	d241      	bcs.n	8008102 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	330c      	adds	r3, #12
 8008084:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008088:	e853 3f00 	ldrex	r3, [r3]
 800808c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800808e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008090:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008094:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	330c      	adds	r3, #12
 800809c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800809e:	637a      	str	r2, [r7, #52]	; 0x34
 80080a0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080a6:	e841 2300 	strex	r3, r2, [r1]
 80080aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80080ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1e5      	bne.n	800807e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	3314      	adds	r3, #20
 80080b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	e853 3f00 	ldrex	r3, [r3]
 80080c0:	613b      	str	r3, [r7, #16]
   return(result);
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	f023 0301 	bic.w	r3, r3, #1
 80080c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	3314      	adds	r3, #20
 80080d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080d2:	623a      	str	r2, [r7, #32]
 80080d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d6:	69f9      	ldr	r1, [r7, #28]
 80080d8:	6a3a      	ldr	r2, [r7, #32]
 80080da:	e841 2300 	strex	r3, r2, [r1]
 80080de:	61bb      	str	r3, [r7, #24]
   return(result);
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1e5      	bne.n	80080b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2220      	movs	r2, #32
 80080ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2220      	movs	r2, #32
 80080f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e00f      	b.n	8008122 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	4013      	ands	r3, r2
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	429a      	cmp	r2, r3
 8008110:	bf0c      	ite	eq
 8008112:	2301      	moveq	r3, #1
 8008114:	2300      	movne	r3, #0
 8008116:	b2db      	uxtb	r3, r3
 8008118:	461a      	mov	r2, r3
 800811a:	79fb      	ldrb	r3, [r7, #7]
 800811c:	429a      	cmp	r2, r3
 800811e:	d09f      	beq.n	8008060 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3740      	adds	r7, #64	; 0x40
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
	...

0800812c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800812c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008130:	b09f      	sub	sp, #124	; 0x7c
 8008132:	af00      	add	r7, sp, #0
 8008134:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008142:	68d9      	ldr	r1, [r3, #12]
 8008144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	ea40 0301 	orr.w	r3, r0, r1
 800814c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800814e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008150:	689a      	ldr	r2, [r3, #8]
 8008152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	431a      	orrs	r2, r3
 8008158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800815a:	695b      	ldr	r3, [r3, #20]
 800815c:	431a      	orrs	r2, r3
 800815e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008160:	69db      	ldr	r3, [r3, #28]
 8008162:	4313      	orrs	r3, r2
 8008164:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008170:	f021 010c 	bic.w	r1, r1, #12
 8008174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800817a:	430b      	orrs	r3, r1
 800817c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800817e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	695b      	ldr	r3, [r3, #20]
 8008184:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800818a:	6999      	ldr	r1, [r3, #24]
 800818c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	ea40 0301 	orr.w	r3, r0, r1
 8008194:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	4bc5      	ldr	r3, [pc, #788]	; (80084b0 <UART_SetConfig+0x384>)
 800819c:	429a      	cmp	r2, r3
 800819e:	d004      	beq.n	80081aa <UART_SetConfig+0x7e>
 80081a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	4bc3      	ldr	r3, [pc, #780]	; (80084b4 <UART_SetConfig+0x388>)
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d103      	bne.n	80081b2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80081aa:	f7fe fa97 	bl	80066dc <HAL_RCC_GetPCLK2Freq>
 80081ae:	6778      	str	r0, [r7, #116]	; 0x74
 80081b0:	e002      	b.n	80081b8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80081b2:	f7fe fa7f 	bl	80066b4 <HAL_RCC_GetPCLK1Freq>
 80081b6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081ba:	69db      	ldr	r3, [r3, #28]
 80081bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081c0:	f040 80b6 	bne.w	8008330 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80081c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081c6:	461c      	mov	r4, r3
 80081c8:	f04f 0500 	mov.w	r5, #0
 80081cc:	4622      	mov	r2, r4
 80081ce:	462b      	mov	r3, r5
 80081d0:	1891      	adds	r1, r2, r2
 80081d2:	6439      	str	r1, [r7, #64]	; 0x40
 80081d4:	415b      	adcs	r3, r3
 80081d6:	647b      	str	r3, [r7, #68]	; 0x44
 80081d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80081dc:	1912      	adds	r2, r2, r4
 80081de:	eb45 0303 	adc.w	r3, r5, r3
 80081e2:	f04f 0000 	mov.w	r0, #0
 80081e6:	f04f 0100 	mov.w	r1, #0
 80081ea:	00d9      	lsls	r1, r3, #3
 80081ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80081f0:	00d0      	lsls	r0, r2, #3
 80081f2:	4602      	mov	r2, r0
 80081f4:	460b      	mov	r3, r1
 80081f6:	1911      	adds	r1, r2, r4
 80081f8:	6639      	str	r1, [r7, #96]	; 0x60
 80081fa:	416b      	adcs	r3, r5
 80081fc:	667b      	str	r3, [r7, #100]	; 0x64
 80081fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	461a      	mov	r2, r3
 8008204:	f04f 0300 	mov.w	r3, #0
 8008208:	1891      	adds	r1, r2, r2
 800820a:	63b9      	str	r1, [r7, #56]	; 0x38
 800820c:	415b      	adcs	r3, r3
 800820e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008210:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008214:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008218:	f7f8 f84a 	bl	80002b0 <__aeabi_uldivmod>
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	4ba5      	ldr	r3, [pc, #660]	; (80084b8 <UART_SetConfig+0x38c>)
 8008222:	fba3 2302 	umull	r2, r3, r3, r2
 8008226:	095b      	lsrs	r3, r3, #5
 8008228:	011e      	lsls	r6, r3, #4
 800822a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800822c:	461c      	mov	r4, r3
 800822e:	f04f 0500 	mov.w	r5, #0
 8008232:	4622      	mov	r2, r4
 8008234:	462b      	mov	r3, r5
 8008236:	1891      	adds	r1, r2, r2
 8008238:	6339      	str	r1, [r7, #48]	; 0x30
 800823a:	415b      	adcs	r3, r3
 800823c:	637b      	str	r3, [r7, #52]	; 0x34
 800823e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008242:	1912      	adds	r2, r2, r4
 8008244:	eb45 0303 	adc.w	r3, r5, r3
 8008248:	f04f 0000 	mov.w	r0, #0
 800824c:	f04f 0100 	mov.w	r1, #0
 8008250:	00d9      	lsls	r1, r3, #3
 8008252:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008256:	00d0      	lsls	r0, r2, #3
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	1911      	adds	r1, r2, r4
 800825e:	65b9      	str	r1, [r7, #88]	; 0x58
 8008260:	416b      	adcs	r3, r5
 8008262:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	461a      	mov	r2, r3
 800826a:	f04f 0300 	mov.w	r3, #0
 800826e:	1891      	adds	r1, r2, r2
 8008270:	62b9      	str	r1, [r7, #40]	; 0x28
 8008272:	415b      	adcs	r3, r3
 8008274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008276:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800827a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800827e:	f7f8 f817 	bl	80002b0 <__aeabi_uldivmod>
 8008282:	4602      	mov	r2, r0
 8008284:	460b      	mov	r3, r1
 8008286:	4b8c      	ldr	r3, [pc, #560]	; (80084b8 <UART_SetConfig+0x38c>)
 8008288:	fba3 1302 	umull	r1, r3, r3, r2
 800828c:	095b      	lsrs	r3, r3, #5
 800828e:	2164      	movs	r1, #100	; 0x64
 8008290:	fb01 f303 	mul.w	r3, r1, r3
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	00db      	lsls	r3, r3, #3
 8008298:	3332      	adds	r3, #50	; 0x32
 800829a:	4a87      	ldr	r2, [pc, #540]	; (80084b8 <UART_SetConfig+0x38c>)
 800829c:	fba2 2303 	umull	r2, r3, r2, r3
 80082a0:	095b      	lsrs	r3, r3, #5
 80082a2:	005b      	lsls	r3, r3, #1
 80082a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082a8:	441e      	add	r6, r3
 80082aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082ac:	4618      	mov	r0, r3
 80082ae:	f04f 0100 	mov.w	r1, #0
 80082b2:	4602      	mov	r2, r0
 80082b4:	460b      	mov	r3, r1
 80082b6:	1894      	adds	r4, r2, r2
 80082b8:	623c      	str	r4, [r7, #32]
 80082ba:	415b      	adcs	r3, r3
 80082bc:	627b      	str	r3, [r7, #36]	; 0x24
 80082be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80082c2:	1812      	adds	r2, r2, r0
 80082c4:	eb41 0303 	adc.w	r3, r1, r3
 80082c8:	f04f 0400 	mov.w	r4, #0
 80082cc:	f04f 0500 	mov.w	r5, #0
 80082d0:	00dd      	lsls	r5, r3, #3
 80082d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80082d6:	00d4      	lsls	r4, r2, #3
 80082d8:	4622      	mov	r2, r4
 80082da:	462b      	mov	r3, r5
 80082dc:	1814      	adds	r4, r2, r0
 80082de:	653c      	str	r4, [r7, #80]	; 0x50
 80082e0:	414b      	adcs	r3, r1
 80082e2:	657b      	str	r3, [r7, #84]	; 0x54
 80082e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	461a      	mov	r2, r3
 80082ea:	f04f 0300 	mov.w	r3, #0
 80082ee:	1891      	adds	r1, r2, r2
 80082f0:	61b9      	str	r1, [r7, #24]
 80082f2:	415b      	adcs	r3, r3
 80082f4:	61fb      	str	r3, [r7, #28]
 80082f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80082fe:	f7f7 ffd7 	bl	80002b0 <__aeabi_uldivmod>
 8008302:	4602      	mov	r2, r0
 8008304:	460b      	mov	r3, r1
 8008306:	4b6c      	ldr	r3, [pc, #432]	; (80084b8 <UART_SetConfig+0x38c>)
 8008308:	fba3 1302 	umull	r1, r3, r3, r2
 800830c:	095b      	lsrs	r3, r3, #5
 800830e:	2164      	movs	r1, #100	; 0x64
 8008310:	fb01 f303 	mul.w	r3, r1, r3
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	00db      	lsls	r3, r3, #3
 8008318:	3332      	adds	r3, #50	; 0x32
 800831a:	4a67      	ldr	r2, [pc, #412]	; (80084b8 <UART_SetConfig+0x38c>)
 800831c:	fba2 2303 	umull	r2, r3, r2, r3
 8008320:	095b      	lsrs	r3, r3, #5
 8008322:	f003 0207 	and.w	r2, r3, #7
 8008326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4432      	add	r2, r6
 800832c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800832e:	e0b9      	b.n	80084a4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008330:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008332:	461c      	mov	r4, r3
 8008334:	f04f 0500 	mov.w	r5, #0
 8008338:	4622      	mov	r2, r4
 800833a:	462b      	mov	r3, r5
 800833c:	1891      	adds	r1, r2, r2
 800833e:	6139      	str	r1, [r7, #16]
 8008340:	415b      	adcs	r3, r3
 8008342:	617b      	str	r3, [r7, #20]
 8008344:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008348:	1912      	adds	r2, r2, r4
 800834a:	eb45 0303 	adc.w	r3, r5, r3
 800834e:	f04f 0000 	mov.w	r0, #0
 8008352:	f04f 0100 	mov.w	r1, #0
 8008356:	00d9      	lsls	r1, r3, #3
 8008358:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800835c:	00d0      	lsls	r0, r2, #3
 800835e:	4602      	mov	r2, r0
 8008360:	460b      	mov	r3, r1
 8008362:	eb12 0804 	adds.w	r8, r2, r4
 8008366:	eb43 0905 	adc.w	r9, r3, r5
 800836a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	4618      	mov	r0, r3
 8008370:	f04f 0100 	mov.w	r1, #0
 8008374:	f04f 0200 	mov.w	r2, #0
 8008378:	f04f 0300 	mov.w	r3, #0
 800837c:	008b      	lsls	r3, r1, #2
 800837e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008382:	0082      	lsls	r2, r0, #2
 8008384:	4640      	mov	r0, r8
 8008386:	4649      	mov	r1, r9
 8008388:	f7f7 ff92 	bl	80002b0 <__aeabi_uldivmod>
 800838c:	4602      	mov	r2, r0
 800838e:	460b      	mov	r3, r1
 8008390:	4b49      	ldr	r3, [pc, #292]	; (80084b8 <UART_SetConfig+0x38c>)
 8008392:	fba3 2302 	umull	r2, r3, r3, r2
 8008396:	095b      	lsrs	r3, r3, #5
 8008398:	011e      	lsls	r6, r3, #4
 800839a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800839c:	4618      	mov	r0, r3
 800839e:	f04f 0100 	mov.w	r1, #0
 80083a2:	4602      	mov	r2, r0
 80083a4:	460b      	mov	r3, r1
 80083a6:	1894      	adds	r4, r2, r2
 80083a8:	60bc      	str	r4, [r7, #8]
 80083aa:	415b      	adcs	r3, r3
 80083ac:	60fb      	str	r3, [r7, #12]
 80083ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80083b2:	1812      	adds	r2, r2, r0
 80083b4:	eb41 0303 	adc.w	r3, r1, r3
 80083b8:	f04f 0400 	mov.w	r4, #0
 80083bc:	f04f 0500 	mov.w	r5, #0
 80083c0:	00dd      	lsls	r5, r3, #3
 80083c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80083c6:	00d4      	lsls	r4, r2, #3
 80083c8:	4622      	mov	r2, r4
 80083ca:	462b      	mov	r3, r5
 80083cc:	1814      	adds	r4, r2, r0
 80083ce:	64bc      	str	r4, [r7, #72]	; 0x48
 80083d0:	414b      	adcs	r3, r1
 80083d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	4618      	mov	r0, r3
 80083da:	f04f 0100 	mov.w	r1, #0
 80083de:	f04f 0200 	mov.w	r2, #0
 80083e2:	f04f 0300 	mov.w	r3, #0
 80083e6:	008b      	lsls	r3, r1, #2
 80083e8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80083ec:	0082      	lsls	r2, r0, #2
 80083ee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80083f2:	f7f7 ff5d 	bl	80002b0 <__aeabi_uldivmod>
 80083f6:	4602      	mov	r2, r0
 80083f8:	460b      	mov	r3, r1
 80083fa:	4b2f      	ldr	r3, [pc, #188]	; (80084b8 <UART_SetConfig+0x38c>)
 80083fc:	fba3 1302 	umull	r1, r3, r3, r2
 8008400:	095b      	lsrs	r3, r3, #5
 8008402:	2164      	movs	r1, #100	; 0x64
 8008404:	fb01 f303 	mul.w	r3, r1, r3
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	011b      	lsls	r3, r3, #4
 800840c:	3332      	adds	r3, #50	; 0x32
 800840e:	4a2a      	ldr	r2, [pc, #168]	; (80084b8 <UART_SetConfig+0x38c>)
 8008410:	fba2 2303 	umull	r2, r3, r2, r3
 8008414:	095b      	lsrs	r3, r3, #5
 8008416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800841a:	441e      	add	r6, r3
 800841c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800841e:	4618      	mov	r0, r3
 8008420:	f04f 0100 	mov.w	r1, #0
 8008424:	4602      	mov	r2, r0
 8008426:	460b      	mov	r3, r1
 8008428:	1894      	adds	r4, r2, r2
 800842a:	603c      	str	r4, [r7, #0]
 800842c:	415b      	adcs	r3, r3
 800842e:	607b      	str	r3, [r7, #4]
 8008430:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008434:	1812      	adds	r2, r2, r0
 8008436:	eb41 0303 	adc.w	r3, r1, r3
 800843a:	f04f 0400 	mov.w	r4, #0
 800843e:	f04f 0500 	mov.w	r5, #0
 8008442:	00dd      	lsls	r5, r3, #3
 8008444:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008448:	00d4      	lsls	r4, r2, #3
 800844a:	4622      	mov	r2, r4
 800844c:	462b      	mov	r3, r5
 800844e:	eb12 0a00 	adds.w	sl, r2, r0
 8008452:	eb43 0b01 	adc.w	fp, r3, r1
 8008456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	4618      	mov	r0, r3
 800845c:	f04f 0100 	mov.w	r1, #0
 8008460:	f04f 0200 	mov.w	r2, #0
 8008464:	f04f 0300 	mov.w	r3, #0
 8008468:	008b      	lsls	r3, r1, #2
 800846a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800846e:	0082      	lsls	r2, r0, #2
 8008470:	4650      	mov	r0, sl
 8008472:	4659      	mov	r1, fp
 8008474:	f7f7 ff1c 	bl	80002b0 <__aeabi_uldivmod>
 8008478:	4602      	mov	r2, r0
 800847a:	460b      	mov	r3, r1
 800847c:	4b0e      	ldr	r3, [pc, #56]	; (80084b8 <UART_SetConfig+0x38c>)
 800847e:	fba3 1302 	umull	r1, r3, r3, r2
 8008482:	095b      	lsrs	r3, r3, #5
 8008484:	2164      	movs	r1, #100	; 0x64
 8008486:	fb01 f303 	mul.w	r3, r1, r3
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	011b      	lsls	r3, r3, #4
 800848e:	3332      	adds	r3, #50	; 0x32
 8008490:	4a09      	ldr	r2, [pc, #36]	; (80084b8 <UART_SetConfig+0x38c>)
 8008492:	fba2 2303 	umull	r2, r3, r2, r3
 8008496:	095b      	lsrs	r3, r3, #5
 8008498:	f003 020f 	and.w	r2, r3, #15
 800849c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4432      	add	r2, r6
 80084a2:	609a      	str	r2, [r3, #8]
}
 80084a4:	bf00      	nop
 80084a6:	377c      	adds	r7, #124	; 0x7c
 80084a8:	46bd      	mov	sp, r7
 80084aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ae:	bf00      	nop
 80084b0:	40011000 	.word	0x40011000
 80084b4:	40011400 	.word	0x40011400
 80084b8:	51eb851f 	.word	0x51eb851f

080084bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80084c0:	4904      	ldr	r1, [pc, #16]	; (80084d4 <MX_FATFS_Init+0x18>)
 80084c2:	4805      	ldr	r0, [pc, #20]	; (80084d8 <MX_FATFS_Init+0x1c>)
 80084c4:	f002 febe 	bl	800b244 <FATFS_LinkDriver>
 80084c8:	4603      	mov	r3, r0
 80084ca:	461a      	mov	r2, r3
 80084cc:	4b03      	ldr	r3, [pc, #12]	; (80084dc <MX_FATFS_Init+0x20>)
 80084ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80084d0:	bf00      	nop
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	200054f4 	.word	0x200054f4
 80084d8:	2000001c 	.word	0x2000001c
 80084dc:	200054f8 	.word	0x200054f8

080084e0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80084e0:	b480      	push	{r7}
 80084e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80084e4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	4603      	mov	r3, r0
 80084f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80084fa:	4b06      	ldr	r3, [pc, #24]	; (8008514 <USER_initialize+0x24>)
 80084fc:	2201      	movs	r2, #1
 80084fe:	701a      	strb	r2, [r3, #0]
    return SD_disk_initialize (pdrv);
 8008500:	79fb      	ldrb	r3, [r7, #7]
 8008502:	4618      	mov	r0, r3
 8008504:	f7f8 fa0a 	bl	800091c <SD_disk_initialize>
 8008508:	4603      	mov	r3, r0
 800850a:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800850c:	4618      	mov	r0, r3
 800850e:	3708      	adds	r7, #8
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}
 8008514:	20000019 	.word	0x20000019

08008518 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	4603      	mov	r3, r0
 8008520:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8008522:	4b06      	ldr	r3, [pc, #24]	; (800853c <USER_status+0x24>)
 8008524:	2201      	movs	r2, #1
 8008526:	701a      	strb	r2, [r3, #0]
    return SD_disk_status (pdrv);
 8008528:	79fb      	ldrb	r3, [r7, #7]
 800852a:	4618      	mov	r0, r3
 800852c:	f7f8 fae0 	bl	8000af0 <SD_disk_status>
 8008530:	4603      	mov	r3, r0
 8008532:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8008534:	4618      	mov	r0, r3
 8008536:	3708      	adds	r7, #8
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	20000019 	.word	0x20000019

08008540 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	60b9      	str	r1, [r7, #8]
 8008548:	607a      	str	r2, [r7, #4]
 800854a:	603b      	str	r3, [r7, #0]
 800854c:	4603      	mov	r3, r0
 800854e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff, sector, count);
 8008550:	7bf8      	ldrb	r0, [r7, #15]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	68b9      	ldr	r1, [r7, #8]
 8008558:	f7f8 fae0 	bl	8000b1c <SD_disk_read>
 800855c:	4603      	mov	r3, r0
 800855e:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8008560:	4618      	mov	r0, r3
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	60b9      	str	r1, [r7, #8]
 8008570:	607a      	str	r2, [r7, #4]
 8008572:	603b      	str	r3, [r7, #0]
 8008574:	4603      	mov	r3, r0
 8008576:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8008578:	7bf8      	ldrb	r0, [r7, #15]
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	68b9      	ldr	r1, [r7, #8]
 8008580:	f7f8 fb36 	bl	8000bf0 <SD_disk_write>
 8008584:	4603      	mov	r3, r0
 8008586:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8008588:	4618      	mov	r0, r3
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	4603      	mov	r3, r0
 8008598:	603a      	str	r2, [r7, #0]
 800859a:	71fb      	strb	r3, [r7, #7]
 800859c:	460b      	mov	r3, r1
 800859e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	73fb      	strb	r3, [r7, #15]
    return SD_disk_ioctl (pdrv, cmd, buff);
 80085a4:	79fb      	ldrb	r3, [r7, #7]
 80085a6:	79b9      	ldrb	r1, [r7, #6]
 80085a8:	683a      	ldr	r2, [r7, #0]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7f8 fba4 	bl	8000cf8 <SD_disk_ioctl>
 80085b0:	4603      	mov	r3, r0
 80085b2:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	4603      	mov	r3, r0
 80085c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80085c6:	79fb      	ldrb	r3, [r7, #7]
 80085c8:	4a08      	ldr	r2, [pc, #32]	; (80085ec <disk_status+0x30>)
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	4413      	add	r3, r2
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	79fa      	ldrb	r2, [r7, #7]
 80085d4:	4905      	ldr	r1, [pc, #20]	; (80085ec <disk_status+0x30>)
 80085d6:	440a      	add	r2, r1
 80085d8:	7a12      	ldrb	r2, [r2, #8]
 80085da:	4610      	mov	r0, r2
 80085dc:	4798      	blx	r3
 80085de:	4603      	mov	r3, r0
 80085e0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80085e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	200002fc 	.word	0x200002fc

080085f0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	4603      	mov	r3, r0
 80085f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80085fa:	2300      	movs	r3, #0
 80085fc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80085fe:	79fb      	ldrb	r3, [r7, #7]
 8008600:	4a0d      	ldr	r2, [pc, #52]	; (8008638 <disk_initialize+0x48>)
 8008602:	5cd3      	ldrb	r3, [r2, r3]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d111      	bne.n	800862c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008608:	79fb      	ldrb	r3, [r7, #7]
 800860a:	4a0b      	ldr	r2, [pc, #44]	; (8008638 <disk_initialize+0x48>)
 800860c:	2101      	movs	r1, #1
 800860e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008610:	79fb      	ldrb	r3, [r7, #7]
 8008612:	4a09      	ldr	r2, [pc, #36]	; (8008638 <disk_initialize+0x48>)
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4413      	add	r3, r2
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	79fa      	ldrb	r2, [r7, #7]
 800861e:	4906      	ldr	r1, [pc, #24]	; (8008638 <disk_initialize+0x48>)
 8008620:	440a      	add	r2, r1
 8008622:	7a12      	ldrb	r2, [r2, #8]
 8008624:	4610      	mov	r0, r2
 8008626:	4798      	blx	r3
 8008628:	4603      	mov	r3, r0
 800862a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800862c:	7bfb      	ldrb	r3, [r7, #15]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	200002fc 	.word	0x200002fc

0800863c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800863c:	b590      	push	{r4, r7, lr}
 800863e:	b087      	sub	sp, #28
 8008640:	af00      	add	r7, sp, #0
 8008642:	60b9      	str	r1, [r7, #8]
 8008644:	607a      	str	r2, [r7, #4]
 8008646:	603b      	str	r3, [r7, #0]
 8008648:	4603      	mov	r3, r0
 800864a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800864c:	7bfb      	ldrb	r3, [r7, #15]
 800864e:	4a0a      	ldr	r2, [pc, #40]	; (8008678 <disk_read+0x3c>)
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	4413      	add	r3, r2
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	689c      	ldr	r4, [r3, #8]
 8008658:	7bfb      	ldrb	r3, [r7, #15]
 800865a:	4a07      	ldr	r2, [pc, #28]	; (8008678 <disk_read+0x3c>)
 800865c:	4413      	add	r3, r2
 800865e:	7a18      	ldrb	r0, [r3, #8]
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	68b9      	ldr	r1, [r7, #8]
 8008666:	47a0      	blx	r4
 8008668:	4603      	mov	r3, r0
 800866a:	75fb      	strb	r3, [r7, #23]
  return res;
 800866c:	7dfb      	ldrb	r3, [r7, #23]
}
 800866e:	4618      	mov	r0, r3
 8008670:	371c      	adds	r7, #28
 8008672:	46bd      	mov	sp, r7
 8008674:	bd90      	pop	{r4, r7, pc}
 8008676:	bf00      	nop
 8008678:	200002fc 	.word	0x200002fc

0800867c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800867c:	b590      	push	{r4, r7, lr}
 800867e:	b087      	sub	sp, #28
 8008680:	af00      	add	r7, sp, #0
 8008682:	60b9      	str	r1, [r7, #8]
 8008684:	607a      	str	r2, [r7, #4]
 8008686:	603b      	str	r3, [r7, #0]
 8008688:	4603      	mov	r3, r0
 800868a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800868c:	7bfb      	ldrb	r3, [r7, #15]
 800868e:	4a0a      	ldr	r2, [pc, #40]	; (80086b8 <disk_write+0x3c>)
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	68dc      	ldr	r4, [r3, #12]
 8008698:	7bfb      	ldrb	r3, [r7, #15]
 800869a:	4a07      	ldr	r2, [pc, #28]	; (80086b8 <disk_write+0x3c>)
 800869c:	4413      	add	r3, r2
 800869e:	7a18      	ldrb	r0, [r3, #8]
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	68b9      	ldr	r1, [r7, #8]
 80086a6:	47a0      	blx	r4
 80086a8:	4603      	mov	r3, r0
 80086aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80086ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	371c      	adds	r7, #28
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd90      	pop	{r4, r7, pc}
 80086b6:	bf00      	nop
 80086b8:	200002fc 	.word	0x200002fc

080086bc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	4603      	mov	r3, r0
 80086c4:	603a      	str	r2, [r7, #0]
 80086c6:	71fb      	strb	r3, [r7, #7]
 80086c8:	460b      	mov	r3, r1
 80086ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80086cc:	79fb      	ldrb	r3, [r7, #7]
 80086ce:	4a09      	ldr	r2, [pc, #36]	; (80086f4 <disk_ioctl+0x38>)
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	4413      	add	r3, r2
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	79fa      	ldrb	r2, [r7, #7]
 80086da:	4906      	ldr	r1, [pc, #24]	; (80086f4 <disk_ioctl+0x38>)
 80086dc:	440a      	add	r2, r1
 80086de:	7a10      	ldrb	r0, [r2, #8]
 80086e0:	79b9      	ldrb	r1, [r7, #6]
 80086e2:	683a      	ldr	r2, [r7, #0]
 80086e4:	4798      	blx	r3
 80086e6:	4603      	mov	r3, r0
 80086e8:	73fb      	strb	r3, [r7, #15]
  return res;
 80086ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	200002fc 	.word	0x200002fc

080086f8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	3301      	adds	r3, #1
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008708:	89fb      	ldrh	r3, [r7, #14]
 800870a:	021b      	lsls	r3, r3, #8
 800870c:	b21a      	sxth	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	b21b      	sxth	r3, r3
 8008714:	4313      	orrs	r3, r2
 8008716:	b21b      	sxth	r3, r3
 8008718:	81fb      	strh	r3, [r7, #14]
	return rv;
 800871a:	89fb      	ldrh	r3, [r7, #14]
}
 800871c:	4618      	mov	r0, r3
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	3303      	adds	r3, #3
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	021b      	lsls	r3, r3, #8
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	3202      	adds	r2, #2
 8008740:	7812      	ldrb	r2, [r2, #0]
 8008742:	4313      	orrs	r3, r2
 8008744:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	021b      	lsls	r3, r3, #8
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	3201      	adds	r2, #1
 800874e:	7812      	ldrb	r2, [r2, #0]
 8008750:	4313      	orrs	r3, r2
 8008752:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	021b      	lsls	r3, r3, #8
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	7812      	ldrb	r2, [r2, #0]
 800875c:	4313      	orrs	r3, r2
 800875e:	60fb      	str	r3, [r7, #12]
	return rv;
 8008760:	68fb      	ldr	r3, [r7, #12]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3714      	adds	r7, #20
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr

0800876e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800876e:	b480      	push	{r7}
 8008770:	b083      	sub	sp, #12
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
 8008776:	460b      	mov	r3, r1
 8008778:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	1c5a      	adds	r2, r3, #1
 800877e:	607a      	str	r2, [r7, #4]
 8008780:	887a      	ldrh	r2, [r7, #2]
 8008782:	b2d2      	uxtb	r2, r2
 8008784:	701a      	strb	r2, [r3, #0]
 8008786:	887b      	ldrh	r3, [r7, #2]
 8008788:	0a1b      	lsrs	r3, r3, #8
 800878a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	1c5a      	adds	r2, r3, #1
 8008790:	607a      	str	r2, [r7, #4]
 8008792:	887a      	ldrh	r2, [r7, #2]
 8008794:	b2d2      	uxtb	r2, r2
 8008796:	701a      	strb	r2, [r3, #0]
}
 8008798:	bf00      	nop
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	1c5a      	adds	r2, r3, #1
 80087b2:	607a      	str	r2, [r7, #4]
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	b2d2      	uxtb	r2, r2
 80087b8:	701a      	strb	r2, [r3, #0]
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	0a1b      	lsrs	r3, r3, #8
 80087be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	1c5a      	adds	r2, r3, #1
 80087c4:	607a      	str	r2, [r7, #4]
 80087c6:	683a      	ldr	r2, [r7, #0]
 80087c8:	b2d2      	uxtb	r2, r2
 80087ca:	701a      	strb	r2, [r3, #0]
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	0a1b      	lsrs	r3, r3, #8
 80087d0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	1c5a      	adds	r2, r3, #1
 80087d6:	607a      	str	r2, [r7, #4]
 80087d8:	683a      	ldr	r2, [r7, #0]
 80087da:	b2d2      	uxtb	r2, r2
 80087dc:	701a      	strb	r2, [r3, #0]
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	0a1b      	lsrs	r3, r3, #8
 80087e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	1c5a      	adds	r2, r3, #1
 80087e8:	607a      	str	r2, [r7, #4]
 80087ea:	683a      	ldr	r2, [r7, #0]
 80087ec:	b2d2      	uxtb	r2, r2
 80087ee:	701a      	strb	r2, [r3, #0]
}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80087fc:	b480      	push	{r7}
 80087fe:	b087      	sub	sp, #28
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00d      	beq.n	8008832 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008816:	693a      	ldr	r2, [r7, #16]
 8008818:	1c53      	adds	r3, r2, #1
 800881a:	613b      	str	r3, [r7, #16]
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	1c59      	adds	r1, r3, #1
 8008820:	6179      	str	r1, [r7, #20]
 8008822:	7812      	ldrb	r2, [r2, #0]
 8008824:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	3b01      	subs	r3, #1
 800882a:	607b      	str	r3, [r7, #4]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1f1      	bne.n	8008816 <mem_cpy+0x1a>
	}
}
 8008832:	bf00      	nop
 8008834:	371c      	adds	r7, #28
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr

0800883e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800883e:	b480      	push	{r7}
 8008840:	b087      	sub	sp, #28
 8008842:	af00      	add	r7, sp, #0
 8008844:	60f8      	str	r0, [r7, #12]
 8008846:	60b9      	str	r1, [r7, #8]
 8008848:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	1c5a      	adds	r2, r3, #1
 8008852:	617a      	str	r2, [r7, #20]
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	b2d2      	uxtb	r2, r2
 8008858:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	3b01      	subs	r3, #1
 800885e:	607b      	str	r3, [r7, #4]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1f3      	bne.n	800884e <mem_set+0x10>
}
 8008866:	bf00      	nop
 8008868:	bf00      	nop
 800886a:	371c      	adds	r7, #28
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008874:	b480      	push	{r7}
 8008876:	b089      	sub	sp, #36	; 0x24
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	61fb      	str	r3, [r7, #28]
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008888:	2300      	movs	r3, #0
 800888a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	1c5a      	adds	r2, r3, #1
 8008890:	61fa      	str	r2, [r7, #28]
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	4619      	mov	r1, r3
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	1c5a      	adds	r2, r3, #1
 800889a:	61ba      	str	r2, [r7, #24]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	1acb      	subs	r3, r1, r3
 80088a0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	3b01      	subs	r3, #1
 80088a6:	607b      	str	r3, [r7, #4]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d002      	beq.n	80088b4 <mem_cmp+0x40>
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d0eb      	beq.n	800888c <mem_cmp+0x18>

	return r;
 80088b4:	697b      	ldr	r3, [r7, #20]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3724      	adds	r7, #36	; 0x24
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr

080088c2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80088c2:	b480      	push	{r7}
 80088c4:	b083      	sub	sp, #12
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
 80088ca:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80088cc:	e002      	b.n	80088d4 <chk_chr+0x12>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	3301      	adds	r3, #1
 80088d2:	607b      	str	r3, [r7, #4]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d005      	beq.n	80088e8 <chk_chr+0x26>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	461a      	mov	r2, r3
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d1f2      	bne.n	80088ce <chk_chr+0xc>
	return *str;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	781b      	ldrb	r3, [r3, #0]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008902:	2300      	movs	r3, #0
 8008904:	60bb      	str	r3, [r7, #8]
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	60fb      	str	r3, [r7, #12]
 800890a:	e029      	b.n	8008960 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800890c:	4a27      	ldr	r2, [pc, #156]	; (80089ac <chk_lock+0xb4>)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	011b      	lsls	r3, r3, #4
 8008912:	4413      	add	r3, r2
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d01d      	beq.n	8008956 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800891a:	4a24      	ldr	r2, [pc, #144]	; (80089ac <chk_lock+0xb4>)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	011b      	lsls	r3, r3, #4
 8008920:	4413      	add	r3, r2
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	429a      	cmp	r2, r3
 800892a:	d116      	bne.n	800895a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800892c:	4a1f      	ldr	r2, [pc, #124]	; (80089ac <chk_lock+0xb4>)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	011b      	lsls	r3, r3, #4
 8008932:	4413      	add	r3, r2
 8008934:	3304      	adds	r3, #4
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800893c:	429a      	cmp	r2, r3
 800893e:	d10c      	bne.n	800895a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008940:	4a1a      	ldr	r2, [pc, #104]	; (80089ac <chk_lock+0xb4>)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	011b      	lsls	r3, r3, #4
 8008946:	4413      	add	r3, r2
 8008948:	3308      	adds	r3, #8
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008950:	429a      	cmp	r2, r3
 8008952:	d102      	bne.n	800895a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008954:	e007      	b.n	8008966 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008956:	2301      	movs	r3, #1
 8008958:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	3301      	adds	r3, #1
 800895e:	60fb      	str	r3, [r7, #12]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2b01      	cmp	r3, #1
 8008964:	d9d2      	bls.n	800890c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2b02      	cmp	r3, #2
 800896a:	d109      	bne.n	8008980 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d102      	bne.n	8008978 <chk_lock+0x80>
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	2b02      	cmp	r3, #2
 8008976:	d101      	bne.n	800897c <chk_lock+0x84>
 8008978:	2300      	movs	r3, #0
 800897a:	e010      	b.n	800899e <chk_lock+0xa6>
 800897c:	2312      	movs	r3, #18
 800897e:	e00e      	b.n	800899e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d108      	bne.n	8008998 <chk_lock+0xa0>
 8008986:	4a09      	ldr	r2, [pc, #36]	; (80089ac <chk_lock+0xb4>)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	011b      	lsls	r3, r3, #4
 800898c:	4413      	add	r3, r2
 800898e:	330c      	adds	r3, #12
 8008990:	881b      	ldrh	r3, [r3, #0]
 8008992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008996:	d101      	bne.n	800899c <chk_lock+0xa4>
 8008998:	2310      	movs	r3, #16
 800899a:	e000      	b.n	800899e <chk_lock+0xa6>
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3714      	adds	r7, #20
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	200000dc 	.word	0x200000dc

080089b0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80089b6:	2300      	movs	r3, #0
 80089b8:	607b      	str	r3, [r7, #4]
 80089ba:	e002      	b.n	80089c2 <enq_lock+0x12>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	3301      	adds	r3, #1
 80089c0:	607b      	str	r3, [r7, #4]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d806      	bhi.n	80089d6 <enq_lock+0x26>
 80089c8:	4a09      	ldr	r2, [pc, #36]	; (80089f0 <enq_lock+0x40>)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	011b      	lsls	r3, r3, #4
 80089ce:	4413      	add	r3, r2
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1f2      	bne.n	80089bc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2b02      	cmp	r3, #2
 80089da:	bf14      	ite	ne
 80089dc:	2301      	movne	r3, #1
 80089de:	2300      	moveq	r3, #0
 80089e0:	b2db      	uxtb	r3, r3
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	370c      	adds	r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	200000dc 	.word	0x200000dc

080089f4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80089fe:	2300      	movs	r3, #0
 8008a00:	60fb      	str	r3, [r7, #12]
 8008a02:	e01f      	b.n	8008a44 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008a04:	4a41      	ldr	r2, [pc, #260]	; (8008b0c <inc_lock+0x118>)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	011b      	lsls	r3, r3, #4
 8008a0a:	4413      	add	r3, r2
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d113      	bne.n	8008a3e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008a16:	4a3d      	ldr	r2, [pc, #244]	; (8008b0c <inc_lock+0x118>)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	011b      	lsls	r3, r3, #4
 8008a1c:	4413      	add	r3, r2
 8008a1e:	3304      	adds	r3, #4
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d109      	bne.n	8008a3e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008a2a:	4a38      	ldr	r2, [pc, #224]	; (8008b0c <inc_lock+0x118>)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	011b      	lsls	r3, r3, #4
 8008a30:	4413      	add	r3, r2
 8008a32:	3308      	adds	r3, #8
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d006      	beq.n	8008a4c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	3301      	adds	r3, #1
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d9dc      	bls.n	8008a04 <inc_lock+0x10>
 8008a4a:	e000      	b.n	8008a4e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008a4c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	d132      	bne.n	8008aba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008a54:	2300      	movs	r3, #0
 8008a56:	60fb      	str	r3, [r7, #12]
 8008a58:	e002      	b.n	8008a60 <inc_lock+0x6c>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	60fb      	str	r3, [r7, #12]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d806      	bhi.n	8008a74 <inc_lock+0x80>
 8008a66:	4a29      	ldr	r2, [pc, #164]	; (8008b0c <inc_lock+0x118>)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	011b      	lsls	r3, r3, #4
 8008a6c:	4413      	add	r3, r2
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d1f2      	bne.n	8008a5a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d101      	bne.n	8008a7e <inc_lock+0x8a>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	e040      	b.n	8008b00 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	4922      	ldr	r1, [pc, #136]	; (8008b0c <inc_lock+0x118>)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	011b      	lsls	r3, r3, #4
 8008a88:	440b      	add	r3, r1
 8008a8a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	689a      	ldr	r2, [r3, #8]
 8008a90:	491e      	ldr	r1, [pc, #120]	; (8008b0c <inc_lock+0x118>)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	011b      	lsls	r3, r3, #4
 8008a96:	440b      	add	r3, r1
 8008a98:	3304      	adds	r3, #4
 8008a9a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	695a      	ldr	r2, [r3, #20]
 8008aa0:	491a      	ldr	r1, [pc, #104]	; (8008b0c <inc_lock+0x118>)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	011b      	lsls	r3, r3, #4
 8008aa6:	440b      	add	r3, r1
 8008aa8:	3308      	adds	r3, #8
 8008aaa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008aac:	4a17      	ldr	r2, [pc, #92]	; (8008b0c <inc_lock+0x118>)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	011b      	lsls	r3, r3, #4
 8008ab2:	4413      	add	r3, r2
 8008ab4:	330c      	adds	r3, #12
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d009      	beq.n	8008ad4 <inc_lock+0xe0>
 8008ac0:	4a12      	ldr	r2, [pc, #72]	; (8008b0c <inc_lock+0x118>)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	011b      	lsls	r3, r3, #4
 8008ac6:	4413      	add	r3, r2
 8008ac8:	330c      	adds	r3, #12
 8008aca:	881b      	ldrh	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d001      	beq.n	8008ad4 <inc_lock+0xe0>
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	e015      	b.n	8008b00 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d108      	bne.n	8008aec <inc_lock+0xf8>
 8008ada:	4a0c      	ldr	r2, [pc, #48]	; (8008b0c <inc_lock+0x118>)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	011b      	lsls	r3, r3, #4
 8008ae0:	4413      	add	r3, r2
 8008ae2:	330c      	adds	r3, #12
 8008ae4:	881b      	ldrh	r3, [r3, #0]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	e001      	b.n	8008af0 <inc_lock+0xfc>
 8008aec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008af0:	4906      	ldr	r1, [pc, #24]	; (8008b0c <inc_lock+0x118>)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	011b      	lsls	r3, r3, #4
 8008af6:	440b      	add	r3, r1
 8008af8:	330c      	adds	r3, #12
 8008afa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	3301      	adds	r3, #1
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3714      	adds	r7, #20
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr
 8008b0c:	200000dc 	.word	0x200000dc

08008b10 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b085      	sub	sp, #20
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	607b      	str	r3, [r7, #4]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d825      	bhi.n	8008b70 <dec_lock+0x60>
		n = Files[i].ctr;
 8008b24:	4a17      	ldr	r2, [pc, #92]	; (8008b84 <dec_lock+0x74>)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	011b      	lsls	r3, r3, #4
 8008b2a:	4413      	add	r3, r2
 8008b2c:	330c      	adds	r3, #12
 8008b2e:	881b      	ldrh	r3, [r3, #0]
 8008b30:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008b32:	89fb      	ldrh	r3, [r7, #14]
 8008b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b38:	d101      	bne.n	8008b3e <dec_lock+0x2e>
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008b3e:	89fb      	ldrh	r3, [r7, #14]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d002      	beq.n	8008b4a <dec_lock+0x3a>
 8008b44:	89fb      	ldrh	r3, [r7, #14]
 8008b46:	3b01      	subs	r3, #1
 8008b48:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008b4a:	4a0e      	ldr	r2, [pc, #56]	; (8008b84 <dec_lock+0x74>)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	011b      	lsls	r3, r3, #4
 8008b50:	4413      	add	r3, r2
 8008b52:	330c      	adds	r3, #12
 8008b54:	89fa      	ldrh	r2, [r7, #14]
 8008b56:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008b58:	89fb      	ldrh	r3, [r7, #14]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d105      	bne.n	8008b6a <dec_lock+0x5a>
 8008b5e:	4a09      	ldr	r2, [pc, #36]	; (8008b84 <dec_lock+0x74>)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	011b      	lsls	r3, r3, #4
 8008b64:	4413      	add	r3, r2
 8008b66:	2200      	movs	r2, #0
 8008b68:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	737b      	strb	r3, [r7, #13]
 8008b6e:	e001      	b.n	8008b74 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008b70:	2302      	movs	r3, #2
 8008b72:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008b74:	7b7b      	ldrb	r3, [r7, #13]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	200000dc 	.word	0x200000dc

08008b88 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008b90:	2300      	movs	r3, #0
 8008b92:	60fb      	str	r3, [r7, #12]
 8008b94:	e010      	b.n	8008bb8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008b96:	4a0d      	ldr	r2, [pc, #52]	; (8008bcc <clear_lock+0x44>)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	011b      	lsls	r3, r3, #4
 8008b9c:	4413      	add	r3, r2
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d105      	bne.n	8008bb2 <clear_lock+0x2a>
 8008ba6:	4a09      	ldr	r2, [pc, #36]	; (8008bcc <clear_lock+0x44>)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	011b      	lsls	r3, r3, #4
 8008bac:	4413      	add	r3, r2
 8008bae:	2200      	movs	r2, #0
 8008bb0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	60fb      	str	r3, [r7, #12]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d9eb      	bls.n	8008b96 <clear_lock+0xe>
	}
}
 8008bbe:	bf00      	nop
 8008bc0:	bf00      	nop
 8008bc2:	3714      	adds	r7, #20
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr
 8008bcc:	200000dc 	.word	0x200000dc

08008bd0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	78db      	ldrb	r3, [r3, #3]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d034      	beq.n	8008c4e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	7858      	ldrb	r0, [r3, #1]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	f7ff fd40 	bl	800867c <disk_write>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d002      	beq.n	8008c08 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	73fb      	strb	r3, [r7, #15]
 8008c06:	e022      	b.n	8008c4e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	1ad2      	subs	r2, r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a1b      	ldr	r3, [r3, #32]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d217      	bcs.n	8008c4e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	789b      	ldrb	r3, [r3, #2]
 8008c22:	613b      	str	r3, [r7, #16]
 8008c24:	e010      	b.n	8008c48 <sync_window+0x78>
					wsect += fs->fsize;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a1b      	ldr	r3, [r3, #32]
 8008c2a:	697a      	ldr	r2, [r7, #20]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	7858      	ldrb	r0, [r3, #1]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	697a      	ldr	r2, [r7, #20]
 8008c3e:	f7ff fd1d 	bl	800867c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	3b01      	subs	r3, #1
 8008c46:	613b      	str	r3, [r7, #16]
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d8eb      	bhi.n	8008c26 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3718      	adds	r7, #24
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c6a:	683a      	ldr	r2, [r7, #0]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d01b      	beq.n	8008ca8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f7ff ffad 	bl	8008bd0 <sync_window>
 8008c76:	4603      	mov	r3, r0
 8008c78:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008c7a:	7bfb      	ldrb	r3, [r7, #15]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d113      	bne.n	8008ca8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	7858      	ldrb	r0, [r3, #1]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	683a      	ldr	r2, [r7, #0]
 8008c8e:	f7ff fcd5 	bl	800863c <disk_read>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d004      	beq.n	8008ca2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008c98:	f04f 33ff 	mov.w	r3, #4294967295
 8008c9c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	683a      	ldr	r2, [r7, #0]
 8008ca6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
	...

08008cb4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f7ff ff87 	bl	8008bd0 <sync_window>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d159      	bne.n	8008d80 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	2b03      	cmp	r3, #3
 8008cd2:	d149      	bne.n	8008d68 <sync_fs+0xb4>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	791b      	ldrb	r3, [r3, #4]
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d145      	bne.n	8008d68 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	899b      	ldrh	r3, [r3, #12]
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	2100      	movs	r1, #0
 8008cea:	f7ff fda8 	bl	800883e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	3338      	adds	r3, #56	; 0x38
 8008cf2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008cf6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7ff fd37 	bl	800876e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	3338      	adds	r3, #56	; 0x38
 8008d04:	4921      	ldr	r1, [pc, #132]	; (8008d8c <sync_fs+0xd8>)
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7ff fd4c 	bl	80087a4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	3338      	adds	r3, #56	; 0x38
 8008d10:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008d14:	491e      	ldr	r1, [pc, #120]	; (8008d90 <sync_fs+0xdc>)
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7ff fd44 	bl	80087a4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	3338      	adds	r3, #56	; 0x38
 8008d20:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	4619      	mov	r1, r3
 8008d2a:	4610      	mov	r0, r2
 8008d2c:	f7ff fd3a 	bl	80087a4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	3338      	adds	r3, #56	; 0x38
 8008d34:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	695b      	ldr	r3, [r3, #20]
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	4610      	mov	r0, r2
 8008d40:	f7ff fd30 	bl	80087a4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d48:	1c5a      	adds	r2, r3, #1
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	7858      	ldrb	r0, [r3, #1]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	f7ff fc8d 	bl	800867c <disk_write>
			fs->fsi_flag = 0;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	785b      	ldrb	r3, [r3, #1]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	2100      	movs	r1, #0
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7ff fca3 	bl	80086bc <disk_ioctl>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d001      	beq.n	8008d80 <sync_fs+0xcc>
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	41615252 	.word	0x41615252
 8008d90:	61417272 	.word	0x61417272

08008d94 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	3b02      	subs	r3, #2
 8008da2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	69db      	ldr	r3, [r3, #28]
 8008da8:	3b02      	subs	r3, #2
 8008daa:	683a      	ldr	r2, [r7, #0]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d301      	bcc.n	8008db4 <clust2sect+0x20>
 8008db0:	2300      	movs	r3, #0
 8008db2:	e008      	b.n	8008dc6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	895b      	ldrh	r3, [r3, #10]
 8008db8:	461a      	mov	r2, r3
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	fb03 f202 	mul.w	r2, r3, r2
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc4:	4413      	add	r3, r2
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	370c      	adds	r7, #12
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b086      	sub	sp, #24
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d904      	bls.n	8008df2 <get_fat+0x20>
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	69db      	ldr	r3, [r3, #28]
 8008dec:	683a      	ldr	r2, [r7, #0]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d302      	bcc.n	8008df8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008df2:	2301      	movs	r3, #1
 8008df4:	617b      	str	r3, [r7, #20]
 8008df6:	e0bb      	b.n	8008f70 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008df8:	f04f 33ff 	mov.w	r3, #4294967295
 8008dfc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	f000 8083 	beq.w	8008f0e <get_fat+0x13c>
 8008e08:	2b03      	cmp	r3, #3
 8008e0a:	f300 80a7 	bgt.w	8008f5c <get_fat+0x18a>
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d002      	beq.n	8008e18 <get_fat+0x46>
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d056      	beq.n	8008ec4 <get_fat+0xf2>
 8008e16:	e0a1      	b.n	8008f5c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	60fb      	str	r3, [r7, #12]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	085b      	lsrs	r3, r3, #1
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	4413      	add	r3, r2
 8008e24:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	899b      	ldrh	r3, [r3, #12]
 8008e2e:	4619      	mov	r1, r3
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e36:	4413      	add	r3, r2
 8008e38:	4619      	mov	r1, r3
 8008e3a:	6938      	ldr	r0, [r7, #16]
 8008e3c:	f7ff ff0c 	bl	8008c58 <move_window>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f040 808d 	bne.w	8008f62 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	1c5a      	adds	r2, r3, #1
 8008e4c:	60fa      	str	r2, [r7, #12]
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	8992      	ldrh	r2, [r2, #12]
 8008e52:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e56:	fb02 f201 	mul.w	r2, r2, r1
 8008e5a:	1a9b      	subs	r3, r3, r2
 8008e5c:	693a      	ldr	r2, [r7, #16]
 8008e5e:	4413      	add	r3, r2
 8008e60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008e64:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	899b      	ldrh	r3, [r3, #12]
 8008e6e:	4619      	mov	r1, r3
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e76:	4413      	add	r3, r2
 8008e78:	4619      	mov	r1, r3
 8008e7a:	6938      	ldr	r0, [r7, #16]
 8008e7c:	f7ff feec 	bl	8008c58 <move_window>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d16f      	bne.n	8008f66 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	899b      	ldrh	r3, [r3, #12]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e92:	fb02 f201 	mul.w	r2, r2, r1
 8008e96:	1a9b      	subs	r3, r3, r2
 8008e98:	693a      	ldr	r2, [r7, #16]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008ea0:	021b      	lsls	r3, r3, #8
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	f003 0301 	and.w	r3, r3, #1
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d002      	beq.n	8008eba <get_fat+0xe8>
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	091b      	lsrs	r3, r3, #4
 8008eb8:	e002      	b.n	8008ec0 <get_fat+0xee>
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ec0:	617b      	str	r3, [r7, #20]
			break;
 8008ec2:	e055      	b.n	8008f70 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	899b      	ldrh	r3, [r3, #12]
 8008ecc:	085b      	lsrs	r3, r3, #1
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ed8:	4413      	add	r3, r2
 8008eda:	4619      	mov	r1, r3
 8008edc:	6938      	ldr	r0, [r7, #16]
 8008ede:	f7ff febb 	bl	8008c58 <move_window>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d140      	bne.n	8008f6a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	005b      	lsls	r3, r3, #1
 8008ef2:	693a      	ldr	r2, [r7, #16]
 8008ef4:	8992      	ldrh	r2, [r2, #12]
 8008ef6:	fbb3 f0f2 	udiv	r0, r3, r2
 8008efa:	fb02 f200 	mul.w	r2, r2, r0
 8008efe:	1a9b      	subs	r3, r3, r2
 8008f00:	440b      	add	r3, r1
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7ff fbf8 	bl	80086f8 <ld_word>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	617b      	str	r3, [r7, #20]
			break;
 8008f0c:	e030      	b.n	8008f70 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	899b      	ldrh	r3, [r3, #12]
 8008f16:	089b      	lsrs	r3, r3, #2
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f22:	4413      	add	r3, r2
 8008f24:	4619      	mov	r1, r3
 8008f26:	6938      	ldr	r0, [r7, #16]
 8008f28:	f7ff fe96 	bl	8008c58 <move_window>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d11d      	bne.n	8008f6e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	693a      	ldr	r2, [r7, #16]
 8008f3e:	8992      	ldrh	r2, [r2, #12]
 8008f40:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f44:	fb02 f200 	mul.w	r2, r2, r0
 8008f48:	1a9b      	subs	r3, r3, r2
 8008f4a:	440b      	add	r3, r1
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7ff fbeb 	bl	8008728 <ld_dword>
 8008f52:	4603      	mov	r3, r0
 8008f54:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008f58:	617b      	str	r3, [r7, #20]
			break;
 8008f5a:	e009      	b.n	8008f70 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	617b      	str	r3, [r7, #20]
 8008f60:	e006      	b.n	8008f70 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f62:	bf00      	nop
 8008f64:	e004      	b.n	8008f70 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f66:	bf00      	nop
 8008f68:	e002      	b.n	8008f70 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008f6a:	bf00      	nop
 8008f6c:	e000      	b.n	8008f70 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008f6e:	bf00      	nop
		}
	}

	return val;
 8008f70:	697b      	ldr	r3, [r7, #20]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3718      	adds	r7, #24
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008f7a:	b590      	push	{r4, r7, lr}
 8008f7c:	b089      	sub	sp, #36	; 0x24
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	60f8      	str	r0, [r7, #12]
 8008f82:	60b9      	str	r1, [r7, #8]
 8008f84:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008f86:	2302      	movs	r3, #2
 8008f88:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	f240 8102 	bls.w	8009196 <put_fat+0x21c>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	69db      	ldr	r3, [r3, #28]
 8008f96:	68ba      	ldr	r2, [r7, #8]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	f080 80fc 	bcs.w	8009196 <put_fat+0x21c>
		switch (fs->fs_type) {
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	2b03      	cmp	r3, #3
 8008fa4:	f000 80b6 	beq.w	8009114 <put_fat+0x19a>
 8008fa8:	2b03      	cmp	r3, #3
 8008faa:	f300 80fd 	bgt.w	80091a8 <put_fat+0x22e>
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d003      	beq.n	8008fba <put_fat+0x40>
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	f000 8083 	beq.w	80090be <put_fat+0x144>
 8008fb8:	e0f6      	b.n	80091a8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	61bb      	str	r3, [r7, #24]
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	085b      	lsrs	r3, r3, #1
 8008fc2:	69ba      	ldr	r2, [r7, #24]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	899b      	ldrh	r3, [r3, #12]
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	fbb3 f3f1 	udiv	r3, r3, r1
 8008fd8:	4413      	add	r3, r2
 8008fda:	4619      	mov	r1, r3
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f7ff fe3b 	bl	8008c58 <move_window>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008fe6:	7ffb      	ldrb	r3, [r7, #31]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f040 80d6 	bne.w	800919a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008ff4:	69bb      	ldr	r3, [r7, #24]
 8008ff6:	1c5a      	adds	r2, r3, #1
 8008ff8:	61ba      	str	r2, [r7, #24]
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	8992      	ldrh	r2, [r2, #12]
 8008ffe:	fbb3 f0f2 	udiv	r0, r3, r2
 8009002:	fb02 f200 	mul.w	r2, r2, r0
 8009006:	1a9b      	subs	r3, r3, r2
 8009008:	440b      	add	r3, r1
 800900a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	f003 0301 	and.w	r3, r3, #1
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00d      	beq.n	8009032 <put_fat+0xb8>
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	b25b      	sxtb	r3, r3
 800901c:	f003 030f 	and.w	r3, r3, #15
 8009020:	b25a      	sxtb	r2, r3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	b2db      	uxtb	r3, r3
 8009026:	011b      	lsls	r3, r3, #4
 8009028:	b25b      	sxtb	r3, r3
 800902a:	4313      	orrs	r3, r2
 800902c:	b25b      	sxtb	r3, r3
 800902e:	b2db      	uxtb	r3, r3
 8009030:	e001      	b.n	8009036 <put_fat+0xbc>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	b2db      	uxtb	r3, r3
 8009036:	697a      	ldr	r2, [r7, #20]
 8009038:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2201      	movs	r2, #1
 800903e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	899b      	ldrh	r3, [r3, #12]
 8009048:	4619      	mov	r1, r3
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009050:	4413      	add	r3, r2
 8009052:	4619      	mov	r1, r3
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	f7ff fdff 	bl	8008c58 <move_window>
 800905a:	4603      	mov	r3, r0
 800905c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800905e:	7ffb      	ldrb	r3, [r7, #31]
 8009060:	2b00      	cmp	r3, #0
 8009062:	f040 809c 	bne.w	800919e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	899b      	ldrh	r3, [r3, #12]
 8009070:	461a      	mov	r2, r3
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	fbb3 f0f2 	udiv	r0, r3, r2
 8009078:	fb02 f200 	mul.w	r2, r2, r0
 800907c:	1a9b      	subs	r3, r3, r2
 800907e:	440b      	add	r3, r1
 8009080:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	f003 0301 	and.w	r3, r3, #1
 8009088:	2b00      	cmp	r3, #0
 800908a:	d003      	beq.n	8009094 <put_fat+0x11a>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	091b      	lsrs	r3, r3, #4
 8009090:	b2db      	uxtb	r3, r3
 8009092:	e00e      	b.n	80090b2 <put_fat+0x138>
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	b25b      	sxtb	r3, r3
 800909a:	f023 030f 	bic.w	r3, r3, #15
 800909e:	b25a      	sxtb	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	0a1b      	lsrs	r3, r3, #8
 80090a4:	b25b      	sxtb	r3, r3
 80090a6:	f003 030f 	and.w	r3, r3, #15
 80090aa:	b25b      	sxtb	r3, r3
 80090ac:	4313      	orrs	r3, r2
 80090ae:	b25b      	sxtb	r3, r3
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	697a      	ldr	r2, [r7, #20]
 80090b4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2201      	movs	r2, #1
 80090ba:	70da      	strb	r2, [r3, #3]
			break;
 80090bc:	e074      	b.n	80091a8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	899b      	ldrh	r3, [r3, #12]
 80090c6:	085b      	lsrs	r3, r3, #1
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	4619      	mov	r1, r3
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80090d2:	4413      	add	r3, r2
 80090d4:	4619      	mov	r1, r3
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f7ff fdbe 	bl	8008c58 <move_window>
 80090dc:	4603      	mov	r3, r0
 80090de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80090e0:	7ffb      	ldrb	r3, [r7, #31]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d15d      	bne.n	80091a2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	005b      	lsls	r3, r3, #1
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	8992      	ldrh	r2, [r2, #12]
 80090f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80090f8:	fb02 f200 	mul.w	r2, r2, r0
 80090fc:	1a9b      	subs	r3, r3, r2
 80090fe:	440b      	add	r3, r1
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	b292      	uxth	r2, r2
 8009104:	4611      	mov	r1, r2
 8009106:	4618      	mov	r0, r3
 8009108:	f7ff fb31 	bl	800876e <st_word>
			fs->wflag = 1;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2201      	movs	r2, #1
 8009110:	70da      	strb	r2, [r3, #3]
			break;
 8009112:	e049      	b.n	80091a8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	899b      	ldrh	r3, [r3, #12]
 800911c:	089b      	lsrs	r3, r3, #2
 800911e:	b29b      	uxth	r3, r3
 8009120:	4619      	mov	r1, r3
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	fbb3 f3f1 	udiv	r3, r3, r1
 8009128:	4413      	add	r3, r2
 800912a:	4619      	mov	r1, r3
 800912c:	68f8      	ldr	r0, [r7, #12]
 800912e:	f7ff fd93 	bl	8008c58 <move_window>
 8009132:	4603      	mov	r3, r0
 8009134:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009136:	7ffb      	ldrb	r3, [r7, #31]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d134      	bne.n	80091a6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	8992      	ldrh	r2, [r2, #12]
 8009150:	fbb3 f0f2 	udiv	r0, r3, r2
 8009154:	fb02 f200 	mul.w	r2, r2, r0
 8009158:	1a9b      	subs	r3, r3, r2
 800915a:	440b      	add	r3, r1
 800915c:	4618      	mov	r0, r3
 800915e:	f7ff fae3 	bl	8008728 <ld_dword>
 8009162:	4603      	mov	r3, r0
 8009164:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009168:	4323      	orrs	r3, r4
 800916a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	68fa      	ldr	r2, [r7, #12]
 8009178:	8992      	ldrh	r2, [r2, #12]
 800917a:	fbb3 f0f2 	udiv	r0, r3, r2
 800917e:	fb02 f200 	mul.w	r2, r2, r0
 8009182:	1a9b      	subs	r3, r3, r2
 8009184:	440b      	add	r3, r1
 8009186:	6879      	ldr	r1, [r7, #4]
 8009188:	4618      	mov	r0, r3
 800918a:	f7ff fb0b 	bl	80087a4 <st_dword>
			fs->wflag = 1;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2201      	movs	r2, #1
 8009192:	70da      	strb	r2, [r3, #3]
			break;
 8009194:	e008      	b.n	80091a8 <put_fat+0x22e>
		}
	}
 8009196:	bf00      	nop
 8009198:	e006      	b.n	80091a8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800919a:	bf00      	nop
 800919c:	e004      	b.n	80091a8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800919e:	bf00      	nop
 80091a0:	e002      	b.n	80091a8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80091a2:	bf00      	nop
 80091a4:	e000      	b.n	80091a8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80091a6:	bf00      	nop
	return res;
 80091a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3724      	adds	r7, #36	; 0x24
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd90      	pop	{r4, r7, pc}

080091b2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b088      	sub	sp, #32
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	60f8      	str	r0, [r7, #12]
 80091ba:	60b9      	str	r1, [r7, #8]
 80091bc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80091be:	2300      	movs	r3, #0
 80091c0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d904      	bls.n	80091d8 <remove_chain+0x26>
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	69db      	ldr	r3, [r3, #28]
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d301      	bcc.n	80091dc <remove_chain+0x2a>
 80091d8:	2302      	movs	r3, #2
 80091da:	e04b      	b.n	8009274 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00c      	beq.n	80091fc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80091e2:	f04f 32ff 	mov.w	r2, #4294967295
 80091e6:	6879      	ldr	r1, [r7, #4]
 80091e8:	69b8      	ldr	r0, [r7, #24]
 80091ea:	f7ff fec6 	bl	8008f7a <put_fat>
 80091ee:	4603      	mov	r3, r0
 80091f0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80091f2:	7ffb      	ldrb	r3, [r7, #31]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d001      	beq.n	80091fc <remove_chain+0x4a>
 80091f8:	7ffb      	ldrb	r3, [r7, #31]
 80091fa:	e03b      	b.n	8009274 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80091fc:	68b9      	ldr	r1, [r7, #8]
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f7ff fde7 	bl	8008dd2 <get_fat>
 8009204:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d031      	beq.n	8009270 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	2b01      	cmp	r3, #1
 8009210:	d101      	bne.n	8009216 <remove_chain+0x64>
 8009212:	2302      	movs	r3, #2
 8009214:	e02e      	b.n	8009274 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800921c:	d101      	bne.n	8009222 <remove_chain+0x70>
 800921e:	2301      	movs	r3, #1
 8009220:	e028      	b.n	8009274 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009222:	2200      	movs	r2, #0
 8009224:	68b9      	ldr	r1, [r7, #8]
 8009226:	69b8      	ldr	r0, [r7, #24]
 8009228:	f7ff fea7 	bl	8008f7a <put_fat>
 800922c:	4603      	mov	r3, r0
 800922e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009230:	7ffb      	ldrb	r3, [r7, #31]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d001      	beq.n	800923a <remove_chain+0x88>
 8009236:	7ffb      	ldrb	r3, [r7, #31]
 8009238:	e01c      	b.n	8009274 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	699a      	ldr	r2, [r3, #24]
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	69db      	ldr	r3, [r3, #28]
 8009242:	3b02      	subs	r3, #2
 8009244:	429a      	cmp	r2, r3
 8009246:	d20b      	bcs.n	8009260 <remove_chain+0xae>
			fs->free_clst++;
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	699b      	ldr	r3, [r3, #24]
 800924c:	1c5a      	adds	r2, r3, #1
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	791b      	ldrb	r3, [r3, #4]
 8009256:	f043 0301 	orr.w	r3, r3, #1
 800925a:	b2da      	uxtb	r2, r3
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	69db      	ldr	r3, [r3, #28]
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	429a      	cmp	r2, r3
 800926c:	d3c6      	bcc.n	80091fc <remove_chain+0x4a>
 800926e:	e000      	b.n	8009272 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009270:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	3720      	adds	r7, #32
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b088      	sub	sp, #32
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d10d      	bne.n	80092ae <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d004      	beq.n	80092a8 <create_chain+0x2c>
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	69db      	ldr	r3, [r3, #28]
 80092a2:	69ba      	ldr	r2, [r7, #24]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d31b      	bcc.n	80092e0 <create_chain+0x64>
 80092a8:	2301      	movs	r3, #1
 80092aa:	61bb      	str	r3, [r7, #24]
 80092ac:	e018      	b.n	80092e0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f7ff fd8e 	bl	8008dd2 <get_fat>
 80092b6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d801      	bhi.n	80092c2 <create_chain+0x46>
 80092be:	2301      	movs	r3, #1
 80092c0:	e070      	b.n	80093a4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c8:	d101      	bne.n	80092ce <create_chain+0x52>
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	e06a      	b.n	80093a4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	69db      	ldr	r3, [r3, #28]
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d201      	bcs.n	80092dc <create_chain+0x60>
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	e063      	b.n	80093a4 <create_chain+0x128>
		scl = clst;
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	3301      	adds	r3, #1
 80092e8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	69db      	ldr	r3, [r3, #28]
 80092ee:	69fa      	ldr	r2, [r7, #28]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d307      	bcc.n	8009304 <create_chain+0x88>
				ncl = 2;
 80092f4:	2302      	movs	r3, #2
 80092f6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80092f8:	69fa      	ldr	r2, [r7, #28]
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d901      	bls.n	8009304 <create_chain+0x88>
 8009300:	2300      	movs	r3, #0
 8009302:	e04f      	b.n	80093a4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009304:	69f9      	ldr	r1, [r7, #28]
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f7ff fd63 	bl	8008dd2 <get_fat>
 800930c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00e      	beq.n	8009332 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2b01      	cmp	r3, #1
 8009318:	d003      	beq.n	8009322 <create_chain+0xa6>
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009320:	d101      	bne.n	8009326 <create_chain+0xaa>
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	e03e      	b.n	80093a4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009326:	69fa      	ldr	r2, [r7, #28]
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	429a      	cmp	r2, r3
 800932c:	d1da      	bne.n	80092e4 <create_chain+0x68>
 800932e:	2300      	movs	r3, #0
 8009330:	e038      	b.n	80093a4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009332:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009334:	f04f 32ff 	mov.w	r2, #4294967295
 8009338:	69f9      	ldr	r1, [r7, #28]
 800933a:	6938      	ldr	r0, [r7, #16]
 800933c:	f7ff fe1d 	bl	8008f7a <put_fat>
 8009340:	4603      	mov	r3, r0
 8009342:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009344:	7dfb      	ldrb	r3, [r7, #23]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d109      	bne.n	800935e <create_chain+0xe2>
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d006      	beq.n	800935e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009350:	69fa      	ldr	r2, [r7, #28]
 8009352:	6839      	ldr	r1, [r7, #0]
 8009354:	6938      	ldr	r0, [r7, #16]
 8009356:	f7ff fe10 	bl	8008f7a <put_fat>
 800935a:	4603      	mov	r3, r0
 800935c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800935e:	7dfb      	ldrb	r3, [r7, #23]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d116      	bne.n	8009392 <create_chain+0x116>
		fs->last_clst = ncl;
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	69fa      	ldr	r2, [r7, #28]
 8009368:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	699a      	ldr	r2, [r3, #24]
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	69db      	ldr	r3, [r3, #28]
 8009372:	3b02      	subs	r3, #2
 8009374:	429a      	cmp	r2, r3
 8009376:	d804      	bhi.n	8009382 <create_chain+0x106>
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	699b      	ldr	r3, [r3, #24]
 800937c:	1e5a      	subs	r2, r3, #1
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	791b      	ldrb	r3, [r3, #4]
 8009386:	f043 0301 	orr.w	r3, r3, #1
 800938a:	b2da      	uxtb	r2, r3
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	711a      	strb	r2, [r3, #4]
 8009390:	e007      	b.n	80093a2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009392:	7dfb      	ldrb	r3, [r7, #23]
 8009394:	2b01      	cmp	r3, #1
 8009396:	d102      	bne.n	800939e <create_chain+0x122>
 8009398:	f04f 33ff 	mov.w	r3, #4294967295
 800939c:	e000      	b.n	80093a0 <create_chain+0x124>
 800939e:	2301      	movs	r3, #1
 80093a0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80093a2:	69fb      	ldr	r3, [r7, #28]
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3720      	adds	r7, #32
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b087      	sub	sp, #28
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c0:	3304      	adds	r3, #4
 80093c2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	899b      	ldrh	r3, [r3, #12]
 80093c8:	461a      	mov	r2, r3
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80093d0:	68fa      	ldr	r2, [r7, #12]
 80093d2:	8952      	ldrh	r2, [r2, #10]
 80093d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80093d8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	1d1a      	adds	r2, r3, #4
 80093de:	613a      	str	r2, [r7, #16]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d101      	bne.n	80093ee <clmt_clust+0x42>
 80093ea:	2300      	movs	r3, #0
 80093ec:	e010      	b.n	8009410 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80093ee:	697a      	ldr	r2, [r7, #20]
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d307      	bcc.n	8009406 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80093f6:	697a      	ldr	r2, [r7, #20]
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	617b      	str	r3, [r7, #20]
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	3304      	adds	r3, #4
 8009402:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009404:	e7e9      	b.n	80093da <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009406:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	4413      	add	r3, r2
}
 8009410:	4618      	mov	r0, r3
 8009412:	371c      	adds	r7, #28
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b086      	sub	sp, #24
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009432:	d204      	bcs.n	800943e <dir_sdi+0x22>
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	f003 031f 	and.w	r3, r3, #31
 800943a:	2b00      	cmp	r3, #0
 800943c:	d001      	beq.n	8009442 <dir_sdi+0x26>
		return FR_INT_ERR;
 800943e:	2302      	movs	r3, #2
 8009440:	e071      	b.n	8009526 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	683a      	ldr	r2, [r7, #0]
 8009446:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d106      	bne.n	8009462 <dir_sdi+0x46>
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	2b02      	cmp	r3, #2
 800945a:	d902      	bls.n	8009462 <dir_sdi+0x46>
		clst = fs->dirbase;
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009460:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d10c      	bne.n	8009482 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	095b      	lsrs	r3, r3, #5
 800946c:	693a      	ldr	r2, [r7, #16]
 800946e:	8912      	ldrh	r2, [r2, #8]
 8009470:	4293      	cmp	r3, r2
 8009472:	d301      	bcc.n	8009478 <dir_sdi+0x5c>
 8009474:	2302      	movs	r3, #2
 8009476:	e056      	b.n	8009526 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	61da      	str	r2, [r3, #28]
 8009480:	e02d      	b.n	80094de <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	895b      	ldrh	r3, [r3, #10]
 8009486:	461a      	mov	r2, r3
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	899b      	ldrh	r3, [r3, #12]
 800948c:	fb03 f302 	mul.w	r3, r3, r2
 8009490:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009492:	e019      	b.n	80094c8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6979      	ldr	r1, [r7, #20]
 8009498:	4618      	mov	r0, r3
 800949a:	f7ff fc9a 	bl	8008dd2 <get_fat>
 800949e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a6:	d101      	bne.n	80094ac <dir_sdi+0x90>
 80094a8:	2301      	movs	r3, #1
 80094aa:	e03c      	b.n	8009526 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d904      	bls.n	80094bc <dir_sdi+0xa0>
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	69db      	ldr	r3, [r3, #28]
 80094b6:	697a      	ldr	r2, [r7, #20]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d301      	bcc.n	80094c0 <dir_sdi+0xa4>
 80094bc:	2302      	movs	r3, #2
 80094be:	e032      	b.n	8009526 <dir_sdi+0x10a>
			ofs -= csz;
 80094c0:	683a      	ldr	r2, [r7, #0]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	1ad3      	subs	r3, r2, r3
 80094c6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80094c8:	683a      	ldr	r2, [r7, #0]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d2e1      	bcs.n	8009494 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80094d0:	6979      	ldr	r1, [r7, #20]
 80094d2:	6938      	ldr	r0, [r7, #16]
 80094d4:	f7ff fc5e 	bl	8008d94 <clust2sect>
 80094d8:	4602      	mov	r2, r0
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	697a      	ldr	r2, [r7, #20]
 80094e2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	69db      	ldr	r3, [r3, #28]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d101      	bne.n	80094f0 <dir_sdi+0xd4>
 80094ec:	2302      	movs	r3, #2
 80094ee:	e01a      	b.n	8009526 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	69da      	ldr	r2, [r3, #28]
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	899b      	ldrh	r3, [r3, #12]
 80094f8:	4619      	mov	r1, r3
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8009500:	441a      	add	r2, r3
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	899b      	ldrh	r3, [r3, #12]
 8009510:	461a      	mov	r2, r3
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	fbb3 f0f2 	udiv	r0, r3, r2
 8009518:	fb02 f200 	mul.w	r2, r2, r0
 800951c:	1a9b      	subs	r3, r3, r2
 800951e:	18ca      	adds	r2, r1, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b086      	sub	sp, #24
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
 8009536:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	695b      	ldr	r3, [r3, #20]
 8009542:	3320      	adds	r3, #32
 8009544:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	69db      	ldr	r3, [r3, #28]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d003      	beq.n	8009556 <dir_next+0x28>
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009554:	d301      	bcc.n	800955a <dir_next+0x2c>
 8009556:	2304      	movs	r3, #4
 8009558:	e0bb      	b.n	80096d2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	899b      	ldrh	r3, [r3, #12]
 800955e:	461a      	mov	r2, r3
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	fbb3 f1f2 	udiv	r1, r3, r2
 8009566:	fb02 f201 	mul.w	r2, r2, r1
 800956a:	1a9b      	subs	r3, r3, r2
 800956c:	2b00      	cmp	r3, #0
 800956e:	f040 809d 	bne.w	80096ac <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	69db      	ldr	r3, [r3, #28]
 8009576:	1c5a      	adds	r2, r3, #1
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	699b      	ldr	r3, [r3, #24]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d10b      	bne.n	800959c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	095b      	lsrs	r3, r3, #5
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	8912      	ldrh	r2, [r2, #8]
 800958c:	4293      	cmp	r3, r2
 800958e:	f0c0 808d 	bcc.w	80096ac <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	61da      	str	r2, [r3, #28]
 8009598:	2304      	movs	r3, #4
 800959a:	e09a      	b.n	80096d2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	899b      	ldrh	r3, [r3, #12]
 80095a0:	461a      	mov	r2, r3
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	8952      	ldrh	r2, [r2, #10]
 80095ac:	3a01      	subs	r2, #1
 80095ae:	4013      	ands	r3, r2
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d17b      	bne.n	80096ac <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	4619      	mov	r1, r3
 80095bc:	4610      	mov	r0, r2
 80095be:	f7ff fc08 	bl	8008dd2 <get_fat>
 80095c2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d801      	bhi.n	80095ce <dir_next+0xa0>
 80095ca:	2302      	movs	r3, #2
 80095cc:	e081      	b.n	80096d2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d4:	d101      	bne.n	80095da <dir_next+0xac>
 80095d6:	2301      	movs	r3, #1
 80095d8:	e07b      	b.n	80096d2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	69db      	ldr	r3, [r3, #28]
 80095de:	697a      	ldr	r2, [r7, #20]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d359      	bcc.n	8009698 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d104      	bne.n	80095f4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	61da      	str	r2, [r3, #28]
 80095f0:	2304      	movs	r3, #4
 80095f2:	e06e      	b.n	80096d2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	699b      	ldr	r3, [r3, #24]
 80095fa:	4619      	mov	r1, r3
 80095fc:	4610      	mov	r0, r2
 80095fe:	f7ff fe3d 	bl	800927c <create_chain>
 8009602:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d101      	bne.n	800960e <dir_next+0xe0>
 800960a:	2307      	movs	r3, #7
 800960c:	e061      	b.n	80096d2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	2b01      	cmp	r3, #1
 8009612:	d101      	bne.n	8009618 <dir_next+0xea>
 8009614:	2302      	movs	r3, #2
 8009616:	e05c      	b.n	80096d2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800961e:	d101      	bne.n	8009624 <dir_next+0xf6>
 8009620:	2301      	movs	r3, #1
 8009622:	e056      	b.n	80096d2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009624:	68f8      	ldr	r0, [r7, #12]
 8009626:	f7ff fad3 	bl	8008bd0 <sync_window>
 800962a:	4603      	mov	r3, r0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d001      	beq.n	8009634 <dir_next+0x106>
 8009630:	2301      	movs	r3, #1
 8009632:	e04e      	b.n	80096d2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	899b      	ldrh	r3, [r3, #12]
 800963e:	461a      	mov	r2, r3
 8009640:	2100      	movs	r1, #0
 8009642:	f7ff f8fc 	bl	800883e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009646:	2300      	movs	r3, #0
 8009648:	613b      	str	r3, [r7, #16]
 800964a:	6979      	ldr	r1, [r7, #20]
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f7ff fba1 	bl	8008d94 <clust2sect>
 8009652:	4602      	mov	r2, r0
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	635a      	str	r2, [r3, #52]	; 0x34
 8009658:	e012      	b.n	8009680 <dir_next+0x152>
						fs->wflag = 1;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2201      	movs	r2, #1
 800965e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f7ff fab5 	bl	8008bd0 <sync_window>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d001      	beq.n	8009670 <dir_next+0x142>
 800966c:	2301      	movs	r3, #1
 800966e:	e030      	b.n	80096d2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	3301      	adds	r3, #1
 8009674:	613b      	str	r3, [r7, #16]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800967a:	1c5a      	adds	r2, r3, #1
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	635a      	str	r2, [r3, #52]	; 0x34
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	895b      	ldrh	r3, [r3, #10]
 8009684:	461a      	mov	r2, r3
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	4293      	cmp	r3, r2
 800968a:	d3e6      	bcc.n	800965a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	1ad2      	subs	r2, r2, r3
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	697a      	ldr	r2, [r7, #20]
 800969c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800969e:	6979      	ldr	r1, [r7, #20]
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f7ff fb77 	bl	8008d94 <clust2sect>
 80096a6:	4602      	mov	r2, r0
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	68ba      	ldr	r2, [r7, #8]
 80096b0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	899b      	ldrh	r3, [r3, #12]
 80096bc:	461a      	mov	r2, r3
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80096c4:	fb02 f200 	mul.w	r2, r2, r0
 80096c8:	1a9b      	subs	r3, r3, r2
 80096ca:	18ca      	adds	r2, r1, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3718      	adds	r7, #24
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b086      	sub	sp, #24
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
 80096e2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80096ea:	2100      	movs	r1, #0
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f7ff fe95 	bl	800941c <dir_sdi>
 80096f2:	4603      	mov	r3, r0
 80096f4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80096f6:	7dfb      	ldrb	r3, [r7, #23]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d12b      	bne.n	8009754 <dir_alloc+0x7a>
		n = 0;
 80096fc:	2300      	movs	r3, #0
 80096fe:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	69db      	ldr	r3, [r3, #28]
 8009704:	4619      	mov	r1, r3
 8009706:	68f8      	ldr	r0, [r7, #12]
 8009708:	f7ff faa6 	bl	8008c58 <move_window>
 800970c:	4603      	mov	r3, r0
 800970e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009710:	7dfb      	ldrb	r3, [r7, #23]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d11d      	bne.n	8009752 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a1b      	ldr	r3, [r3, #32]
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	2be5      	cmp	r3, #229	; 0xe5
 800971e:	d004      	beq.n	800972a <dir_alloc+0x50>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6a1b      	ldr	r3, [r3, #32]
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d107      	bne.n	800973a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	3301      	adds	r3, #1
 800972e:	613b      	str	r3, [r7, #16]
 8009730:	693a      	ldr	r2, [r7, #16]
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	429a      	cmp	r2, r3
 8009736:	d102      	bne.n	800973e <dir_alloc+0x64>
 8009738:	e00c      	b.n	8009754 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800973a:	2300      	movs	r3, #0
 800973c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800973e:	2101      	movs	r1, #1
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f7ff fef4 	bl	800952e <dir_next>
 8009746:	4603      	mov	r3, r0
 8009748:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800974a:	7dfb      	ldrb	r3, [r7, #23]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d0d7      	beq.n	8009700 <dir_alloc+0x26>
 8009750:	e000      	b.n	8009754 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009752:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009754:	7dfb      	ldrb	r3, [r7, #23]
 8009756:	2b04      	cmp	r3, #4
 8009758:	d101      	bne.n	800975e <dir_alloc+0x84>
 800975a:	2307      	movs	r3, #7
 800975c:	75fb      	strb	r3, [r7, #23]
	return res;
 800975e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009760:	4618      	mov	r0, r3
 8009762:	3718      	adds	r7, #24
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	331a      	adds	r3, #26
 8009776:	4618      	mov	r0, r3
 8009778:	f7fe ffbe 	bl	80086f8 <ld_word>
 800977c:	4603      	mov	r3, r0
 800977e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	2b03      	cmp	r3, #3
 8009786:	d109      	bne.n	800979c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	3314      	adds	r3, #20
 800978c:	4618      	mov	r0, r3
 800978e:	f7fe ffb3 	bl	80086f8 <ld_word>
 8009792:	4603      	mov	r3, r0
 8009794:	041b      	lsls	r3, r3, #16
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	4313      	orrs	r3, r2
 800979a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800979c:	68fb      	ldr	r3, [r7, #12]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b084      	sub	sp, #16
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	60f8      	str	r0, [r7, #12]
 80097ae:	60b9      	str	r1, [r7, #8]
 80097b0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	331a      	adds	r3, #26
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	b292      	uxth	r2, r2
 80097ba:	4611      	mov	r1, r2
 80097bc:	4618      	mov	r0, r3
 80097be:	f7fe ffd6 	bl	800876e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	2b03      	cmp	r3, #3
 80097c8:	d109      	bne.n	80097de <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	f103 0214 	add.w	r2, r3, #20
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	0c1b      	lsrs	r3, r3, #16
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	4619      	mov	r1, r3
 80097d8:	4610      	mov	r0, r2
 80097da:	f7fe ffc8 	bl	800876e <st_word>
	}
}
 80097de:	bf00      	nop
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
	...

080097e8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80097e8:	b590      	push	{r4, r7, lr}
 80097ea:	b087      	sub	sp, #28
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	331a      	adds	r3, #26
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7fe ff7e 	bl	80086f8 <ld_word>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d001      	beq.n	8009806 <cmp_lfn+0x1e>
 8009802:	2300      	movs	r3, #0
 8009804:	e059      	b.n	80098ba <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800980e:	1e5a      	subs	r2, r3, #1
 8009810:	4613      	mov	r3, r2
 8009812:	005b      	lsls	r3, r3, #1
 8009814:	4413      	add	r3, r2
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	4413      	add	r3, r2
 800981a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800981c:	2301      	movs	r3, #1
 800981e:	81fb      	strh	r3, [r7, #14]
 8009820:	2300      	movs	r3, #0
 8009822:	613b      	str	r3, [r7, #16]
 8009824:	e033      	b.n	800988e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009826:	4a27      	ldr	r2, [pc, #156]	; (80098c4 <cmp_lfn+0xdc>)
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	4413      	add	r3, r2
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	461a      	mov	r2, r3
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	4413      	add	r3, r2
 8009834:	4618      	mov	r0, r3
 8009836:	f7fe ff5f 	bl	80086f8 <ld_word>
 800983a:	4603      	mov	r3, r0
 800983c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800983e:	89fb      	ldrh	r3, [r7, #14]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d01a      	beq.n	800987a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	2bfe      	cmp	r3, #254	; 0xfe
 8009848:	d812      	bhi.n	8009870 <cmp_lfn+0x88>
 800984a:	89bb      	ldrh	r3, [r7, #12]
 800984c:	4618      	mov	r0, r3
 800984e:	f001 fd45 	bl	800b2dc <ff_wtoupper>
 8009852:	4603      	mov	r3, r0
 8009854:	461c      	mov	r4, r3
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	1c5a      	adds	r2, r3, #1
 800985a:	617a      	str	r2, [r7, #20]
 800985c:	005b      	lsls	r3, r3, #1
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	4413      	add	r3, r2
 8009862:	881b      	ldrh	r3, [r3, #0]
 8009864:	4618      	mov	r0, r3
 8009866:	f001 fd39 	bl	800b2dc <ff_wtoupper>
 800986a:	4603      	mov	r3, r0
 800986c:	429c      	cmp	r4, r3
 800986e:	d001      	beq.n	8009874 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8009870:	2300      	movs	r3, #0
 8009872:	e022      	b.n	80098ba <cmp_lfn+0xd2>
			}
			wc = uc;
 8009874:	89bb      	ldrh	r3, [r7, #12]
 8009876:	81fb      	strh	r3, [r7, #14]
 8009878:	e006      	b.n	8009888 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800987a:	89bb      	ldrh	r3, [r7, #12]
 800987c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009880:	4293      	cmp	r3, r2
 8009882:	d001      	beq.n	8009888 <cmp_lfn+0xa0>
 8009884:	2300      	movs	r3, #0
 8009886:	e018      	b.n	80098ba <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	3301      	adds	r3, #1
 800988c:	613b      	str	r3, [r7, #16]
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	2b0c      	cmp	r3, #12
 8009892:	d9c8      	bls.n	8009826 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800989c:	2b00      	cmp	r3, #0
 800989e:	d00b      	beq.n	80098b8 <cmp_lfn+0xd0>
 80098a0:	89fb      	ldrh	r3, [r7, #14]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d008      	beq.n	80098b8 <cmp_lfn+0xd0>
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	005b      	lsls	r3, r3, #1
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	4413      	add	r3, r2
 80098ae:	881b      	ldrh	r3, [r3, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d001      	beq.n	80098b8 <cmp_lfn+0xd0>
 80098b4:	2300      	movs	r3, #0
 80098b6:	e000      	b.n	80098ba <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80098b8:	2301      	movs	r3, #1
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	371c      	adds	r7, #28
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd90      	pop	{r4, r7, pc}
 80098c2:	bf00      	nop
 80098c4:	0800cde8 	.word	0x0800cde8

080098c8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b088      	sub	sp, #32
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	4611      	mov	r1, r2
 80098d4:	461a      	mov	r2, r3
 80098d6:	460b      	mov	r3, r1
 80098d8:	71fb      	strb	r3, [r7, #7]
 80098da:	4613      	mov	r3, r2
 80098dc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	330d      	adds	r3, #13
 80098e2:	79ba      	ldrb	r2, [r7, #6]
 80098e4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	330b      	adds	r3, #11
 80098ea:	220f      	movs	r2, #15
 80098ec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	330c      	adds	r3, #12
 80098f2:	2200      	movs	r2, #0
 80098f4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	331a      	adds	r3, #26
 80098fa:	2100      	movs	r1, #0
 80098fc:	4618      	mov	r0, r3
 80098fe:	f7fe ff36 	bl	800876e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009902:	79fb      	ldrb	r3, [r7, #7]
 8009904:	1e5a      	subs	r2, r3, #1
 8009906:	4613      	mov	r3, r2
 8009908:	005b      	lsls	r3, r3, #1
 800990a:	4413      	add	r3, r2
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	4413      	add	r3, r2
 8009910:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009912:	2300      	movs	r3, #0
 8009914:	82fb      	strh	r3, [r7, #22]
 8009916:	2300      	movs	r3, #0
 8009918:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800991a:	8afb      	ldrh	r3, [r7, #22]
 800991c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009920:	4293      	cmp	r3, r2
 8009922:	d007      	beq.n	8009934 <put_lfn+0x6c>
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	1c5a      	adds	r2, r3, #1
 8009928:	61fa      	str	r2, [r7, #28]
 800992a:	005b      	lsls	r3, r3, #1
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	4413      	add	r3, r2
 8009930:	881b      	ldrh	r3, [r3, #0]
 8009932:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009934:	4a17      	ldr	r2, [pc, #92]	; (8009994 <put_lfn+0xcc>)
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	4413      	add	r3, r2
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	461a      	mov	r2, r3
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	4413      	add	r3, r2
 8009942:	8afa      	ldrh	r2, [r7, #22]
 8009944:	4611      	mov	r1, r2
 8009946:	4618      	mov	r0, r3
 8009948:	f7fe ff11 	bl	800876e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800994c:	8afb      	ldrh	r3, [r7, #22]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d102      	bne.n	8009958 <put_lfn+0x90>
 8009952:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009956:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009958:	69bb      	ldr	r3, [r7, #24]
 800995a:	3301      	adds	r3, #1
 800995c:	61bb      	str	r3, [r7, #24]
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	2b0c      	cmp	r3, #12
 8009962:	d9da      	bls.n	800991a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009964:	8afb      	ldrh	r3, [r7, #22]
 8009966:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800996a:	4293      	cmp	r3, r2
 800996c:	d006      	beq.n	800997c <put_lfn+0xb4>
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	005b      	lsls	r3, r3, #1
 8009972:	68fa      	ldr	r2, [r7, #12]
 8009974:	4413      	add	r3, r2
 8009976:	881b      	ldrh	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d103      	bne.n	8009984 <put_lfn+0xbc>
 800997c:	79fb      	ldrb	r3, [r7, #7]
 800997e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009982:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	79fa      	ldrb	r2, [r7, #7]
 8009988:	701a      	strb	r2, [r3, #0]
}
 800998a:	bf00      	nop
 800998c:	3720      	adds	r7, #32
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	0800cde8 	.word	0x0800cde8

08009998 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b08c      	sub	sp, #48	; 0x30
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	607a      	str	r2, [r7, #4]
 80099a4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80099a6:	220b      	movs	r2, #11
 80099a8:	68b9      	ldr	r1, [r7, #8]
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f7fe ff26 	bl	80087fc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	2b05      	cmp	r3, #5
 80099b4:	d92b      	bls.n	8009a0e <gen_numname+0x76>
		sr = seq;
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80099ba:	e022      	b.n	8009a02 <gen_numname+0x6a>
			wc = *lfn++;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	1c9a      	adds	r2, r3, #2
 80099c0:	607a      	str	r2, [r7, #4]
 80099c2:	881b      	ldrh	r3, [r3, #0]
 80099c4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80099c6:	2300      	movs	r3, #0
 80099c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80099ca:	e017      	b.n	80099fc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	005a      	lsls	r2, r3, #1
 80099d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80099d2:	f003 0301 	and.w	r3, r3, #1
 80099d6:	4413      	add	r3, r2
 80099d8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80099da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80099dc:	085b      	lsrs	r3, r3, #1
 80099de:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d005      	beq.n	80099f6 <gen_numname+0x5e>
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80099f0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80099f4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80099f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f8:	3301      	adds	r3, #1
 80099fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80099fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fe:	2b0f      	cmp	r3, #15
 8009a00:	d9e4      	bls.n	80099cc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	881b      	ldrh	r3, [r3, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1d8      	bne.n	80099bc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009a0e:	2307      	movs	r3, #7
 8009a10:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	f003 030f 	and.w	r3, r3, #15
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	3330      	adds	r3, #48	; 0x30
 8009a1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8009a22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a26:	2b39      	cmp	r3, #57	; 0x39
 8009a28:	d904      	bls.n	8009a34 <gen_numname+0x9c>
 8009a2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a2e:	3307      	adds	r3, #7
 8009a30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a36:	1e5a      	subs	r2, r3, #1
 8009a38:	62ba      	str	r2, [r7, #40]	; 0x28
 8009a3a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009a3e:	4413      	add	r3, r2
 8009a40:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009a44:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	091b      	lsrs	r3, r3, #4
 8009a4c:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1de      	bne.n	8009a12 <gen_numname+0x7a>
	ns[i] = '~';
 8009a54:	f107 0214 	add.w	r2, r7, #20
 8009a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5a:	4413      	add	r3, r2
 8009a5c:	227e      	movs	r2, #126	; 0x7e
 8009a5e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009a60:	2300      	movs	r3, #0
 8009a62:	627b      	str	r3, [r7, #36]	; 0x24
 8009a64:	e002      	b.n	8009a6c <gen_numname+0xd4>
 8009a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a68:	3301      	adds	r3, #1
 8009a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8009a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d205      	bcs.n	8009a80 <gen_numname+0xe8>
 8009a74:	68fa      	ldr	r2, [r7, #12]
 8009a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a78:	4413      	add	r3, r2
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	2b20      	cmp	r3, #32
 8009a7e:	d1f2      	bne.n	8009a66 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a82:	2b07      	cmp	r3, #7
 8009a84:	d808      	bhi.n	8009a98 <gen_numname+0x100>
 8009a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a88:	1c5a      	adds	r2, r3, #1
 8009a8a:	62ba      	str	r2, [r7, #40]	; 0x28
 8009a8c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009a90:	4413      	add	r3, r2
 8009a92:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009a96:	e000      	b.n	8009a9a <gen_numname+0x102>
 8009a98:	2120      	movs	r1, #32
 8009a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9c:	1c5a      	adds	r2, r3, #1
 8009a9e:	627a      	str	r2, [r7, #36]	; 0x24
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	460a      	mov	r2, r1
 8009aa6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aaa:	2b07      	cmp	r3, #7
 8009aac:	d9e8      	bls.n	8009a80 <gen_numname+0xe8>
}
 8009aae:	bf00      	nop
 8009ab0:	bf00      	nop
 8009ab2:	3730      	adds	r7, #48	; 0x30
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009ac4:	230b      	movs	r3, #11
 8009ac6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009ac8:	7bfb      	ldrb	r3, [r7, #15]
 8009aca:	b2da      	uxtb	r2, r3
 8009acc:	0852      	lsrs	r2, r2, #1
 8009ace:	01db      	lsls	r3, r3, #7
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	b2da      	uxtb	r2, r3
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	1c59      	adds	r1, r3, #1
 8009ad8:	6079      	str	r1, [r7, #4]
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	4413      	add	r3, r2
 8009ade:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	60bb      	str	r3, [r7, #8]
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1ed      	bne.n	8009ac8 <sum_sfn+0x10>
	return sum;
 8009aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3714      	adds	r7, #20
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr

08009afa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009afa:	b580      	push	{r7, lr}
 8009afc:	b086      	sub	sp, #24
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009b08:	2100      	movs	r1, #0
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f7ff fc86 	bl	800941c <dir_sdi>
 8009b10:	4603      	mov	r3, r0
 8009b12:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009b14:	7dfb      	ldrb	r3, [r7, #23]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d001      	beq.n	8009b1e <dir_find+0x24>
 8009b1a:	7dfb      	ldrb	r3, [r7, #23]
 8009b1c:	e0a9      	b.n	8009c72 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009b1e:	23ff      	movs	r3, #255	; 0xff
 8009b20:	753b      	strb	r3, [r7, #20]
 8009b22:	7d3b      	ldrb	r3, [r7, #20]
 8009b24:	757b      	strb	r3, [r7, #21]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f04f 32ff 	mov.w	r2, #4294967295
 8009b2c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	69db      	ldr	r3, [r3, #28]
 8009b32:	4619      	mov	r1, r3
 8009b34:	6938      	ldr	r0, [r7, #16]
 8009b36:	f7ff f88f 	bl	8008c58 <move_window>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009b3e:	7dfb      	ldrb	r3, [r7, #23]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	f040 8090 	bne.w	8009c66 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a1b      	ldr	r3, [r3, #32]
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009b4e:	7dbb      	ldrb	r3, [r7, #22]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d102      	bne.n	8009b5a <dir_find+0x60>
 8009b54:	2304      	movs	r3, #4
 8009b56:	75fb      	strb	r3, [r7, #23]
 8009b58:	e08a      	b.n	8009c70 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a1b      	ldr	r3, [r3, #32]
 8009b5e:	330b      	adds	r3, #11
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b66:	73fb      	strb	r3, [r7, #15]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	7bfa      	ldrb	r2, [r7, #15]
 8009b6c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009b6e:	7dbb      	ldrb	r3, [r7, #22]
 8009b70:	2be5      	cmp	r3, #229	; 0xe5
 8009b72:	d007      	beq.n	8009b84 <dir_find+0x8a>
 8009b74:	7bfb      	ldrb	r3, [r7, #15]
 8009b76:	f003 0308 	and.w	r3, r3, #8
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d009      	beq.n	8009b92 <dir_find+0x98>
 8009b7e:	7bfb      	ldrb	r3, [r7, #15]
 8009b80:	2b0f      	cmp	r3, #15
 8009b82:	d006      	beq.n	8009b92 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009b84:	23ff      	movs	r3, #255	; 0xff
 8009b86:	757b      	strb	r3, [r7, #21]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b8e:	631a      	str	r2, [r3, #48]	; 0x30
 8009b90:	e05e      	b.n	8009c50 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009b92:	7bfb      	ldrb	r3, [r7, #15]
 8009b94:	2b0f      	cmp	r3, #15
 8009b96:	d136      	bne.n	8009c06 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d154      	bne.n	8009c50 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009ba6:	7dbb      	ldrb	r3, [r7, #22]
 8009ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d00d      	beq.n	8009bcc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6a1b      	ldr	r3, [r3, #32]
 8009bb4:	7b5b      	ldrb	r3, [r3, #13]
 8009bb6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009bb8:	7dbb      	ldrb	r3, [r7, #22]
 8009bba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bbe:	75bb      	strb	r3, [r7, #22]
 8009bc0:	7dbb      	ldrb	r3, [r7, #22]
 8009bc2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	695a      	ldr	r2, [r3, #20]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009bcc:	7dba      	ldrb	r2, [r7, #22]
 8009bce:	7d7b      	ldrb	r3, [r7, #21]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d115      	bne.n	8009c00 <dir_find+0x106>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6a1b      	ldr	r3, [r3, #32]
 8009bd8:	330d      	adds	r3, #13
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	7d3a      	ldrb	r2, [r7, #20]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d10e      	bne.n	8009c00 <dir_find+0x106>
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	691a      	ldr	r2, [r3, #16]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6a1b      	ldr	r3, [r3, #32]
 8009bea:	4619      	mov	r1, r3
 8009bec:	4610      	mov	r0, r2
 8009bee:	f7ff fdfb 	bl	80097e8 <cmp_lfn>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d003      	beq.n	8009c00 <dir_find+0x106>
 8009bf8:	7d7b      	ldrb	r3, [r7, #21]
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	e000      	b.n	8009c02 <dir_find+0x108>
 8009c00:	23ff      	movs	r3, #255	; 0xff
 8009c02:	757b      	strb	r3, [r7, #21]
 8009c04:	e024      	b.n	8009c50 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009c06:	7d7b      	ldrb	r3, [r7, #21]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d109      	bne.n	8009c20 <dir_find+0x126>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a1b      	ldr	r3, [r3, #32]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7ff ff51 	bl	8009ab8 <sum_sfn>
 8009c16:	4603      	mov	r3, r0
 8009c18:	461a      	mov	r2, r3
 8009c1a:	7d3b      	ldrb	r3, [r7, #20]
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d024      	beq.n	8009c6a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009c26:	f003 0301 	and.w	r3, r3, #1
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d10a      	bne.n	8009c44 <dir_find+0x14a>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a18      	ldr	r0, [r3, #32]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	3324      	adds	r3, #36	; 0x24
 8009c36:	220b      	movs	r2, #11
 8009c38:	4619      	mov	r1, r3
 8009c3a:	f7fe fe1b 	bl	8008874 <mem_cmp>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d014      	beq.n	8009c6e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009c44:	23ff      	movs	r3, #255	; 0xff
 8009c46:	757b      	strb	r3, [r7, #21]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c4e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009c50:	2100      	movs	r1, #0
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f7ff fc6b 	bl	800952e <dir_next>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009c5c:	7dfb      	ldrb	r3, [r7, #23]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	f43f af65 	beq.w	8009b2e <dir_find+0x34>
 8009c64:	e004      	b.n	8009c70 <dir_find+0x176>
		if (res != FR_OK) break;
 8009c66:	bf00      	nop
 8009c68:	e002      	b.n	8009c70 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009c6a:	bf00      	nop
 8009c6c:	e000      	b.n	8009c70 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009c6e:	bf00      	nop

	return res;
 8009c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3718      	adds	r7, #24
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
	...

08009c7c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b08c      	sub	sp, #48	; 0x30
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009c90:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d001      	beq.n	8009c9c <dir_register+0x20>
 8009c98:	2306      	movs	r3, #6
 8009c9a:	e0e0      	b.n	8009e5e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8009ca0:	e002      	b.n	8009ca8 <dir_register+0x2c>
 8009ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	691a      	ldr	r2, [r3, #16]
 8009cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cae:	005b      	lsls	r3, r3, #1
 8009cb0:	4413      	add	r3, r2
 8009cb2:	881b      	ldrh	r3, [r3, #0]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d1f4      	bne.n	8009ca2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009cbe:	f107 030c 	add.w	r3, r7, #12
 8009cc2:	220c      	movs	r2, #12
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7fe fd99 	bl	80087fc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009cca:	7dfb      	ldrb	r3, [r7, #23]
 8009ccc:	f003 0301 	and.w	r3, r3, #1
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d032      	beq.n	8009d3a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2240      	movs	r2, #64	; 0x40
 8009cd8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009cdc:	2301      	movs	r3, #1
 8009cde:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ce0:	e016      	b.n	8009d10 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	691a      	ldr	r2, [r3, #16]
 8009cec:	f107 010c 	add.w	r1, r7, #12
 8009cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf2:	f7ff fe51 	bl	8009998 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f7ff feff 	bl	8009afa <dir_find>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009d02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d106      	bne.n	8009d18 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d12:	2b63      	cmp	r3, #99	; 0x63
 8009d14:	d9e5      	bls.n	8009ce2 <dir_register+0x66>
 8009d16:	e000      	b.n	8009d1a <dir_register+0x9e>
			if (res != FR_OK) break;
 8009d18:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1c:	2b64      	cmp	r3, #100	; 0x64
 8009d1e:	d101      	bne.n	8009d24 <dir_register+0xa8>
 8009d20:	2307      	movs	r3, #7
 8009d22:	e09c      	b.n	8009e5e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009d24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d28:	2b04      	cmp	r3, #4
 8009d2a:	d002      	beq.n	8009d32 <dir_register+0xb6>
 8009d2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d30:	e095      	b.n	8009e5e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009d32:	7dfa      	ldrb	r2, [r7, #23]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009d3a:	7dfb      	ldrb	r3, [r7, #23]
 8009d3c:	f003 0302 	and.w	r3, r3, #2
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d007      	beq.n	8009d54 <dir_register+0xd8>
 8009d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d46:	330c      	adds	r3, #12
 8009d48:	4a47      	ldr	r2, [pc, #284]	; (8009e68 <dir_register+0x1ec>)
 8009d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d4e:	089b      	lsrs	r3, r3, #2
 8009d50:	3301      	adds	r3, #1
 8009d52:	e000      	b.n	8009d56 <dir_register+0xda>
 8009d54:	2301      	movs	r3, #1
 8009d56:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009d58:	6a39      	ldr	r1, [r7, #32]
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f7ff fcbd 	bl	80096da <dir_alloc>
 8009d60:	4603      	mov	r3, r0
 8009d62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009d66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d148      	bne.n	8009e00 <dir_register+0x184>
 8009d6e:	6a3b      	ldr	r3, [r7, #32]
 8009d70:	3b01      	subs	r3, #1
 8009d72:	623b      	str	r3, [r7, #32]
 8009d74:	6a3b      	ldr	r3, [r7, #32]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d042      	beq.n	8009e00 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	695a      	ldr	r2, [r3, #20]
 8009d7e:	6a3b      	ldr	r3, [r7, #32]
 8009d80:	015b      	lsls	r3, r3, #5
 8009d82:	1ad3      	subs	r3, r2, r3
 8009d84:	4619      	mov	r1, r3
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f7ff fb48 	bl	800941c <dir_sdi>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009d92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d132      	bne.n	8009e00 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	3324      	adds	r3, #36	; 0x24
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7ff fe8a 	bl	8009ab8 <sum_sfn>
 8009da4:	4603      	mov	r3, r0
 8009da6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	69db      	ldr	r3, [r3, #28]
 8009dac:	4619      	mov	r1, r3
 8009dae:	69f8      	ldr	r0, [r7, #28]
 8009db0:	f7fe ff52 	bl	8008c58 <move_window>
 8009db4:	4603      	mov	r3, r0
 8009db6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8009dba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d11d      	bne.n	8009dfe <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009dc2:	69fb      	ldr	r3, [r7, #28]
 8009dc4:	6918      	ldr	r0, [r3, #16]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a19      	ldr	r1, [r3, #32]
 8009dca:	6a3b      	ldr	r3, [r7, #32]
 8009dcc:	b2da      	uxtb	r2, r3
 8009dce:	7efb      	ldrb	r3, [r7, #27]
 8009dd0:	f7ff fd7a 	bl	80098c8 <put_lfn>
				fs->wflag = 1;
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009dda:	2100      	movs	r1, #0
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f7ff fba6 	bl	800952e <dir_next>
 8009de2:	4603      	mov	r3, r0
 8009de4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009de8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d107      	bne.n	8009e00 <dir_register+0x184>
 8009df0:	6a3b      	ldr	r3, [r7, #32]
 8009df2:	3b01      	subs	r3, #1
 8009df4:	623b      	str	r3, [r7, #32]
 8009df6:	6a3b      	ldr	r3, [r7, #32]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1d5      	bne.n	8009da8 <dir_register+0x12c>
 8009dfc:	e000      	b.n	8009e00 <dir_register+0x184>
				if (res != FR_OK) break;
 8009dfe:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009e00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d128      	bne.n	8009e5a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	69db      	ldr	r3, [r3, #28]
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	69f8      	ldr	r0, [r7, #28]
 8009e10:	f7fe ff22 	bl	8008c58 <move_window>
 8009e14:	4603      	mov	r3, r0
 8009e16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009e1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d11b      	bne.n	8009e5a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a1b      	ldr	r3, [r3, #32]
 8009e26:	2220      	movs	r2, #32
 8009e28:	2100      	movs	r1, #0
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7fe fd07 	bl	800883e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6a18      	ldr	r0, [r3, #32]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	3324      	adds	r3, #36	; 0x24
 8009e38:	220b      	movs	r2, #11
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	f7fe fcde 	bl	80087fc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6a1b      	ldr	r3, [r3, #32]
 8009e4a:	330c      	adds	r3, #12
 8009e4c:	f002 0218 	and.w	r2, r2, #24
 8009e50:	b2d2      	uxtb	r2, r2
 8009e52:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009e54:	69fb      	ldr	r3, [r7, #28]
 8009e56:	2201      	movs	r2, #1
 8009e58:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009e5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3730      	adds	r7, #48	; 0x30
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	4ec4ec4f 	.word	0x4ec4ec4f

08009e6c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b08a      	sub	sp, #40	; 0x28
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	613b      	str	r3, [r7, #16]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	60fb      	str	r3, [r7, #12]
 8009e84:	2300      	movs	r3, #0
 8009e86:	617b      	str	r3, [r7, #20]
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009e8c:	69bb      	ldr	r3, [r7, #24]
 8009e8e:	1c5a      	adds	r2, r3, #1
 8009e90:	61ba      	str	r2, [r7, #24]
 8009e92:	693a      	ldr	r2, [r7, #16]
 8009e94:	4413      	add	r3, r2
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009e9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e9c:	2b1f      	cmp	r3, #31
 8009e9e:	d940      	bls.n	8009f22 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009ea0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ea2:	2b2f      	cmp	r3, #47	; 0x2f
 8009ea4:	d006      	beq.n	8009eb4 <create_name+0x48>
 8009ea6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ea8:	2b5c      	cmp	r3, #92	; 0x5c
 8009eaa:	d110      	bne.n	8009ece <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009eac:	e002      	b.n	8009eb4 <create_name+0x48>
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	61bb      	str	r3, [r7, #24]
 8009eb4:	693a      	ldr	r2, [r7, #16]
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	4413      	add	r3, r2
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	2b2f      	cmp	r3, #47	; 0x2f
 8009ebe:	d0f6      	beq.n	8009eae <create_name+0x42>
 8009ec0:	693a      	ldr	r2, [r7, #16]
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	2b5c      	cmp	r3, #92	; 0x5c
 8009eca:	d0f0      	beq.n	8009eae <create_name+0x42>
			break;
 8009ecc:	e02a      	b.n	8009f24 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	2bfe      	cmp	r3, #254	; 0xfe
 8009ed2:	d901      	bls.n	8009ed8 <create_name+0x6c>
 8009ed4:	2306      	movs	r3, #6
 8009ed6:	e177      	b.n	800a1c8 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009ed8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009ede:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ee0:	2101      	movs	r1, #1
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f001 f9be 	bl	800b264 <ff_convert>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009eec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d101      	bne.n	8009ef6 <create_name+0x8a>
 8009ef2:	2306      	movs	r3, #6
 8009ef4:	e168      	b.n	800a1c8 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009ef6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ef8:	2b7f      	cmp	r3, #127	; 0x7f
 8009efa:	d809      	bhi.n	8009f10 <create_name+0xa4>
 8009efc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009efe:	4619      	mov	r1, r3
 8009f00:	48b3      	ldr	r0, [pc, #716]	; (800a1d0 <create_name+0x364>)
 8009f02:	f7fe fcde 	bl	80088c2 <chk_chr>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d001      	beq.n	8009f10 <create_name+0xa4>
 8009f0c:	2306      	movs	r3, #6
 8009f0e:	e15b      	b.n	800a1c8 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	1c5a      	adds	r2, r3, #1
 8009f14:	617a      	str	r2, [r7, #20]
 8009f16:	005b      	lsls	r3, r3, #1
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009f1e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009f20:	e7b4      	b.n	8009e8c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009f22:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009f24:	693a      	ldr	r2, [r7, #16]
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	441a      	add	r2, r3
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009f2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f30:	2b1f      	cmp	r3, #31
 8009f32:	d801      	bhi.n	8009f38 <create_name+0xcc>
 8009f34:	2304      	movs	r3, #4
 8009f36:	e000      	b.n	8009f3a <create_name+0xce>
 8009f38:	2300      	movs	r3, #0
 8009f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009f3e:	e011      	b.n	8009f64 <create_name+0xf8>
		w = lfn[di - 1];
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009f46:	3b01      	subs	r3, #1
 8009f48:	005b      	lsls	r3, r3, #1
 8009f4a:	68fa      	ldr	r2, [r7, #12]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	881b      	ldrh	r3, [r3, #0]
 8009f50:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009f52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f54:	2b20      	cmp	r3, #32
 8009f56:	d002      	beq.n	8009f5e <create_name+0xf2>
 8009f58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f5a:	2b2e      	cmp	r3, #46	; 0x2e
 8009f5c:	d106      	bne.n	8009f6c <create_name+0x100>
		di--;
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	3b01      	subs	r3, #1
 8009f62:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1ea      	bne.n	8009f40 <create_name+0xd4>
 8009f6a:	e000      	b.n	8009f6e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009f6c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	005b      	lsls	r3, r3, #1
 8009f72:	68fa      	ldr	r2, [r7, #12]
 8009f74:	4413      	add	r3, r2
 8009f76:	2200      	movs	r2, #0
 8009f78:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d101      	bne.n	8009f84 <create_name+0x118>
 8009f80:	2306      	movs	r3, #6
 8009f82:	e121      	b.n	800a1c8 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	3324      	adds	r3, #36	; 0x24
 8009f88:	220b      	movs	r2, #11
 8009f8a:	2120      	movs	r1, #32
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7fe fc56 	bl	800883e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009f92:	2300      	movs	r3, #0
 8009f94:	61bb      	str	r3, [r7, #24]
 8009f96:	e002      	b.n	8009f9e <create_name+0x132>
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	61bb      	str	r3, [r7, #24]
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	005b      	lsls	r3, r3, #1
 8009fa2:	68fa      	ldr	r2, [r7, #12]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	881b      	ldrh	r3, [r3, #0]
 8009fa8:	2b20      	cmp	r3, #32
 8009faa:	d0f5      	beq.n	8009f98 <create_name+0x12c>
 8009fac:	69bb      	ldr	r3, [r7, #24]
 8009fae:	005b      	lsls	r3, r3, #1
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	881b      	ldrh	r3, [r3, #0]
 8009fb6:	2b2e      	cmp	r3, #46	; 0x2e
 8009fb8:	d0ee      	beq.n	8009f98 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d009      	beq.n	8009fd4 <create_name+0x168>
 8009fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fc4:	f043 0303 	orr.w	r3, r3, #3
 8009fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009fcc:	e002      	b.n	8009fd4 <create_name+0x168>
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	617b      	str	r3, [r7, #20]
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d009      	beq.n	8009fee <create_name+0x182>
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	005b      	lsls	r3, r3, #1
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	881b      	ldrh	r3, [r3, #0]
 8009fea:	2b2e      	cmp	r3, #46	; 0x2e
 8009fec:	d1ef      	bne.n	8009fce <create_name+0x162>

	i = b = 0; ni = 8;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	623b      	str	r3, [r7, #32]
 8009ff8:	2308      	movs	r3, #8
 8009ffa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	1c5a      	adds	r2, r3, #1
 800a000:	61ba      	str	r2, [r7, #24]
 800a002:	005b      	lsls	r3, r3, #1
 800a004:	68fa      	ldr	r2, [r7, #12]
 800a006:	4413      	add	r3, r2
 800a008:	881b      	ldrh	r3, [r3, #0]
 800a00a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a00c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a00e:	2b00      	cmp	r3, #0
 800a010:	f000 8090 	beq.w	800a134 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a014:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a016:	2b20      	cmp	r3, #32
 800a018:	d006      	beq.n	800a028 <create_name+0x1bc>
 800a01a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a01c:	2b2e      	cmp	r3, #46	; 0x2e
 800a01e:	d10a      	bne.n	800a036 <create_name+0x1ca>
 800a020:	69ba      	ldr	r2, [r7, #24]
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	429a      	cmp	r2, r3
 800a026:	d006      	beq.n	800a036 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800a028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a02c:	f043 0303 	orr.w	r3, r3, #3
 800a030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a034:	e07d      	b.n	800a132 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a036:	6a3a      	ldr	r2, [r7, #32]
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d203      	bcs.n	800a046 <create_name+0x1da>
 800a03e:	69ba      	ldr	r2, [r7, #24]
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	429a      	cmp	r2, r3
 800a044:	d123      	bne.n	800a08e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800a046:	69fb      	ldr	r3, [r7, #28]
 800a048:	2b0b      	cmp	r3, #11
 800a04a:	d106      	bne.n	800a05a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800a04c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a050:	f043 0303 	orr.w	r3, r3, #3
 800a054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a058:	e06f      	b.n	800a13a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a05a:	69ba      	ldr	r2, [r7, #24]
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d005      	beq.n	800a06e <create_name+0x202>
 800a062:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a066:	f043 0303 	orr.w	r3, r3, #3
 800a06a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800a06e:	69ba      	ldr	r2, [r7, #24]
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	429a      	cmp	r2, r3
 800a074:	d860      	bhi.n	800a138 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	61bb      	str	r3, [r7, #24]
 800a07a:	2308      	movs	r3, #8
 800a07c:	623b      	str	r3, [r7, #32]
 800a07e:	230b      	movs	r3, #11
 800a080:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a082:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a08c:	e051      	b.n	800a132 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a08e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a090:	2b7f      	cmp	r3, #127	; 0x7f
 800a092:	d914      	bls.n	800a0be <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a096:	2100      	movs	r1, #0
 800a098:	4618      	mov	r0, r3
 800a09a:	f001 f8e3 	bl	800b264 <ff_convert>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a0a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d004      	beq.n	800a0b2 <create_name+0x246>
 800a0a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0aa:	3b80      	subs	r3, #128	; 0x80
 800a0ac:	4a49      	ldr	r2, [pc, #292]	; (800a1d4 <create_name+0x368>)
 800a0ae:	5cd3      	ldrb	r3, [r2, r3]
 800a0b0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a0b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0b6:	f043 0302 	orr.w	r3, r3, #2
 800a0ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a0be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d007      	beq.n	800a0d4 <create_name+0x268>
 800a0c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	4843      	ldr	r0, [pc, #268]	; (800a1d8 <create_name+0x36c>)
 800a0ca:	f7fe fbfa 	bl	80088c2 <chk_chr>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d008      	beq.n	800a0e6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a0d4:	235f      	movs	r3, #95	; 0x5f
 800a0d6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a0d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0dc:	f043 0303 	orr.w	r3, r3, #3
 800a0e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a0e4:	e01b      	b.n	800a11e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a0e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0e8:	2b40      	cmp	r3, #64	; 0x40
 800a0ea:	d909      	bls.n	800a100 <create_name+0x294>
 800a0ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0ee:	2b5a      	cmp	r3, #90	; 0x5a
 800a0f0:	d806      	bhi.n	800a100 <create_name+0x294>
					b |= 2;
 800a0f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a0f6:	f043 0302 	orr.w	r3, r3, #2
 800a0fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a0fe:	e00e      	b.n	800a11e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a100:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a102:	2b60      	cmp	r3, #96	; 0x60
 800a104:	d90b      	bls.n	800a11e <create_name+0x2b2>
 800a106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a108:	2b7a      	cmp	r3, #122	; 0x7a
 800a10a:	d808      	bhi.n	800a11e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800a10c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a110:	f043 0301 	orr.w	r3, r3, #1
 800a114:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a118:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a11a:	3b20      	subs	r3, #32
 800a11c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a11e:	6a3b      	ldr	r3, [r7, #32]
 800a120:	1c5a      	adds	r2, r3, #1
 800a122:	623a      	str	r2, [r7, #32]
 800a124:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a126:	b2d1      	uxtb	r1, r2
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	4413      	add	r3, r2
 800a12c:	460a      	mov	r2, r1
 800a12e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800a132:	e763      	b.n	8009ffc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800a134:	bf00      	nop
 800a136:	e000      	b.n	800a13a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800a138:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a140:	2be5      	cmp	r3, #229	; 0xe5
 800a142:	d103      	bne.n	800a14c <create_name+0x2e0>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2205      	movs	r2, #5
 800a148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	2b08      	cmp	r3, #8
 800a150:	d104      	bne.n	800a15c <create_name+0x2f0>
 800a152:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800a15c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a160:	f003 030c 	and.w	r3, r3, #12
 800a164:	2b0c      	cmp	r3, #12
 800a166:	d005      	beq.n	800a174 <create_name+0x308>
 800a168:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a16c:	f003 0303 	and.w	r3, r3, #3
 800a170:	2b03      	cmp	r3, #3
 800a172:	d105      	bne.n	800a180 <create_name+0x314>
 800a174:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a178:	f043 0302 	orr.w	r3, r3, #2
 800a17c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a180:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a184:	f003 0302 	and.w	r3, r3, #2
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d117      	bne.n	800a1bc <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a18c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a190:	f003 0303 	and.w	r3, r3, #3
 800a194:	2b01      	cmp	r3, #1
 800a196:	d105      	bne.n	800a1a4 <create_name+0x338>
 800a198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a19c:	f043 0310 	orr.w	r3, r3, #16
 800a1a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a1a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a1a8:	f003 030c 	and.w	r3, r3, #12
 800a1ac:	2b04      	cmp	r3, #4
 800a1ae:	d105      	bne.n	800a1bc <create_name+0x350>
 800a1b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1b4:	f043 0308 	orr.w	r3, r3, #8
 800a1b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a1c2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800a1c6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3728      	adds	r7, #40	; 0x28
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	0800be3c 	.word	0x0800be3c
 800a1d4:	0800cd68 	.word	0x0800cd68
 800a1d8:	0800be48 	.word	0x0800be48

0800a1dc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b086      	sub	sp, #24
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a1f0:	e002      	b.n	800a1f8 <follow_path+0x1c>
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	603b      	str	r3, [r7, #0]
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	2b2f      	cmp	r3, #47	; 0x2f
 800a1fe:	d0f8      	beq.n	800a1f2 <follow_path+0x16>
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	2b5c      	cmp	r3, #92	; 0x5c
 800a206:	d0f4      	beq.n	800a1f2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	2200      	movs	r2, #0
 800a20c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	2b1f      	cmp	r3, #31
 800a214:	d80a      	bhi.n	800a22c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2280      	movs	r2, #128	; 0x80
 800a21a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a21e:	2100      	movs	r1, #0
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f7ff f8fb 	bl	800941c <dir_sdi>
 800a226:	4603      	mov	r3, r0
 800a228:	75fb      	strb	r3, [r7, #23]
 800a22a:	e048      	b.n	800a2be <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a22c:	463b      	mov	r3, r7
 800a22e:	4619      	mov	r1, r3
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f7ff fe1b 	bl	8009e6c <create_name>
 800a236:	4603      	mov	r3, r0
 800a238:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a23a:	7dfb      	ldrb	r3, [r7, #23]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d139      	bne.n	800a2b4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f7ff fc5a 	bl	8009afa <dir_find>
 800a246:	4603      	mov	r3, r0
 800a248:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a250:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a252:	7dfb      	ldrb	r3, [r7, #23]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d00a      	beq.n	800a26e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a258:	7dfb      	ldrb	r3, [r7, #23]
 800a25a:	2b04      	cmp	r3, #4
 800a25c:	d12c      	bne.n	800a2b8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a25e:	7afb      	ldrb	r3, [r7, #11]
 800a260:	f003 0304 	and.w	r3, r3, #4
 800a264:	2b00      	cmp	r3, #0
 800a266:	d127      	bne.n	800a2b8 <follow_path+0xdc>
 800a268:	2305      	movs	r3, #5
 800a26a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a26c:	e024      	b.n	800a2b8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a26e:	7afb      	ldrb	r3, [r7, #11]
 800a270:	f003 0304 	and.w	r3, r3, #4
 800a274:	2b00      	cmp	r3, #0
 800a276:	d121      	bne.n	800a2bc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	799b      	ldrb	r3, [r3, #6]
 800a27c:	f003 0310 	and.w	r3, r3, #16
 800a280:	2b00      	cmp	r3, #0
 800a282:	d102      	bne.n	800a28a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a284:	2305      	movs	r3, #5
 800a286:	75fb      	strb	r3, [r7, #23]
 800a288:	e019      	b.n	800a2be <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	695b      	ldr	r3, [r3, #20]
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	8992      	ldrh	r2, [r2, #12]
 800a298:	fbb3 f0f2 	udiv	r0, r3, r2
 800a29c:	fb02 f200 	mul.w	r2, r2, r0
 800a2a0:	1a9b      	subs	r3, r3, r2
 800a2a2:	440b      	add	r3, r1
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f7ff fa5e 	bl	8009768 <ld_clust>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a2b2:	e7bb      	b.n	800a22c <follow_path+0x50>
			if (res != FR_OK) break;
 800a2b4:	bf00      	nop
 800a2b6:	e002      	b.n	800a2be <follow_path+0xe2>
				break;
 800a2b8:	bf00      	nop
 800a2ba:	e000      	b.n	800a2be <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a2bc:	bf00      	nop
			}
		}
	}

	return res;
 800a2be:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3718      	adds	r7, #24
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b087      	sub	sp, #28
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a2d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a2d4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d031      	beq.n	800a342 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	617b      	str	r3, [r7, #20]
 800a2e4:	e002      	b.n	800a2ec <get_ldnumber+0x24>
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	617b      	str	r3, [r7, #20]
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	2b1f      	cmp	r3, #31
 800a2f2:	d903      	bls.n	800a2fc <get_ldnumber+0x34>
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	2b3a      	cmp	r3, #58	; 0x3a
 800a2fa:	d1f4      	bne.n	800a2e6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	2b3a      	cmp	r3, #58	; 0x3a
 800a302:	d11c      	bne.n	800a33e <get_ldnumber+0x76>
			tp = *path;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	1c5a      	adds	r2, r3, #1
 800a30e:	60fa      	str	r2, [r7, #12]
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	3b30      	subs	r3, #48	; 0x30
 800a314:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	2b09      	cmp	r3, #9
 800a31a:	d80e      	bhi.n	800a33a <get_ldnumber+0x72>
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	429a      	cmp	r2, r3
 800a322:	d10a      	bne.n	800a33a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d107      	bne.n	800a33a <get_ldnumber+0x72>
					vol = (int)i;
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	3301      	adds	r3, #1
 800a332:	617b      	str	r3, [r7, #20]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	697a      	ldr	r2, [r7, #20]
 800a338:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	e002      	b.n	800a344 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a33e:	2300      	movs	r3, #0
 800a340:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a342:	693b      	ldr	r3, [r7, #16]
}
 800a344:	4618      	mov	r0, r3
 800a346:	371c      	adds	r7, #28
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	70da      	strb	r2, [r3, #3]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f04f 32ff 	mov.w	r2, #4294967295
 800a366:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a368:	6839      	ldr	r1, [r7, #0]
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f7fe fc74 	bl	8008c58 <move_window>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d001      	beq.n	800a37a <check_fs+0x2a>
 800a376:	2304      	movs	r3, #4
 800a378:	e038      	b.n	800a3ec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	3338      	adds	r3, #56	; 0x38
 800a37e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a382:	4618      	mov	r0, r3
 800a384:	f7fe f9b8 	bl	80086f8 <ld_word>
 800a388:	4603      	mov	r3, r0
 800a38a:	461a      	mov	r2, r3
 800a38c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a390:	429a      	cmp	r2, r3
 800a392:	d001      	beq.n	800a398 <check_fs+0x48>
 800a394:	2303      	movs	r3, #3
 800a396:	e029      	b.n	800a3ec <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a39e:	2be9      	cmp	r3, #233	; 0xe9
 800a3a0:	d009      	beq.n	800a3b6 <check_fs+0x66>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a3a8:	2beb      	cmp	r3, #235	; 0xeb
 800a3aa:	d11e      	bne.n	800a3ea <check_fs+0x9a>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a3b2:	2b90      	cmp	r3, #144	; 0x90
 800a3b4:	d119      	bne.n	800a3ea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	3338      	adds	r3, #56	; 0x38
 800a3ba:	3336      	adds	r3, #54	; 0x36
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f7fe f9b3 	bl	8008728 <ld_dword>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a3c8:	4a0a      	ldr	r2, [pc, #40]	; (800a3f4 <check_fs+0xa4>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d101      	bne.n	800a3d2 <check_fs+0x82>
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	e00c      	b.n	800a3ec <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	3338      	adds	r3, #56	; 0x38
 800a3d6:	3352      	adds	r3, #82	; 0x52
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7fe f9a5 	bl	8008728 <ld_dword>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	4a05      	ldr	r2, [pc, #20]	; (800a3f8 <check_fs+0xa8>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d101      	bne.n	800a3ea <check_fs+0x9a>
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	e000      	b.n	800a3ec <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a3ea:	2302      	movs	r3, #2
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	00544146 	.word	0x00544146
 800a3f8:	33544146 	.word	0x33544146

0800a3fc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b096      	sub	sp, #88	; 0x58
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	4613      	mov	r3, r2
 800a408:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	2200      	movs	r2, #0
 800a40e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a410:	68f8      	ldr	r0, [r7, #12]
 800a412:	f7ff ff59 	bl	800a2c8 <get_ldnumber>
 800a416:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	da01      	bge.n	800a422 <find_volume+0x26>
 800a41e:	230b      	movs	r3, #11
 800a420:	e268      	b.n	800a8f4 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a422:	4ab0      	ldr	r2, [pc, #704]	; (800a6e4 <find_volume+0x2e8>)
 800a424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a42a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d101      	bne.n	800a436 <find_volume+0x3a>
 800a432:	230c      	movs	r3, #12
 800a434:	e25e      	b.n	800a8f4 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a43a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a43c:	79fb      	ldrb	r3, [r7, #7]
 800a43e:	f023 0301 	bic.w	r3, r3, #1
 800a442:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d01a      	beq.n	800a482 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44e:	785b      	ldrb	r3, [r3, #1]
 800a450:	4618      	mov	r0, r3
 800a452:	f7fe f8b3 	bl	80085bc <disk_status>
 800a456:	4603      	mov	r3, r0
 800a458:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a45c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a460:	f003 0301 	and.w	r3, r3, #1
 800a464:	2b00      	cmp	r3, #0
 800a466:	d10c      	bne.n	800a482 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a468:	79fb      	ldrb	r3, [r7, #7]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d007      	beq.n	800a47e <find_volume+0x82>
 800a46e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a472:	f003 0304 	and.w	r3, r3, #4
 800a476:	2b00      	cmp	r3, #0
 800a478:	d001      	beq.n	800a47e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a47a:	230a      	movs	r3, #10
 800a47c:	e23a      	b.n	800a8f4 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800a47e:	2300      	movs	r3, #0
 800a480:	e238      	b.n	800a8f4 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a484:	2200      	movs	r2, #0
 800a486:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a48a:	b2da      	uxtb	r2, r3
 800a48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a492:	785b      	ldrb	r3, [r3, #1]
 800a494:	4618      	mov	r0, r3
 800a496:	f7fe f8ab 	bl	80085f0 <disk_initialize>
 800a49a:	4603      	mov	r3, r0
 800a49c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a4a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a4a4:	f003 0301 	and.w	r3, r3, #1
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d001      	beq.n	800a4b0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a4ac:	2303      	movs	r3, #3
 800a4ae:	e221      	b.n	800a8f4 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a4b0:	79fb      	ldrb	r3, [r7, #7]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d007      	beq.n	800a4c6 <find_volume+0xca>
 800a4b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a4ba:	f003 0304 	and.w	r3, r3, #4
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d001      	beq.n	800a4c6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a4c2:	230a      	movs	r3, #10
 800a4c4:	e216      	b.n	800a8f4 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c8:	7858      	ldrb	r0, [r3, #1]
 800a4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4cc:	330c      	adds	r3, #12
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	2102      	movs	r1, #2
 800a4d2:	f7fe f8f3 	bl	80086bc <disk_ioctl>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d001      	beq.n	800a4e0 <find_volume+0xe4>
 800a4dc:	2301      	movs	r3, #1
 800a4de:	e209      	b.n	800a8f4 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e2:	899b      	ldrh	r3, [r3, #12]
 800a4e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4e8:	d80d      	bhi.n	800a506 <find_volume+0x10a>
 800a4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ec:	899b      	ldrh	r3, [r3, #12]
 800a4ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4f2:	d308      	bcc.n	800a506 <find_volume+0x10a>
 800a4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f6:	899b      	ldrh	r3, [r3, #12]
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fc:	899b      	ldrh	r3, [r3, #12]
 800a4fe:	3b01      	subs	r3, #1
 800a500:	4013      	ands	r3, r2
 800a502:	2b00      	cmp	r3, #0
 800a504:	d001      	beq.n	800a50a <find_volume+0x10e>
 800a506:	2301      	movs	r3, #1
 800a508:	e1f4      	b.n	800a8f4 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a50a:	2300      	movs	r3, #0
 800a50c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a50e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a510:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a512:	f7ff ff1d 	bl	800a350 <check_fs>
 800a516:	4603      	mov	r3, r0
 800a518:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a51c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a520:	2b02      	cmp	r3, #2
 800a522:	d14b      	bne.n	800a5bc <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a524:	2300      	movs	r3, #0
 800a526:	643b      	str	r3, [r7, #64]	; 0x40
 800a528:	e01f      	b.n	800a56a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a532:	011b      	lsls	r3, r3, #4
 800a534:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a538:	4413      	add	r3, r2
 800a53a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53e:	3304      	adds	r3, #4
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d006      	beq.n	800a554 <find_volume+0x158>
 800a546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a548:	3308      	adds	r3, #8
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7fe f8ec 	bl	8008728 <ld_dword>
 800a550:	4602      	mov	r2, r0
 800a552:	e000      	b.n	800a556 <find_volume+0x15a>
 800a554:	2200      	movs	r2, #0
 800a556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a55e:	440b      	add	r3, r1
 800a560:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a566:	3301      	adds	r3, #1
 800a568:	643b      	str	r3, [r7, #64]	; 0x40
 800a56a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a56c:	2b03      	cmp	r3, #3
 800a56e:	d9dc      	bls.n	800a52a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a570:	2300      	movs	r3, #0
 800a572:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a576:	2b00      	cmp	r3, #0
 800a578:	d002      	beq.n	800a580 <find_volume+0x184>
 800a57a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a57c:	3b01      	subs	r3, #1
 800a57e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a588:	4413      	add	r3, r2
 800a58a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a58e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a592:	2b00      	cmp	r3, #0
 800a594:	d005      	beq.n	800a5a2 <find_volume+0x1a6>
 800a596:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a598:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a59a:	f7ff fed9 	bl	800a350 <check_fs>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	e000      	b.n	800a5a4 <find_volume+0x1a8>
 800a5a2:	2303      	movs	r3, #3
 800a5a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a5a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d905      	bls.n	800a5bc <find_volume+0x1c0>
 800a5b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	643b      	str	r3, [r7, #64]	; 0x40
 800a5b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5b8:	2b03      	cmp	r3, #3
 800a5ba:	d9e1      	bls.n	800a580 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a5bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a5c0:	2b04      	cmp	r3, #4
 800a5c2:	d101      	bne.n	800a5c8 <find_volume+0x1cc>
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e195      	b.n	800a8f4 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a5c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d901      	bls.n	800a5d4 <find_volume+0x1d8>
 800a5d0:	230d      	movs	r3, #13
 800a5d2:	e18f      	b.n	800a8f4 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d6:	3338      	adds	r3, #56	; 0x38
 800a5d8:	330b      	adds	r3, #11
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7fe f88c 	bl	80086f8 <ld_word>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e6:	899b      	ldrh	r3, [r3, #12]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d001      	beq.n	800a5f0 <find_volume+0x1f4>
 800a5ec:	230d      	movs	r3, #13
 800a5ee:	e181      	b.n	800a8f4 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f2:	3338      	adds	r3, #56	; 0x38
 800a5f4:	3316      	adds	r3, #22
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7fe f87e 	bl	80086f8 <ld_word>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a602:	2b00      	cmp	r3, #0
 800a604:	d106      	bne.n	800a614 <find_volume+0x218>
 800a606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a608:	3338      	adds	r3, #56	; 0x38
 800a60a:	3324      	adds	r3, #36	; 0x24
 800a60c:	4618      	mov	r0, r3
 800a60e:	f7fe f88b 	bl	8008728 <ld_dword>
 800a612:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a616:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a618:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a622:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a626:	789b      	ldrb	r3, [r3, #2]
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d005      	beq.n	800a638 <find_volume+0x23c>
 800a62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62e:	789b      	ldrb	r3, [r3, #2]
 800a630:	2b02      	cmp	r3, #2
 800a632:	d001      	beq.n	800a638 <find_volume+0x23c>
 800a634:	230d      	movs	r3, #13
 800a636:	e15d      	b.n	800a8f4 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63a:	789b      	ldrb	r3, [r3, #2]
 800a63c:	461a      	mov	r2, r3
 800a63e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a640:	fb02 f303 	mul.w	r3, r2, r3
 800a644:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a648:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a64c:	b29a      	uxth	r2, r3
 800a64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a650:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a654:	895b      	ldrh	r3, [r3, #10]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d008      	beq.n	800a66c <find_volume+0x270>
 800a65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65c:	895b      	ldrh	r3, [r3, #10]
 800a65e:	461a      	mov	r2, r3
 800a660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a662:	895b      	ldrh	r3, [r3, #10]
 800a664:	3b01      	subs	r3, #1
 800a666:	4013      	ands	r3, r2
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d001      	beq.n	800a670 <find_volume+0x274>
 800a66c:	230d      	movs	r3, #13
 800a66e:	e141      	b.n	800a8f4 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a672:	3338      	adds	r3, #56	; 0x38
 800a674:	3311      	adds	r3, #17
 800a676:	4618      	mov	r0, r3
 800a678:	f7fe f83e 	bl	80086f8 <ld_word>
 800a67c:	4603      	mov	r3, r0
 800a67e:	461a      	mov	r2, r3
 800a680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a682:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a686:	891b      	ldrh	r3, [r3, #8]
 800a688:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a68a:	8992      	ldrh	r2, [r2, #12]
 800a68c:	0952      	lsrs	r2, r2, #5
 800a68e:	b292      	uxth	r2, r2
 800a690:	fbb3 f1f2 	udiv	r1, r3, r2
 800a694:	fb02 f201 	mul.w	r2, r2, r1
 800a698:	1a9b      	subs	r3, r3, r2
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d001      	beq.n	800a6a4 <find_volume+0x2a8>
 800a6a0:	230d      	movs	r3, #13
 800a6a2:	e127      	b.n	800a8f4 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a6:	3338      	adds	r3, #56	; 0x38
 800a6a8:	3313      	adds	r3, #19
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7fe f824 	bl	80086f8 <ld_word>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a6b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d106      	bne.n	800a6c8 <find_volume+0x2cc>
 800a6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6bc:	3338      	adds	r3, #56	; 0x38
 800a6be:	3320      	adds	r3, #32
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f7fe f831 	bl	8008728 <ld_dword>
 800a6c6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ca:	3338      	adds	r3, #56	; 0x38
 800a6cc:	330e      	adds	r3, #14
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fe f812 	bl	80086f8 <ld_word>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a6d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d104      	bne.n	800a6e8 <find_volume+0x2ec>
 800a6de:	230d      	movs	r3, #13
 800a6e0:	e108      	b.n	800a8f4 <find_volume+0x4f8>
 800a6e2:	bf00      	nop
 800a6e4:	200000d4 	.word	0x200000d4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a6e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a6ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6ec:	4413      	add	r3, r2
 800a6ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6f0:	8911      	ldrh	r1, [r2, #8]
 800a6f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6f4:	8992      	ldrh	r2, [r2, #12]
 800a6f6:	0952      	lsrs	r2, r2, #5
 800a6f8:	b292      	uxth	r2, r2
 800a6fa:	fbb1 f2f2 	udiv	r2, r1, r2
 800a6fe:	b292      	uxth	r2, r2
 800a700:	4413      	add	r3, r2
 800a702:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a704:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a708:	429a      	cmp	r2, r3
 800a70a:	d201      	bcs.n	800a710 <find_volume+0x314>
 800a70c:	230d      	movs	r3, #13
 800a70e:	e0f1      	b.n	800a8f4 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a710:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a714:	1ad3      	subs	r3, r2, r3
 800a716:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a718:	8952      	ldrh	r2, [r2, #10]
 800a71a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a71e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a722:	2b00      	cmp	r3, #0
 800a724:	d101      	bne.n	800a72a <find_volume+0x32e>
 800a726:	230d      	movs	r3, #13
 800a728:	e0e4      	b.n	800a8f4 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800a72a:	2303      	movs	r3, #3
 800a72c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a732:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a736:	4293      	cmp	r3, r2
 800a738:	d802      	bhi.n	800a740 <find_volume+0x344>
 800a73a:	2302      	movs	r3, #2
 800a73c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a742:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a746:	4293      	cmp	r3, r2
 800a748:	d802      	bhi.n	800a750 <find_volume+0x354>
 800a74a:	2301      	movs	r3, #1
 800a74c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a752:	1c9a      	adds	r2, r3, #2
 800a754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a756:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a75a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a75c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a75e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a762:	441a      	add	r2, r3
 800a764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a766:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a768:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76c:	441a      	add	r2, r3
 800a76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a770:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800a772:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a776:	2b03      	cmp	r3, #3
 800a778:	d11e      	bne.n	800a7b8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77c:	3338      	adds	r3, #56	; 0x38
 800a77e:	332a      	adds	r3, #42	; 0x2a
 800a780:	4618      	mov	r0, r3
 800a782:	f7fd ffb9 	bl	80086f8 <ld_word>
 800a786:	4603      	mov	r3, r0
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d001      	beq.n	800a790 <find_volume+0x394>
 800a78c:	230d      	movs	r3, #13
 800a78e:	e0b1      	b.n	800a8f4 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a792:	891b      	ldrh	r3, [r3, #8]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d001      	beq.n	800a79c <find_volume+0x3a0>
 800a798:	230d      	movs	r3, #13
 800a79a:	e0ab      	b.n	800a8f4 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79e:	3338      	adds	r3, #56	; 0x38
 800a7a0:	332c      	adds	r3, #44	; 0x2c
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7fd ffc0 	bl	8008728 <ld_dword>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ac:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b0:	69db      	ldr	r3, [r3, #28]
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	647b      	str	r3, [r7, #68]	; 0x44
 800a7b6:	e01f      	b.n	800a7f8 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ba:	891b      	ldrh	r3, [r3, #8]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d101      	bne.n	800a7c4 <find_volume+0x3c8>
 800a7c0:	230d      	movs	r3, #13
 800a7c2:	e097      	b.n	800a8f4 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a7c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7ca:	441a      	add	r2, r3
 800a7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ce:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a7d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a7d4:	2b02      	cmp	r3, #2
 800a7d6:	d103      	bne.n	800a7e0 <find_volume+0x3e4>
 800a7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7da:	69db      	ldr	r3, [r3, #28]
 800a7dc:	005b      	lsls	r3, r3, #1
 800a7de:	e00a      	b.n	800a7f6 <find_volume+0x3fa>
 800a7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e2:	69da      	ldr	r2, [r3, #28]
 800a7e4:	4613      	mov	r3, r2
 800a7e6:	005b      	lsls	r3, r3, #1
 800a7e8:	4413      	add	r3, r2
 800a7ea:	085a      	lsrs	r2, r3, #1
 800a7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ee:	69db      	ldr	r3, [r3, #28]
 800a7f0:	f003 0301 	and.w	r3, r3, #1
 800a7f4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a7f6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fa:	6a1a      	ldr	r2, [r3, #32]
 800a7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fe:	899b      	ldrh	r3, [r3, #12]
 800a800:	4619      	mov	r1, r3
 800a802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a804:	440b      	add	r3, r1
 800a806:	3b01      	subs	r3, #1
 800a808:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a80a:	8989      	ldrh	r1, [r1, #12]
 800a80c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a810:	429a      	cmp	r2, r3
 800a812:	d201      	bcs.n	800a818 <find_volume+0x41c>
 800a814:	230d      	movs	r3, #13
 800a816:	e06d      	b.n	800a8f4 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81a:	f04f 32ff 	mov.w	r2, #4294967295
 800a81e:	619a      	str	r2, [r3, #24]
 800a820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a822:	699a      	ldr	r2, [r3, #24]
 800a824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a826:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82a:	2280      	movs	r2, #128	; 0x80
 800a82c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a82e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a832:	2b03      	cmp	r3, #3
 800a834:	d149      	bne.n	800a8ca <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a838:	3338      	adds	r3, #56	; 0x38
 800a83a:	3330      	adds	r3, #48	; 0x30
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7fd ff5b 	bl	80086f8 <ld_word>
 800a842:	4603      	mov	r3, r0
 800a844:	2b01      	cmp	r3, #1
 800a846:	d140      	bne.n	800a8ca <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a84a:	3301      	adds	r3, #1
 800a84c:	4619      	mov	r1, r3
 800a84e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a850:	f7fe fa02 	bl	8008c58 <move_window>
 800a854:	4603      	mov	r3, r0
 800a856:	2b00      	cmp	r3, #0
 800a858:	d137      	bne.n	800a8ca <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800a85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85c:	2200      	movs	r2, #0
 800a85e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a862:	3338      	adds	r3, #56	; 0x38
 800a864:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a868:	4618      	mov	r0, r3
 800a86a:	f7fd ff45 	bl	80086f8 <ld_word>
 800a86e:	4603      	mov	r3, r0
 800a870:	461a      	mov	r2, r3
 800a872:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a876:	429a      	cmp	r2, r3
 800a878:	d127      	bne.n	800a8ca <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87c:	3338      	adds	r3, #56	; 0x38
 800a87e:	4618      	mov	r0, r3
 800a880:	f7fd ff52 	bl	8008728 <ld_dword>
 800a884:	4603      	mov	r3, r0
 800a886:	4a1d      	ldr	r2, [pc, #116]	; (800a8fc <find_volume+0x500>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d11e      	bne.n	800a8ca <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a88e:	3338      	adds	r3, #56	; 0x38
 800a890:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a894:	4618      	mov	r0, r3
 800a896:	f7fd ff47 	bl	8008728 <ld_dword>
 800a89a:	4603      	mov	r3, r0
 800a89c:	4a18      	ldr	r2, [pc, #96]	; (800a900 <find_volume+0x504>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d113      	bne.n	800a8ca <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a4:	3338      	adds	r3, #56	; 0x38
 800a8a6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7fd ff3c 	bl	8008728 <ld_dword>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b4:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b8:	3338      	adds	r3, #56	; 0x38
 800a8ba:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7fd ff32 	bl	8008728 <ld_dword>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c8:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8cc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a8d0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a8d2:	4b0c      	ldr	r3, [pc, #48]	; (800a904 <find_volume+0x508>)
 800a8d4:	881b      	ldrh	r3, [r3, #0]
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	b29a      	uxth	r2, r3
 800a8da:	4b0a      	ldr	r3, [pc, #40]	; (800a904 <find_volume+0x508>)
 800a8dc:	801a      	strh	r2, [r3, #0]
 800a8de:	4b09      	ldr	r3, [pc, #36]	; (800a904 <find_volume+0x508>)
 800a8e0:	881a      	ldrh	r2, [r3, #0]
 800a8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e4:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e8:	4a07      	ldr	r2, [pc, #28]	; (800a908 <find_volume+0x50c>)
 800a8ea:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a8ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a8ee:	f7fe f94b 	bl	8008b88 <clear_lock>
#endif
	return FR_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3758      	adds	r7, #88	; 0x58
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	41615252 	.word	0x41615252
 800a900:	61417272 	.word	0x61417272
 800a904:	200000d8 	.word	0x200000d8
 800a908:	200000fc 	.word	0x200000fc

0800a90c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a916:	2309      	movs	r3, #9
 800a918:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d01c      	beq.n	800a95a <validate+0x4e>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d018      	beq.n	800a95a <validate+0x4e>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d013      	beq.n	800a95a <validate+0x4e>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	889a      	ldrh	r2, [r3, #4]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	88db      	ldrh	r3, [r3, #6]
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d10c      	bne.n	800a95a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	785b      	ldrb	r3, [r3, #1]
 800a946:	4618      	mov	r0, r3
 800a948:	f7fd fe38 	bl	80085bc <disk_status>
 800a94c:	4603      	mov	r3, r0
 800a94e:	f003 0301 	and.w	r3, r3, #1
 800a952:	2b00      	cmp	r3, #0
 800a954:	d101      	bne.n	800a95a <validate+0x4e>
			res = FR_OK;
 800a956:	2300      	movs	r3, #0
 800a958:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a95a:	7bfb      	ldrb	r3, [r7, #15]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d102      	bne.n	800a966 <validate+0x5a>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	e000      	b.n	800a968 <validate+0x5c>
 800a966:	2300      	movs	r3, #0
 800a968:	683a      	ldr	r2, [r7, #0]
 800a96a:	6013      	str	r3, [r2, #0]
	return res;
 800a96c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3710      	adds	r7, #16
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
	...

0800a978 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b088      	sub	sp, #32
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	60b9      	str	r1, [r7, #8]
 800a982:	4613      	mov	r3, r2
 800a984:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a98a:	f107 0310 	add.w	r3, r7, #16
 800a98e:	4618      	mov	r0, r3
 800a990:	f7ff fc9a 	bl	800a2c8 <get_ldnumber>
 800a994:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	da01      	bge.n	800a9a0 <f_mount+0x28>
 800a99c:	230b      	movs	r3, #11
 800a99e:	e02b      	b.n	800a9f8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a9a0:	4a17      	ldr	r2, [pc, #92]	; (800aa00 <f_mount+0x88>)
 800a9a2:	69fb      	ldr	r3, [r7, #28]
 800a9a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9a8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a9aa:	69bb      	ldr	r3, [r7, #24]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d005      	beq.n	800a9bc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a9b0:	69b8      	ldr	r0, [r7, #24]
 800a9b2:	f7fe f8e9 	bl	8008b88 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a9b6:	69bb      	ldr	r3, [r7, #24]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d002      	beq.n	800a9c8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a9c8:	68fa      	ldr	r2, [r7, #12]
 800a9ca:	490d      	ldr	r1, [pc, #52]	; (800aa00 <f_mount+0x88>)
 800a9cc:	69fb      	ldr	r3, [r7, #28]
 800a9ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d002      	beq.n	800a9de <f_mount+0x66>
 800a9d8:	79fb      	ldrb	r3, [r7, #7]
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d001      	beq.n	800a9e2 <f_mount+0x6a>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	e00a      	b.n	800a9f8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a9e2:	f107 010c 	add.w	r1, r7, #12
 800a9e6:	f107 0308 	add.w	r3, r7, #8
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7ff fd05 	bl	800a3fc <find_volume>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a9f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3720      	adds	r7, #32
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}
 800aa00:	200000d4 	.word	0x200000d4

0800aa04 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b09a      	sub	sp, #104	; 0x68
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	4613      	mov	r3, r2
 800aa10:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d101      	bne.n	800aa1c <f_open+0x18>
 800aa18:	2309      	movs	r3, #9
 800aa1a:	e1bb      	b.n	800ad94 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800aa1c:	79fb      	ldrb	r3, [r7, #7]
 800aa1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa22:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800aa24:	79fa      	ldrb	r2, [r7, #7]
 800aa26:	f107 0114 	add.w	r1, r7, #20
 800aa2a:	f107 0308 	add.w	r3, r7, #8
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7ff fce4 	bl	800a3fc <find_volume>
 800aa34:	4603      	mov	r3, r0
 800aa36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800aa3a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	f040 819f 	bne.w	800ad82 <f_open+0x37e>
		dj.obj.fs = fs;
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800aa48:	68ba      	ldr	r2, [r7, #8]
 800aa4a:	f107 0318 	add.w	r3, r7, #24
 800aa4e:	4611      	mov	r1, r2
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7ff fbc3 	bl	800a1dc <follow_path>
 800aa56:	4603      	mov	r3, r0
 800aa58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800aa5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d11a      	bne.n	800aa9a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800aa64:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800aa68:	b25b      	sxtb	r3, r3
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	da03      	bge.n	800aa76 <f_open+0x72>
				res = FR_INVALID_NAME;
 800aa6e:	2306      	movs	r3, #6
 800aa70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800aa74:	e011      	b.n	800aa9a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aa76:	79fb      	ldrb	r3, [r7, #7]
 800aa78:	f023 0301 	bic.w	r3, r3, #1
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	bf14      	ite	ne
 800aa80:	2301      	movne	r3, #1
 800aa82:	2300      	moveq	r3, #0
 800aa84:	b2db      	uxtb	r3, r3
 800aa86:	461a      	mov	r2, r3
 800aa88:	f107 0318 	add.w	r3, r7, #24
 800aa8c:	4611      	mov	r1, r2
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7fd ff32 	bl	80088f8 <chk_lock>
 800aa94:	4603      	mov	r3, r0
 800aa96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800aa9a:	79fb      	ldrb	r3, [r7, #7]
 800aa9c:	f003 031c 	and.w	r3, r3, #28
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d07f      	beq.n	800aba4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800aaa4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d017      	beq.n	800aadc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800aaac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aab0:	2b04      	cmp	r3, #4
 800aab2:	d10e      	bne.n	800aad2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800aab4:	f7fd ff7c 	bl	80089b0 <enq_lock>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d006      	beq.n	800aacc <f_open+0xc8>
 800aabe:	f107 0318 	add.w	r3, r7, #24
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7ff f8da 	bl	8009c7c <dir_register>
 800aac8:	4603      	mov	r3, r0
 800aaca:	e000      	b.n	800aace <f_open+0xca>
 800aacc:	2312      	movs	r3, #18
 800aace:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800aad2:	79fb      	ldrb	r3, [r7, #7]
 800aad4:	f043 0308 	orr.w	r3, r3, #8
 800aad8:	71fb      	strb	r3, [r7, #7]
 800aada:	e010      	b.n	800aafe <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800aadc:	7fbb      	ldrb	r3, [r7, #30]
 800aade:	f003 0311 	and.w	r3, r3, #17
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d003      	beq.n	800aaee <f_open+0xea>
					res = FR_DENIED;
 800aae6:	2307      	movs	r3, #7
 800aae8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800aaec:	e007      	b.n	800aafe <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800aaee:	79fb      	ldrb	r3, [r7, #7]
 800aaf0:	f003 0304 	and.w	r3, r3, #4
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d002      	beq.n	800aafe <f_open+0xfa>
 800aaf8:	2308      	movs	r3, #8
 800aafa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800aafe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d168      	bne.n	800abd8 <f_open+0x1d4>
 800ab06:	79fb      	ldrb	r3, [r7, #7]
 800ab08:	f003 0308 	and.w	r3, r3, #8
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d063      	beq.n	800abd8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800ab10:	f7fd fce6 	bl	80084e0 <get_fattime>
 800ab14:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ab16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab18:	330e      	adds	r3, #14
 800ab1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7fd fe41 	bl	80087a4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ab22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab24:	3316      	adds	r3, #22
 800ab26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7fd fe3b 	bl	80087a4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ab2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab30:	330b      	adds	r3, #11
 800ab32:	2220      	movs	r2, #32
 800ab34:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab3a:	4611      	mov	r1, r2
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7fe fe13 	bl	8009768 <ld_clust>
 800ab42:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab48:	2200      	movs	r2, #0
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7fe fe2b 	bl	80097a6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ab50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab52:	331c      	adds	r3, #28
 800ab54:	2100      	movs	r1, #0
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7fd fe24 	bl	80087a4 <st_dword>
					fs->wflag = 1;
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ab62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d037      	beq.n	800abd8 <f_open+0x1d4>
						dw = fs->winsect;
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab6c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800ab6e:	f107 0318 	add.w	r3, r7, #24
 800ab72:	2200      	movs	r2, #0
 800ab74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7fe fb1b 	bl	80091b2 <remove_chain>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800ab82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d126      	bne.n	800abd8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7fe f862 	bl	8008c58 <move_window>
 800ab94:	4603      	mov	r3, r0
 800ab96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab9e:	3a01      	subs	r2, #1
 800aba0:	615a      	str	r2, [r3, #20]
 800aba2:	e019      	b.n	800abd8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800aba4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d115      	bne.n	800abd8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800abac:	7fbb      	ldrb	r3, [r7, #30]
 800abae:	f003 0310 	and.w	r3, r3, #16
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d003      	beq.n	800abbe <f_open+0x1ba>
					res = FR_NO_FILE;
 800abb6:	2304      	movs	r3, #4
 800abb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800abbc:	e00c      	b.n	800abd8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800abbe:	79fb      	ldrb	r3, [r7, #7]
 800abc0:	f003 0302 	and.w	r3, r3, #2
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d007      	beq.n	800abd8 <f_open+0x1d4>
 800abc8:	7fbb      	ldrb	r3, [r7, #30]
 800abca:	f003 0301 	and.w	r3, r3, #1
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d002      	beq.n	800abd8 <f_open+0x1d4>
						res = FR_DENIED;
 800abd2:	2307      	movs	r3, #7
 800abd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800abd8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d128      	bne.n	800ac32 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800abe0:	79fb      	ldrb	r3, [r7, #7]
 800abe2:	f003 0308 	and.w	r3, r3, #8
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d003      	beq.n	800abf2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800abea:	79fb      	ldrb	r3, [r7, #7]
 800abec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abf0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800abfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ac00:	79fb      	ldrb	r3, [r7, #7]
 800ac02:	f023 0301 	bic.w	r3, r3, #1
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	bf14      	ite	ne
 800ac0a:	2301      	movne	r3, #1
 800ac0c:	2300      	moveq	r3, #0
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	461a      	mov	r2, r3
 800ac12:	f107 0318 	add.w	r3, r7, #24
 800ac16:	4611      	mov	r1, r2
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7fd feeb 	bl	80089f4 <inc_lock>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	691b      	ldr	r3, [r3, #16]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d102      	bne.n	800ac32 <f_open+0x22e>
 800ac2c:	2302      	movs	r3, #2
 800ac2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ac32:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	f040 80a3 	bne.w	800ad82 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac40:	4611      	mov	r1, r2
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7fe fd90 	bl	8009768 <ld_clust>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ac4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac50:	331c      	adds	r3, #28
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7fd fd68 	bl	8008728 <ld_dword>
 800ac58:	4602      	mov	r2, r0
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2200      	movs	r2, #0
 800ac62:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ac64:	697a      	ldr	r2, [r7, #20]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	88da      	ldrh	r2, [r3, #6]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	79fa      	ldrb	r2, [r7, #7]
 800ac76:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2200      	movs	r2, #0
 800ac82:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2200      	movs	r2, #0
 800ac88:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	3330      	adds	r3, #48	; 0x30
 800ac8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ac92:	2100      	movs	r1, #0
 800ac94:	4618      	mov	r0, r3
 800ac96:	f7fd fdd2 	bl	800883e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ac9a:	79fb      	ldrb	r3, [r7, #7]
 800ac9c:	f003 0320 	and.w	r3, r3, #32
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d06e      	beq.n	800ad82 <f_open+0x37e>
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d06a      	beq.n	800ad82 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	68da      	ldr	r2, [r3, #12]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	895b      	ldrh	r3, [r3, #10]
 800acb8:	461a      	mov	r2, r3
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	899b      	ldrh	r3, [r3, #12]
 800acbe:	fb03 f302 	mul.w	r3, r3, r2
 800acc2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	68db      	ldr	r3, [r3, #12]
 800acce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800acd0:	e016      	b.n	800ad00 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7fe f87b 	bl	8008dd2 <get_fat>
 800acdc:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800acde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d802      	bhi.n	800acea <f_open+0x2e6>
 800ace4:	2302      	movs	r3, #2
 800ace6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800acea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800acec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acf0:	d102      	bne.n	800acf8 <f_open+0x2f4>
 800acf2:	2301      	movs	r3, #1
 800acf4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800acf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800acfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acfc:	1ad3      	subs	r3, r2, r3
 800acfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d103      	bne.n	800ad10 <f_open+0x30c>
 800ad08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ad0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d8e0      	bhi.n	800acd2 <f_open+0x2ce>
				}
				fp->clust = clst;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad14:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ad16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d131      	bne.n	800ad82 <f_open+0x37e>
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	899b      	ldrh	r3, [r3, #12]
 800ad22:	461a      	mov	r2, r3
 800ad24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad26:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad2a:	fb02 f201 	mul.w	r2, r2, r1
 800ad2e:	1a9b      	subs	r3, r3, r2
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d026      	beq.n	800ad82 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f7fe f82b 	bl	8008d94 <clust2sect>
 800ad3e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800ad40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d103      	bne.n	800ad4e <f_open+0x34a>
						res = FR_INT_ERR;
 800ad46:	2302      	movs	r3, #2
 800ad48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ad4c:	e019      	b.n	800ad82 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	899b      	ldrh	r3, [r3, #12]
 800ad52:	461a      	mov	r2, r3
 800ad54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad56:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad5c:	441a      	add	r2, r3
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	7858      	ldrb	r0, [r3, #1]
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	6a1a      	ldr	r2, [r3, #32]
 800ad70:	2301      	movs	r3, #1
 800ad72:	f7fd fc63 	bl	800863c <disk_read>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d002      	beq.n	800ad82 <f_open+0x37e>
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ad82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d002      	beq.n	800ad90 <f_open+0x38c>
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ad90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3768      	adds	r7, #104	; 0x68
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b08e      	sub	sp, #56	; 0x38
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	607a      	str	r2, [r7, #4]
 800ada8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	2200      	movs	r2, #0
 800adb2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f107 0214 	add.w	r2, r7, #20
 800adba:	4611      	mov	r1, r2
 800adbc:	4618      	mov	r0, r3
 800adbe:	f7ff fda5 	bl	800a90c <validate>
 800adc2:	4603      	mov	r3, r0
 800adc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800adc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d107      	bne.n	800ade0 <f_read+0x44>
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	7d5b      	ldrb	r3, [r3, #21]
 800add4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800add8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800addc:	2b00      	cmp	r3, #0
 800adde:	d002      	beq.n	800ade6 <f_read+0x4a>
 800ade0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ade4:	e135      	b.n	800b052 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	7d1b      	ldrb	r3, [r3, #20]
 800adea:	f003 0301 	and.w	r3, r3, #1
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d101      	bne.n	800adf6 <f_read+0x5a>
 800adf2:	2307      	movs	r3, #7
 800adf4:	e12d      	b.n	800b052 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	68da      	ldr	r2, [r3, #12]
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	699b      	ldr	r3, [r3, #24]
 800adfe:	1ad3      	subs	r3, r2, r3
 800ae00:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	6a3b      	ldr	r3, [r7, #32]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	f240 811e 	bls.w	800b048 <f_read+0x2ac>
 800ae0c:	6a3b      	ldr	r3, [r7, #32]
 800ae0e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ae10:	e11a      	b.n	800b048 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	699b      	ldr	r3, [r3, #24]
 800ae16:	697a      	ldr	r2, [r7, #20]
 800ae18:	8992      	ldrh	r2, [r2, #12]
 800ae1a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae1e:	fb02 f201 	mul.w	r2, r2, r1
 800ae22:	1a9b      	subs	r3, r3, r2
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	f040 80d5 	bne.w	800afd4 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	699b      	ldr	r3, [r3, #24]
 800ae2e:	697a      	ldr	r2, [r7, #20]
 800ae30:	8992      	ldrh	r2, [r2, #12]
 800ae32:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae36:	697a      	ldr	r2, [r7, #20]
 800ae38:	8952      	ldrh	r2, [r2, #10]
 800ae3a:	3a01      	subs	r2, #1
 800ae3c:	4013      	ands	r3, r2
 800ae3e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ae40:	69fb      	ldr	r3, [r7, #28]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d12f      	bne.n	800aea6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	699b      	ldr	r3, [r3, #24]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d103      	bne.n	800ae56 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	633b      	str	r3, [r7, #48]	; 0x30
 800ae54:	e013      	b.n	800ae7e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d007      	beq.n	800ae6e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	699b      	ldr	r3, [r3, #24]
 800ae62:	4619      	mov	r1, r3
 800ae64:	68f8      	ldr	r0, [r7, #12]
 800ae66:	f7fe faa1 	bl	80093ac <clmt_clust>
 800ae6a:	6338      	str	r0, [r7, #48]	; 0x30
 800ae6c:	e007      	b.n	800ae7e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ae6e:	68fa      	ldr	r2, [r7, #12]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	69db      	ldr	r3, [r3, #28]
 800ae74:	4619      	mov	r1, r3
 800ae76:	4610      	mov	r0, r2
 800ae78:	f7fd ffab 	bl	8008dd2 <get_fat>
 800ae7c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ae7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d804      	bhi.n	800ae8e <f_read+0xf2>
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2202      	movs	r2, #2
 800ae88:	755a      	strb	r2, [r3, #21]
 800ae8a:	2302      	movs	r3, #2
 800ae8c:	e0e1      	b.n	800b052 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ae8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae94:	d104      	bne.n	800aea0 <f_read+0x104>
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2201      	movs	r2, #1
 800ae9a:	755a      	strb	r2, [r3, #21]
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e0d8      	b.n	800b052 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aea4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800aea6:	697a      	ldr	r2, [r7, #20]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	69db      	ldr	r3, [r3, #28]
 800aeac:	4619      	mov	r1, r3
 800aeae:	4610      	mov	r0, r2
 800aeb0:	f7fd ff70 	bl	8008d94 <clust2sect>
 800aeb4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d104      	bne.n	800aec6 <f_read+0x12a>
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2202      	movs	r2, #2
 800aec0:	755a      	strb	r2, [r3, #21]
 800aec2:	2302      	movs	r3, #2
 800aec4:	e0c5      	b.n	800b052 <f_read+0x2b6>
			sect += csect;
 800aec6:	69ba      	ldr	r2, [r7, #24]
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	4413      	add	r3, r2
 800aecc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	899b      	ldrh	r3, [r3, #12]
 800aed2:	461a      	mov	r2, r3
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	fbb3 f3f2 	udiv	r3, r3, r2
 800aeda:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800aedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d041      	beq.n	800af66 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800aee2:	69fa      	ldr	r2, [r7, #28]
 800aee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee6:	4413      	add	r3, r2
 800aee8:	697a      	ldr	r2, [r7, #20]
 800aeea:	8952      	ldrh	r2, [r2, #10]
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d905      	bls.n	800aefc <f_read+0x160>
					cc = fs->csize - csect;
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	895b      	ldrh	r3, [r3, #10]
 800aef4:	461a      	mov	r2, r3
 800aef6:	69fb      	ldr	r3, [r7, #28]
 800aef8:	1ad3      	subs	r3, r2, r3
 800aefa:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	7858      	ldrb	r0, [r3, #1]
 800af00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af02:	69ba      	ldr	r2, [r7, #24]
 800af04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af06:	f7fd fb99 	bl	800863c <disk_read>
 800af0a:	4603      	mov	r3, r0
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d004      	beq.n	800af1a <f_read+0x17e>
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2201      	movs	r2, #1
 800af14:	755a      	strb	r2, [r3, #21]
 800af16:	2301      	movs	r3, #1
 800af18:	e09b      	b.n	800b052 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	7d1b      	ldrb	r3, [r3, #20]
 800af1e:	b25b      	sxtb	r3, r3
 800af20:	2b00      	cmp	r3, #0
 800af22:	da18      	bge.n	800af56 <f_read+0x1ba>
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	6a1a      	ldr	r2, [r3, #32]
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	1ad3      	subs	r3, r2, r3
 800af2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af2e:	429a      	cmp	r2, r3
 800af30:	d911      	bls.n	800af56 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	6a1a      	ldr	r2, [r3, #32]
 800af36:	69bb      	ldr	r3, [r7, #24]
 800af38:	1ad3      	subs	r3, r2, r3
 800af3a:	697a      	ldr	r2, [r7, #20]
 800af3c:	8992      	ldrh	r2, [r2, #12]
 800af3e:	fb02 f303 	mul.w	r3, r2, r3
 800af42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af44:	18d0      	adds	r0, r2, r3
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	899b      	ldrh	r3, [r3, #12]
 800af50:	461a      	mov	r2, r3
 800af52:	f7fd fc53 	bl	80087fc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	899b      	ldrh	r3, [r3, #12]
 800af5a:	461a      	mov	r2, r3
 800af5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5e:	fb02 f303 	mul.w	r3, r2, r3
 800af62:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800af64:	e05c      	b.n	800b020 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	6a1b      	ldr	r3, [r3, #32]
 800af6a:	69ba      	ldr	r2, [r7, #24]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d02e      	beq.n	800afce <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	7d1b      	ldrb	r3, [r3, #20]
 800af74:	b25b      	sxtb	r3, r3
 800af76:	2b00      	cmp	r3, #0
 800af78:	da18      	bge.n	800afac <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	7858      	ldrb	r0, [r3, #1]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	6a1a      	ldr	r2, [r3, #32]
 800af88:	2301      	movs	r3, #1
 800af8a:	f7fd fb77 	bl	800867c <disk_write>
 800af8e:	4603      	mov	r3, r0
 800af90:	2b00      	cmp	r3, #0
 800af92:	d004      	beq.n	800af9e <f_read+0x202>
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2201      	movs	r2, #1
 800af98:	755a      	strb	r2, [r3, #21]
 800af9a:	2301      	movs	r3, #1
 800af9c:	e059      	b.n	800b052 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	7d1b      	ldrb	r3, [r3, #20]
 800afa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afa6:	b2da      	uxtb	r2, r3
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	7858      	ldrb	r0, [r3, #1]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800afb6:	2301      	movs	r3, #1
 800afb8:	69ba      	ldr	r2, [r7, #24]
 800afba:	f7fd fb3f 	bl	800863c <disk_read>
 800afbe:	4603      	mov	r3, r0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d004      	beq.n	800afce <f_read+0x232>
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2201      	movs	r2, #1
 800afc8:	755a      	strb	r2, [r3, #21]
 800afca:	2301      	movs	r3, #1
 800afcc:	e041      	b.n	800b052 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	69ba      	ldr	r2, [r7, #24]
 800afd2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	899b      	ldrh	r3, [r3, #12]
 800afd8:	4618      	mov	r0, r3
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	699b      	ldr	r3, [r3, #24]
 800afde:	697a      	ldr	r2, [r7, #20]
 800afe0:	8992      	ldrh	r2, [r2, #12]
 800afe2:	fbb3 f1f2 	udiv	r1, r3, r2
 800afe6:	fb02 f201 	mul.w	r2, r2, r1
 800afea:	1a9b      	subs	r3, r3, r2
 800afec:	1ac3      	subs	r3, r0, r3
 800afee:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800aff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d901      	bls.n	800affc <f_read+0x260>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	699b      	ldr	r3, [r3, #24]
 800b006:	697a      	ldr	r2, [r7, #20]
 800b008:	8992      	ldrh	r2, [r2, #12]
 800b00a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b00e:	fb02 f200 	mul.w	r2, r2, r0
 800b012:	1a9b      	subs	r3, r3, r2
 800b014:	440b      	add	r3, r1
 800b016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b018:	4619      	mov	r1, r3
 800b01a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b01c:	f7fd fbee 	bl	80087fc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b024:	4413      	add	r3, r2
 800b026:	627b      	str	r3, [r7, #36]	; 0x24
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	699a      	ldr	r2, [r3, #24]
 800b02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02e:	441a      	add	r2, r3
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	619a      	str	r2, [r3, #24]
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b03a:	441a      	add	r2, r3
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	601a      	str	r2, [r3, #0]
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b044:	1ad3      	subs	r3, r2, r3
 800b046:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	f47f aee1 	bne.w	800ae12 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b050:	2300      	movs	r3, #0
}
 800b052:	4618      	mov	r0, r3
 800b054:	3738      	adds	r7, #56	; 0x38
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}

0800b05a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b05a:	b580      	push	{r7, lr}
 800b05c:	b086      	sub	sp, #24
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f107 0208 	add.w	r2, r7, #8
 800b068:	4611      	mov	r1, r2
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7ff fc4e 	bl	800a90c <validate>
 800b070:	4603      	mov	r3, r0
 800b072:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b074:	7dfb      	ldrb	r3, [r7, #23]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d168      	bne.n	800b14c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	7d1b      	ldrb	r3, [r3, #20]
 800b07e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b082:	2b00      	cmp	r3, #0
 800b084:	d062      	beq.n	800b14c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	7d1b      	ldrb	r3, [r3, #20]
 800b08a:	b25b      	sxtb	r3, r3
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	da15      	bge.n	800b0bc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	7858      	ldrb	r0, [r3, #1]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6a1a      	ldr	r2, [r3, #32]
 800b09e:	2301      	movs	r3, #1
 800b0a0:	f7fd faec 	bl	800867c <disk_write>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d001      	beq.n	800b0ae <f_sync+0x54>
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e04f      	b.n	800b14e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	7d1b      	ldrb	r3, [r3, #20]
 800b0b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0b6:	b2da      	uxtb	r2, r3
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b0bc:	f7fd fa10 	bl	80084e0 <get_fattime>
 800b0c0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b0c2:	68ba      	ldr	r2, [r7, #8]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	4610      	mov	r0, r2
 800b0cc:	f7fd fdc4 	bl	8008c58 <move_window>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b0d4:	7dfb      	ldrb	r3, [r7, #23]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d138      	bne.n	800b14c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0de:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	330b      	adds	r3, #11
 800b0e4:	781a      	ldrb	r2, [r3, #0]
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	330b      	adds	r3, #11
 800b0ea:	f042 0220 	orr.w	r2, r2, #32
 800b0ee:	b2d2      	uxtb	r2, r2
 800b0f0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6818      	ldr	r0, [r3, #0]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	689b      	ldr	r3, [r3, #8]
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	68f9      	ldr	r1, [r7, #12]
 800b0fe:	f7fe fb52 	bl	80097a6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	f103 021c 	add.w	r2, r3, #28
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	4619      	mov	r1, r3
 800b10e:	4610      	mov	r0, r2
 800b110:	f7fd fb48 	bl	80087a4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	3316      	adds	r3, #22
 800b118:	6939      	ldr	r1, [r7, #16]
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7fd fb42 	bl	80087a4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	3312      	adds	r3, #18
 800b124:	2100      	movs	r1, #0
 800b126:	4618      	mov	r0, r3
 800b128:	f7fd fb21 	bl	800876e <st_word>
					fs->wflag = 1;
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	2201      	movs	r2, #1
 800b130:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	4618      	mov	r0, r3
 800b136:	f7fd fdbd 	bl	8008cb4 <sync_fs>
 800b13a:	4603      	mov	r3, r0
 800b13c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	7d1b      	ldrb	r3, [r3, #20]
 800b142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b146:	b2da      	uxtb	r2, r3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b14c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3718      	adds	r7, #24
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b084      	sub	sp, #16
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f7ff ff7b 	bl	800b05a <f_sync>
 800b164:	4603      	mov	r3, r0
 800b166:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b168:	7bfb      	ldrb	r3, [r7, #15]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d118      	bne.n	800b1a0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f107 0208 	add.w	r2, r7, #8
 800b174:	4611      	mov	r1, r2
 800b176:	4618      	mov	r0, r3
 800b178:	f7ff fbc8 	bl	800a90c <validate>
 800b17c:	4603      	mov	r3, r0
 800b17e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b180:	7bfb      	ldrb	r3, [r7, #15]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d10c      	bne.n	800b1a0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	691b      	ldr	r3, [r3, #16]
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7fd fcc0 	bl	8008b10 <dec_lock>
 800b190:	4603      	mov	r3, r0
 800b192:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b194:	7bfb      	ldrb	r3, [r7, #15]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d102      	bne.n	800b1a0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b1a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3710      	adds	r7, #16
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
	...

0800b1ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b087      	sub	sp, #28
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	60f8      	str	r0, [r7, #12]
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	4613      	mov	r3, r2
 800b1b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b1c2:	4b1f      	ldr	r3, [pc, #124]	; (800b240 <FATFS_LinkDriverEx+0x94>)
 800b1c4:	7a5b      	ldrb	r3, [r3, #9]
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d131      	bne.n	800b230 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b1cc:	4b1c      	ldr	r3, [pc, #112]	; (800b240 <FATFS_LinkDriverEx+0x94>)
 800b1ce:	7a5b      	ldrb	r3, [r3, #9]
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	4b1a      	ldr	r3, [pc, #104]	; (800b240 <FATFS_LinkDriverEx+0x94>)
 800b1d6:	2100      	movs	r1, #0
 800b1d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b1da:	4b19      	ldr	r3, [pc, #100]	; (800b240 <FATFS_LinkDriverEx+0x94>)
 800b1dc:	7a5b      	ldrb	r3, [r3, #9]
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	4a17      	ldr	r2, [pc, #92]	; (800b240 <FATFS_LinkDriverEx+0x94>)
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	4413      	add	r3, r2
 800b1e6:	68fa      	ldr	r2, [r7, #12]
 800b1e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b1ea:	4b15      	ldr	r3, [pc, #84]	; (800b240 <FATFS_LinkDriverEx+0x94>)
 800b1ec:	7a5b      	ldrb	r3, [r3, #9]
 800b1ee:	b2db      	uxtb	r3, r3
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	4b13      	ldr	r3, [pc, #76]	; (800b240 <FATFS_LinkDriverEx+0x94>)
 800b1f4:	4413      	add	r3, r2
 800b1f6:	79fa      	ldrb	r2, [r7, #7]
 800b1f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b1fa:	4b11      	ldr	r3, [pc, #68]	; (800b240 <FATFS_LinkDriverEx+0x94>)
 800b1fc:	7a5b      	ldrb	r3, [r3, #9]
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	1c5a      	adds	r2, r3, #1
 800b202:	b2d1      	uxtb	r1, r2
 800b204:	4a0e      	ldr	r2, [pc, #56]	; (800b240 <FATFS_LinkDriverEx+0x94>)
 800b206:	7251      	strb	r1, [r2, #9]
 800b208:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b20a:	7dbb      	ldrb	r3, [r7, #22]
 800b20c:	3330      	adds	r3, #48	; 0x30
 800b20e:	b2da      	uxtb	r2, r3
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	3301      	adds	r3, #1
 800b218:	223a      	movs	r2, #58	; 0x3a
 800b21a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	3302      	adds	r3, #2
 800b220:	222f      	movs	r2, #47	; 0x2f
 800b222:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	3303      	adds	r3, #3
 800b228:	2200      	movs	r2, #0
 800b22a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b22c:	2300      	movs	r3, #0
 800b22e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b230:	7dfb      	ldrb	r3, [r7, #23]
}
 800b232:	4618      	mov	r0, r3
 800b234:	371c      	adds	r7, #28
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr
 800b23e:	bf00      	nop
 800b240:	200002fc 	.word	0x200002fc

0800b244 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b082      	sub	sp, #8
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b24e:	2200      	movs	r2, #0
 800b250:	6839      	ldr	r1, [r7, #0]
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f7ff ffaa 	bl	800b1ac <FATFS_LinkDriverEx>
 800b258:	4603      	mov	r3, r0
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3708      	adds	r7, #8
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
	...

0800b264 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b264:	b480      	push	{r7}
 800b266:	b085      	sub	sp, #20
 800b268:	af00      	add	r7, sp, #0
 800b26a:	4603      	mov	r3, r0
 800b26c:	6039      	str	r1, [r7, #0]
 800b26e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b270:	88fb      	ldrh	r3, [r7, #6]
 800b272:	2b7f      	cmp	r3, #127	; 0x7f
 800b274:	d802      	bhi.n	800b27c <ff_convert+0x18>
		c = chr;
 800b276:	88fb      	ldrh	r3, [r7, #6]
 800b278:	81fb      	strh	r3, [r7, #14]
 800b27a:	e025      	b.n	800b2c8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d00b      	beq.n	800b29a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b282:	88fb      	ldrh	r3, [r7, #6]
 800b284:	2bff      	cmp	r3, #255	; 0xff
 800b286:	d805      	bhi.n	800b294 <ff_convert+0x30>
 800b288:	88fb      	ldrh	r3, [r7, #6]
 800b28a:	3b80      	subs	r3, #128	; 0x80
 800b28c:	4a12      	ldr	r2, [pc, #72]	; (800b2d8 <ff_convert+0x74>)
 800b28e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b292:	e000      	b.n	800b296 <ff_convert+0x32>
 800b294:	2300      	movs	r3, #0
 800b296:	81fb      	strh	r3, [r7, #14]
 800b298:	e016      	b.n	800b2c8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b29a:	2300      	movs	r3, #0
 800b29c:	81fb      	strh	r3, [r7, #14]
 800b29e:	e009      	b.n	800b2b4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b2a0:	89fb      	ldrh	r3, [r7, #14]
 800b2a2:	4a0d      	ldr	r2, [pc, #52]	; (800b2d8 <ff_convert+0x74>)
 800b2a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2a8:	88fa      	ldrh	r2, [r7, #6]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d006      	beq.n	800b2bc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b2ae:	89fb      	ldrh	r3, [r7, #14]
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	81fb      	strh	r3, [r7, #14]
 800b2b4:	89fb      	ldrh	r3, [r7, #14]
 800b2b6:	2b7f      	cmp	r3, #127	; 0x7f
 800b2b8:	d9f2      	bls.n	800b2a0 <ff_convert+0x3c>
 800b2ba:	e000      	b.n	800b2be <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b2bc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b2be:	89fb      	ldrh	r3, [r7, #14]
 800b2c0:	3380      	adds	r3, #128	; 0x80
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	b2db      	uxtb	r3, r3
 800b2c6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b2c8:	89fb      	ldrh	r3, [r7, #14]
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3714      	adds	r7, #20
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr
 800b2d6:	bf00      	nop
 800b2d8:	0800cdf8 	.word	0x0800cdf8

0800b2dc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b087      	sub	sp, #28
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b2e6:	88fb      	ldrh	r3, [r7, #6]
 800b2e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2ec:	d201      	bcs.n	800b2f2 <ff_wtoupper+0x16>
 800b2ee:	4b3e      	ldr	r3, [pc, #248]	; (800b3e8 <ff_wtoupper+0x10c>)
 800b2f0:	e000      	b.n	800b2f4 <ff_wtoupper+0x18>
 800b2f2:	4b3e      	ldr	r3, [pc, #248]	; (800b3ec <ff_wtoupper+0x110>)
 800b2f4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	1c9a      	adds	r2, r3, #2
 800b2fa:	617a      	str	r2, [r7, #20]
 800b2fc:	881b      	ldrh	r3, [r3, #0]
 800b2fe:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b300:	8a7b      	ldrh	r3, [r7, #18]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d068      	beq.n	800b3d8 <ff_wtoupper+0xfc>
 800b306:	88fa      	ldrh	r2, [r7, #6]
 800b308:	8a7b      	ldrh	r3, [r7, #18]
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d364      	bcc.n	800b3d8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	1c9a      	adds	r2, r3, #2
 800b312:	617a      	str	r2, [r7, #20]
 800b314:	881b      	ldrh	r3, [r3, #0]
 800b316:	823b      	strh	r3, [r7, #16]
 800b318:	8a3b      	ldrh	r3, [r7, #16]
 800b31a:	0a1b      	lsrs	r3, r3, #8
 800b31c:	81fb      	strh	r3, [r7, #14]
 800b31e:	8a3b      	ldrh	r3, [r7, #16]
 800b320:	b2db      	uxtb	r3, r3
 800b322:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b324:	88fa      	ldrh	r2, [r7, #6]
 800b326:	8a79      	ldrh	r1, [r7, #18]
 800b328:	8a3b      	ldrh	r3, [r7, #16]
 800b32a:	440b      	add	r3, r1
 800b32c:	429a      	cmp	r2, r3
 800b32e:	da49      	bge.n	800b3c4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800b330:	89fb      	ldrh	r3, [r7, #14]
 800b332:	2b08      	cmp	r3, #8
 800b334:	d84f      	bhi.n	800b3d6 <ff_wtoupper+0xfa>
 800b336:	a201      	add	r2, pc, #4	; (adr r2, 800b33c <ff_wtoupper+0x60>)
 800b338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b33c:	0800b361 	.word	0x0800b361
 800b340:	0800b373 	.word	0x0800b373
 800b344:	0800b389 	.word	0x0800b389
 800b348:	0800b391 	.word	0x0800b391
 800b34c:	0800b399 	.word	0x0800b399
 800b350:	0800b3a1 	.word	0x0800b3a1
 800b354:	0800b3a9 	.word	0x0800b3a9
 800b358:	0800b3b1 	.word	0x0800b3b1
 800b35c:	0800b3b9 	.word	0x0800b3b9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b360:	88fa      	ldrh	r2, [r7, #6]
 800b362:	8a7b      	ldrh	r3, [r7, #18]
 800b364:	1ad3      	subs	r3, r2, r3
 800b366:	005b      	lsls	r3, r3, #1
 800b368:	697a      	ldr	r2, [r7, #20]
 800b36a:	4413      	add	r3, r2
 800b36c:	881b      	ldrh	r3, [r3, #0]
 800b36e:	80fb      	strh	r3, [r7, #6]
 800b370:	e027      	b.n	800b3c2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b372:	88fa      	ldrh	r2, [r7, #6]
 800b374:	8a7b      	ldrh	r3, [r7, #18]
 800b376:	1ad3      	subs	r3, r2, r3
 800b378:	b29b      	uxth	r3, r3
 800b37a:	f003 0301 	and.w	r3, r3, #1
 800b37e:	b29b      	uxth	r3, r3
 800b380:	88fa      	ldrh	r2, [r7, #6]
 800b382:	1ad3      	subs	r3, r2, r3
 800b384:	80fb      	strh	r3, [r7, #6]
 800b386:	e01c      	b.n	800b3c2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b388:	88fb      	ldrh	r3, [r7, #6]
 800b38a:	3b10      	subs	r3, #16
 800b38c:	80fb      	strh	r3, [r7, #6]
 800b38e:	e018      	b.n	800b3c2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b390:	88fb      	ldrh	r3, [r7, #6]
 800b392:	3b20      	subs	r3, #32
 800b394:	80fb      	strh	r3, [r7, #6]
 800b396:	e014      	b.n	800b3c2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b398:	88fb      	ldrh	r3, [r7, #6]
 800b39a:	3b30      	subs	r3, #48	; 0x30
 800b39c:	80fb      	strh	r3, [r7, #6]
 800b39e:	e010      	b.n	800b3c2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b3a0:	88fb      	ldrh	r3, [r7, #6]
 800b3a2:	3b1a      	subs	r3, #26
 800b3a4:	80fb      	strh	r3, [r7, #6]
 800b3a6:	e00c      	b.n	800b3c2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b3a8:	88fb      	ldrh	r3, [r7, #6]
 800b3aa:	3308      	adds	r3, #8
 800b3ac:	80fb      	strh	r3, [r7, #6]
 800b3ae:	e008      	b.n	800b3c2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b3b0:	88fb      	ldrh	r3, [r7, #6]
 800b3b2:	3b50      	subs	r3, #80	; 0x50
 800b3b4:	80fb      	strh	r3, [r7, #6]
 800b3b6:	e004      	b.n	800b3c2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b3b8:	88fb      	ldrh	r3, [r7, #6]
 800b3ba:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800b3be:	80fb      	strh	r3, [r7, #6]
 800b3c0:	bf00      	nop
			}
			break;
 800b3c2:	e008      	b.n	800b3d6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b3c4:	89fb      	ldrh	r3, [r7, #14]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d195      	bne.n	800b2f6 <ff_wtoupper+0x1a>
 800b3ca:	8a3b      	ldrh	r3, [r7, #16]
 800b3cc:	005b      	lsls	r3, r3, #1
 800b3ce:	697a      	ldr	r2, [r7, #20]
 800b3d0:	4413      	add	r3, r2
 800b3d2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b3d4:	e78f      	b.n	800b2f6 <ff_wtoupper+0x1a>
			break;
 800b3d6:	bf00      	nop
	}

	return chr;
 800b3d8:	88fb      	ldrh	r3, [r7, #6]
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	371c      	adds	r7, #28
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr
 800b3e6:	bf00      	nop
 800b3e8:	0800cef8 	.word	0x0800cef8
 800b3ec:	0800d0ec 	.word	0x0800d0ec

0800b3f0 <__errno>:
 800b3f0:	4b01      	ldr	r3, [pc, #4]	; (800b3f8 <__errno+0x8>)
 800b3f2:	6818      	ldr	r0, [r3, #0]
 800b3f4:	4770      	bx	lr
 800b3f6:	bf00      	nop
 800b3f8:	20000030 	.word	0x20000030

0800b3fc <__libc_init_array>:
 800b3fc:	b570      	push	{r4, r5, r6, lr}
 800b3fe:	4d0d      	ldr	r5, [pc, #52]	; (800b434 <__libc_init_array+0x38>)
 800b400:	4c0d      	ldr	r4, [pc, #52]	; (800b438 <__libc_init_array+0x3c>)
 800b402:	1b64      	subs	r4, r4, r5
 800b404:	10a4      	asrs	r4, r4, #2
 800b406:	2600      	movs	r6, #0
 800b408:	42a6      	cmp	r6, r4
 800b40a:	d109      	bne.n	800b420 <__libc_init_array+0x24>
 800b40c:	4d0b      	ldr	r5, [pc, #44]	; (800b43c <__libc_init_array+0x40>)
 800b40e:	4c0c      	ldr	r4, [pc, #48]	; (800b440 <__libc_init_array+0x44>)
 800b410:	f000 fc4e 	bl	800bcb0 <_init>
 800b414:	1b64      	subs	r4, r4, r5
 800b416:	10a4      	asrs	r4, r4, #2
 800b418:	2600      	movs	r6, #0
 800b41a:	42a6      	cmp	r6, r4
 800b41c:	d105      	bne.n	800b42a <__libc_init_array+0x2e>
 800b41e:	bd70      	pop	{r4, r5, r6, pc}
 800b420:	f855 3b04 	ldr.w	r3, [r5], #4
 800b424:	4798      	blx	r3
 800b426:	3601      	adds	r6, #1
 800b428:	e7ee      	b.n	800b408 <__libc_init_array+0xc>
 800b42a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b42e:	4798      	blx	r3
 800b430:	3601      	adds	r6, #1
 800b432:	e7f2      	b.n	800b41a <__libc_init_array+0x1e>
 800b434:	0800d1e4 	.word	0x0800d1e4
 800b438:	0800d1e4 	.word	0x0800d1e4
 800b43c:	0800d1e4 	.word	0x0800d1e4
 800b440:	0800d1e8 	.word	0x0800d1e8

0800b444 <memset>:
 800b444:	4402      	add	r2, r0
 800b446:	4603      	mov	r3, r0
 800b448:	4293      	cmp	r3, r2
 800b44a:	d100      	bne.n	800b44e <memset+0xa>
 800b44c:	4770      	bx	lr
 800b44e:	f803 1b01 	strb.w	r1, [r3], #1
 800b452:	e7f9      	b.n	800b448 <memset+0x4>

0800b454 <siprintf>:
 800b454:	b40e      	push	{r1, r2, r3}
 800b456:	b500      	push	{lr}
 800b458:	b09c      	sub	sp, #112	; 0x70
 800b45a:	ab1d      	add	r3, sp, #116	; 0x74
 800b45c:	9002      	str	r0, [sp, #8]
 800b45e:	9006      	str	r0, [sp, #24]
 800b460:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b464:	4809      	ldr	r0, [pc, #36]	; (800b48c <siprintf+0x38>)
 800b466:	9107      	str	r1, [sp, #28]
 800b468:	9104      	str	r1, [sp, #16]
 800b46a:	4909      	ldr	r1, [pc, #36]	; (800b490 <siprintf+0x3c>)
 800b46c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b470:	9105      	str	r1, [sp, #20]
 800b472:	6800      	ldr	r0, [r0, #0]
 800b474:	9301      	str	r3, [sp, #4]
 800b476:	a902      	add	r1, sp, #8
 800b478:	f000 f868 	bl	800b54c <_svfiprintf_r>
 800b47c:	9b02      	ldr	r3, [sp, #8]
 800b47e:	2200      	movs	r2, #0
 800b480:	701a      	strb	r2, [r3, #0]
 800b482:	b01c      	add	sp, #112	; 0x70
 800b484:	f85d eb04 	ldr.w	lr, [sp], #4
 800b488:	b003      	add	sp, #12
 800b48a:	4770      	bx	lr
 800b48c:	20000030 	.word	0x20000030
 800b490:	ffff0208 	.word	0xffff0208

0800b494 <__ssputs_r>:
 800b494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b498:	688e      	ldr	r6, [r1, #8]
 800b49a:	429e      	cmp	r6, r3
 800b49c:	4682      	mov	sl, r0
 800b49e:	460c      	mov	r4, r1
 800b4a0:	4690      	mov	r8, r2
 800b4a2:	461f      	mov	r7, r3
 800b4a4:	d838      	bhi.n	800b518 <__ssputs_r+0x84>
 800b4a6:	898a      	ldrh	r2, [r1, #12]
 800b4a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4ac:	d032      	beq.n	800b514 <__ssputs_r+0x80>
 800b4ae:	6825      	ldr	r5, [r4, #0]
 800b4b0:	6909      	ldr	r1, [r1, #16]
 800b4b2:	eba5 0901 	sub.w	r9, r5, r1
 800b4b6:	6965      	ldr	r5, [r4, #20]
 800b4b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	444b      	add	r3, r9
 800b4c4:	106d      	asrs	r5, r5, #1
 800b4c6:	429d      	cmp	r5, r3
 800b4c8:	bf38      	it	cc
 800b4ca:	461d      	movcc	r5, r3
 800b4cc:	0553      	lsls	r3, r2, #21
 800b4ce:	d531      	bpl.n	800b534 <__ssputs_r+0xa0>
 800b4d0:	4629      	mov	r1, r5
 800b4d2:	f000 fb47 	bl	800bb64 <_malloc_r>
 800b4d6:	4606      	mov	r6, r0
 800b4d8:	b950      	cbnz	r0, 800b4f0 <__ssputs_r+0x5c>
 800b4da:	230c      	movs	r3, #12
 800b4dc:	f8ca 3000 	str.w	r3, [sl]
 800b4e0:	89a3      	ldrh	r3, [r4, #12]
 800b4e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4e6:	81a3      	strh	r3, [r4, #12]
 800b4e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4f0:	6921      	ldr	r1, [r4, #16]
 800b4f2:	464a      	mov	r2, r9
 800b4f4:	f000 fabe 	bl	800ba74 <memcpy>
 800b4f8:	89a3      	ldrh	r3, [r4, #12]
 800b4fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b4fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b502:	81a3      	strh	r3, [r4, #12]
 800b504:	6126      	str	r6, [r4, #16]
 800b506:	6165      	str	r5, [r4, #20]
 800b508:	444e      	add	r6, r9
 800b50a:	eba5 0509 	sub.w	r5, r5, r9
 800b50e:	6026      	str	r6, [r4, #0]
 800b510:	60a5      	str	r5, [r4, #8]
 800b512:	463e      	mov	r6, r7
 800b514:	42be      	cmp	r6, r7
 800b516:	d900      	bls.n	800b51a <__ssputs_r+0x86>
 800b518:	463e      	mov	r6, r7
 800b51a:	4632      	mov	r2, r6
 800b51c:	6820      	ldr	r0, [r4, #0]
 800b51e:	4641      	mov	r1, r8
 800b520:	f000 fab6 	bl	800ba90 <memmove>
 800b524:	68a3      	ldr	r3, [r4, #8]
 800b526:	6822      	ldr	r2, [r4, #0]
 800b528:	1b9b      	subs	r3, r3, r6
 800b52a:	4432      	add	r2, r6
 800b52c:	60a3      	str	r3, [r4, #8]
 800b52e:	6022      	str	r2, [r4, #0]
 800b530:	2000      	movs	r0, #0
 800b532:	e7db      	b.n	800b4ec <__ssputs_r+0x58>
 800b534:	462a      	mov	r2, r5
 800b536:	f000 fb6f 	bl	800bc18 <_realloc_r>
 800b53a:	4606      	mov	r6, r0
 800b53c:	2800      	cmp	r0, #0
 800b53e:	d1e1      	bne.n	800b504 <__ssputs_r+0x70>
 800b540:	6921      	ldr	r1, [r4, #16]
 800b542:	4650      	mov	r0, sl
 800b544:	f000 fabe 	bl	800bac4 <_free_r>
 800b548:	e7c7      	b.n	800b4da <__ssputs_r+0x46>
	...

0800b54c <_svfiprintf_r>:
 800b54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b550:	4698      	mov	r8, r3
 800b552:	898b      	ldrh	r3, [r1, #12]
 800b554:	061b      	lsls	r3, r3, #24
 800b556:	b09d      	sub	sp, #116	; 0x74
 800b558:	4607      	mov	r7, r0
 800b55a:	460d      	mov	r5, r1
 800b55c:	4614      	mov	r4, r2
 800b55e:	d50e      	bpl.n	800b57e <_svfiprintf_r+0x32>
 800b560:	690b      	ldr	r3, [r1, #16]
 800b562:	b963      	cbnz	r3, 800b57e <_svfiprintf_r+0x32>
 800b564:	2140      	movs	r1, #64	; 0x40
 800b566:	f000 fafd 	bl	800bb64 <_malloc_r>
 800b56a:	6028      	str	r0, [r5, #0]
 800b56c:	6128      	str	r0, [r5, #16]
 800b56e:	b920      	cbnz	r0, 800b57a <_svfiprintf_r+0x2e>
 800b570:	230c      	movs	r3, #12
 800b572:	603b      	str	r3, [r7, #0]
 800b574:	f04f 30ff 	mov.w	r0, #4294967295
 800b578:	e0d1      	b.n	800b71e <_svfiprintf_r+0x1d2>
 800b57a:	2340      	movs	r3, #64	; 0x40
 800b57c:	616b      	str	r3, [r5, #20]
 800b57e:	2300      	movs	r3, #0
 800b580:	9309      	str	r3, [sp, #36]	; 0x24
 800b582:	2320      	movs	r3, #32
 800b584:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b588:	f8cd 800c 	str.w	r8, [sp, #12]
 800b58c:	2330      	movs	r3, #48	; 0x30
 800b58e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b738 <_svfiprintf_r+0x1ec>
 800b592:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b596:	f04f 0901 	mov.w	r9, #1
 800b59a:	4623      	mov	r3, r4
 800b59c:	469a      	mov	sl, r3
 800b59e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5a2:	b10a      	cbz	r2, 800b5a8 <_svfiprintf_r+0x5c>
 800b5a4:	2a25      	cmp	r2, #37	; 0x25
 800b5a6:	d1f9      	bne.n	800b59c <_svfiprintf_r+0x50>
 800b5a8:	ebba 0b04 	subs.w	fp, sl, r4
 800b5ac:	d00b      	beq.n	800b5c6 <_svfiprintf_r+0x7a>
 800b5ae:	465b      	mov	r3, fp
 800b5b0:	4622      	mov	r2, r4
 800b5b2:	4629      	mov	r1, r5
 800b5b4:	4638      	mov	r0, r7
 800b5b6:	f7ff ff6d 	bl	800b494 <__ssputs_r>
 800b5ba:	3001      	adds	r0, #1
 800b5bc:	f000 80aa 	beq.w	800b714 <_svfiprintf_r+0x1c8>
 800b5c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5c2:	445a      	add	r2, fp
 800b5c4:	9209      	str	r2, [sp, #36]	; 0x24
 800b5c6:	f89a 3000 	ldrb.w	r3, [sl]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	f000 80a2 	beq.w	800b714 <_svfiprintf_r+0x1c8>
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b5d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5da:	f10a 0a01 	add.w	sl, sl, #1
 800b5de:	9304      	str	r3, [sp, #16]
 800b5e0:	9307      	str	r3, [sp, #28]
 800b5e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5e6:	931a      	str	r3, [sp, #104]	; 0x68
 800b5e8:	4654      	mov	r4, sl
 800b5ea:	2205      	movs	r2, #5
 800b5ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5f0:	4851      	ldr	r0, [pc, #324]	; (800b738 <_svfiprintf_r+0x1ec>)
 800b5f2:	f7f4 fe0d 	bl	8000210 <memchr>
 800b5f6:	9a04      	ldr	r2, [sp, #16]
 800b5f8:	b9d8      	cbnz	r0, 800b632 <_svfiprintf_r+0xe6>
 800b5fa:	06d0      	lsls	r0, r2, #27
 800b5fc:	bf44      	itt	mi
 800b5fe:	2320      	movmi	r3, #32
 800b600:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b604:	0711      	lsls	r1, r2, #28
 800b606:	bf44      	itt	mi
 800b608:	232b      	movmi	r3, #43	; 0x2b
 800b60a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b60e:	f89a 3000 	ldrb.w	r3, [sl]
 800b612:	2b2a      	cmp	r3, #42	; 0x2a
 800b614:	d015      	beq.n	800b642 <_svfiprintf_r+0xf6>
 800b616:	9a07      	ldr	r2, [sp, #28]
 800b618:	4654      	mov	r4, sl
 800b61a:	2000      	movs	r0, #0
 800b61c:	f04f 0c0a 	mov.w	ip, #10
 800b620:	4621      	mov	r1, r4
 800b622:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b626:	3b30      	subs	r3, #48	; 0x30
 800b628:	2b09      	cmp	r3, #9
 800b62a:	d94e      	bls.n	800b6ca <_svfiprintf_r+0x17e>
 800b62c:	b1b0      	cbz	r0, 800b65c <_svfiprintf_r+0x110>
 800b62e:	9207      	str	r2, [sp, #28]
 800b630:	e014      	b.n	800b65c <_svfiprintf_r+0x110>
 800b632:	eba0 0308 	sub.w	r3, r0, r8
 800b636:	fa09 f303 	lsl.w	r3, r9, r3
 800b63a:	4313      	orrs	r3, r2
 800b63c:	9304      	str	r3, [sp, #16]
 800b63e:	46a2      	mov	sl, r4
 800b640:	e7d2      	b.n	800b5e8 <_svfiprintf_r+0x9c>
 800b642:	9b03      	ldr	r3, [sp, #12]
 800b644:	1d19      	adds	r1, r3, #4
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	9103      	str	r1, [sp, #12]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	bfbb      	ittet	lt
 800b64e:	425b      	neglt	r3, r3
 800b650:	f042 0202 	orrlt.w	r2, r2, #2
 800b654:	9307      	strge	r3, [sp, #28]
 800b656:	9307      	strlt	r3, [sp, #28]
 800b658:	bfb8      	it	lt
 800b65a:	9204      	strlt	r2, [sp, #16]
 800b65c:	7823      	ldrb	r3, [r4, #0]
 800b65e:	2b2e      	cmp	r3, #46	; 0x2e
 800b660:	d10c      	bne.n	800b67c <_svfiprintf_r+0x130>
 800b662:	7863      	ldrb	r3, [r4, #1]
 800b664:	2b2a      	cmp	r3, #42	; 0x2a
 800b666:	d135      	bne.n	800b6d4 <_svfiprintf_r+0x188>
 800b668:	9b03      	ldr	r3, [sp, #12]
 800b66a:	1d1a      	adds	r2, r3, #4
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	9203      	str	r2, [sp, #12]
 800b670:	2b00      	cmp	r3, #0
 800b672:	bfb8      	it	lt
 800b674:	f04f 33ff 	movlt.w	r3, #4294967295
 800b678:	3402      	adds	r4, #2
 800b67a:	9305      	str	r3, [sp, #20]
 800b67c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b748 <_svfiprintf_r+0x1fc>
 800b680:	7821      	ldrb	r1, [r4, #0]
 800b682:	2203      	movs	r2, #3
 800b684:	4650      	mov	r0, sl
 800b686:	f7f4 fdc3 	bl	8000210 <memchr>
 800b68a:	b140      	cbz	r0, 800b69e <_svfiprintf_r+0x152>
 800b68c:	2340      	movs	r3, #64	; 0x40
 800b68e:	eba0 000a 	sub.w	r0, r0, sl
 800b692:	fa03 f000 	lsl.w	r0, r3, r0
 800b696:	9b04      	ldr	r3, [sp, #16]
 800b698:	4303      	orrs	r3, r0
 800b69a:	3401      	adds	r4, #1
 800b69c:	9304      	str	r3, [sp, #16]
 800b69e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6a2:	4826      	ldr	r0, [pc, #152]	; (800b73c <_svfiprintf_r+0x1f0>)
 800b6a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6a8:	2206      	movs	r2, #6
 800b6aa:	f7f4 fdb1 	bl	8000210 <memchr>
 800b6ae:	2800      	cmp	r0, #0
 800b6b0:	d038      	beq.n	800b724 <_svfiprintf_r+0x1d8>
 800b6b2:	4b23      	ldr	r3, [pc, #140]	; (800b740 <_svfiprintf_r+0x1f4>)
 800b6b4:	bb1b      	cbnz	r3, 800b6fe <_svfiprintf_r+0x1b2>
 800b6b6:	9b03      	ldr	r3, [sp, #12]
 800b6b8:	3307      	adds	r3, #7
 800b6ba:	f023 0307 	bic.w	r3, r3, #7
 800b6be:	3308      	adds	r3, #8
 800b6c0:	9303      	str	r3, [sp, #12]
 800b6c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6c4:	4433      	add	r3, r6
 800b6c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b6c8:	e767      	b.n	800b59a <_svfiprintf_r+0x4e>
 800b6ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6ce:	460c      	mov	r4, r1
 800b6d0:	2001      	movs	r0, #1
 800b6d2:	e7a5      	b.n	800b620 <_svfiprintf_r+0xd4>
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	3401      	adds	r4, #1
 800b6d8:	9305      	str	r3, [sp, #20]
 800b6da:	4619      	mov	r1, r3
 800b6dc:	f04f 0c0a 	mov.w	ip, #10
 800b6e0:	4620      	mov	r0, r4
 800b6e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6e6:	3a30      	subs	r2, #48	; 0x30
 800b6e8:	2a09      	cmp	r2, #9
 800b6ea:	d903      	bls.n	800b6f4 <_svfiprintf_r+0x1a8>
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d0c5      	beq.n	800b67c <_svfiprintf_r+0x130>
 800b6f0:	9105      	str	r1, [sp, #20]
 800b6f2:	e7c3      	b.n	800b67c <_svfiprintf_r+0x130>
 800b6f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6f8:	4604      	mov	r4, r0
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	e7f0      	b.n	800b6e0 <_svfiprintf_r+0x194>
 800b6fe:	ab03      	add	r3, sp, #12
 800b700:	9300      	str	r3, [sp, #0]
 800b702:	462a      	mov	r2, r5
 800b704:	4b0f      	ldr	r3, [pc, #60]	; (800b744 <_svfiprintf_r+0x1f8>)
 800b706:	a904      	add	r1, sp, #16
 800b708:	4638      	mov	r0, r7
 800b70a:	f3af 8000 	nop.w
 800b70e:	1c42      	adds	r2, r0, #1
 800b710:	4606      	mov	r6, r0
 800b712:	d1d6      	bne.n	800b6c2 <_svfiprintf_r+0x176>
 800b714:	89ab      	ldrh	r3, [r5, #12]
 800b716:	065b      	lsls	r3, r3, #25
 800b718:	f53f af2c 	bmi.w	800b574 <_svfiprintf_r+0x28>
 800b71c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b71e:	b01d      	add	sp, #116	; 0x74
 800b720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b724:	ab03      	add	r3, sp, #12
 800b726:	9300      	str	r3, [sp, #0]
 800b728:	462a      	mov	r2, r5
 800b72a:	4b06      	ldr	r3, [pc, #24]	; (800b744 <_svfiprintf_r+0x1f8>)
 800b72c:	a904      	add	r1, sp, #16
 800b72e:	4638      	mov	r0, r7
 800b730:	f000 f87a 	bl	800b828 <_printf_i>
 800b734:	e7eb      	b.n	800b70e <_svfiprintf_r+0x1c2>
 800b736:	bf00      	nop
 800b738:	0800d1a8 	.word	0x0800d1a8
 800b73c:	0800d1b2 	.word	0x0800d1b2
 800b740:	00000000 	.word	0x00000000
 800b744:	0800b495 	.word	0x0800b495
 800b748:	0800d1ae 	.word	0x0800d1ae

0800b74c <_printf_common>:
 800b74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b750:	4616      	mov	r6, r2
 800b752:	4699      	mov	r9, r3
 800b754:	688a      	ldr	r2, [r1, #8]
 800b756:	690b      	ldr	r3, [r1, #16]
 800b758:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b75c:	4293      	cmp	r3, r2
 800b75e:	bfb8      	it	lt
 800b760:	4613      	movlt	r3, r2
 800b762:	6033      	str	r3, [r6, #0]
 800b764:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b768:	4607      	mov	r7, r0
 800b76a:	460c      	mov	r4, r1
 800b76c:	b10a      	cbz	r2, 800b772 <_printf_common+0x26>
 800b76e:	3301      	adds	r3, #1
 800b770:	6033      	str	r3, [r6, #0]
 800b772:	6823      	ldr	r3, [r4, #0]
 800b774:	0699      	lsls	r1, r3, #26
 800b776:	bf42      	ittt	mi
 800b778:	6833      	ldrmi	r3, [r6, #0]
 800b77a:	3302      	addmi	r3, #2
 800b77c:	6033      	strmi	r3, [r6, #0]
 800b77e:	6825      	ldr	r5, [r4, #0]
 800b780:	f015 0506 	ands.w	r5, r5, #6
 800b784:	d106      	bne.n	800b794 <_printf_common+0x48>
 800b786:	f104 0a19 	add.w	sl, r4, #25
 800b78a:	68e3      	ldr	r3, [r4, #12]
 800b78c:	6832      	ldr	r2, [r6, #0]
 800b78e:	1a9b      	subs	r3, r3, r2
 800b790:	42ab      	cmp	r3, r5
 800b792:	dc26      	bgt.n	800b7e2 <_printf_common+0x96>
 800b794:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b798:	1e13      	subs	r3, r2, #0
 800b79a:	6822      	ldr	r2, [r4, #0]
 800b79c:	bf18      	it	ne
 800b79e:	2301      	movne	r3, #1
 800b7a0:	0692      	lsls	r2, r2, #26
 800b7a2:	d42b      	bmi.n	800b7fc <_printf_common+0xb0>
 800b7a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b7a8:	4649      	mov	r1, r9
 800b7aa:	4638      	mov	r0, r7
 800b7ac:	47c0      	blx	r8
 800b7ae:	3001      	adds	r0, #1
 800b7b0:	d01e      	beq.n	800b7f0 <_printf_common+0xa4>
 800b7b2:	6823      	ldr	r3, [r4, #0]
 800b7b4:	68e5      	ldr	r5, [r4, #12]
 800b7b6:	6832      	ldr	r2, [r6, #0]
 800b7b8:	f003 0306 	and.w	r3, r3, #6
 800b7bc:	2b04      	cmp	r3, #4
 800b7be:	bf08      	it	eq
 800b7c0:	1aad      	subeq	r5, r5, r2
 800b7c2:	68a3      	ldr	r3, [r4, #8]
 800b7c4:	6922      	ldr	r2, [r4, #16]
 800b7c6:	bf0c      	ite	eq
 800b7c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7cc:	2500      	movne	r5, #0
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	bfc4      	itt	gt
 800b7d2:	1a9b      	subgt	r3, r3, r2
 800b7d4:	18ed      	addgt	r5, r5, r3
 800b7d6:	2600      	movs	r6, #0
 800b7d8:	341a      	adds	r4, #26
 800b7da:	42b5      	cmp	r5, r6
 800b7dc:	d11a      	bne.n	800b814 <_printf_common+0xc8>
 800b7de:	2000      	movs	r0, #0
 800b7e0:	e008      	b.n	800b7f4 <_printf_common+0xa8>
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	4652      	mov	r2, sl
 800b7e6:	4649      	mov	r1, r9
 800b7e8:	4638      	mov	r0, r7
 800b7ea:	47c0      	blx	r8
 800b7ec:	3001      	adds	r0, #1
 800b7ee:	d103      	bne.n	800b7f8 <_printf_common+0xac>
 800b7f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7f8:	3501      	adds	r5, #1
 800b7fa:	e7c6      	b.n	800b78a <_printf_common+0x3e>
 800b7fc:	18e1      	adds	r1, r4, r3
 800b7fe:	1c5a      	adds	r2, r3, #1
 800b800:	2030      	movs	r0, #48	; 0x30
 800b802:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b806:	4422      	add	r2, r4
 800b808:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b80c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b810:	3302      	adds	r3, #2
 800b812:	e7c7      	b.n	800b7a4 <_printf_common+0x58>
 800b814:	2301      	movs	r3, #1
 800b816:	4622      	mov	r2, r4
 800b818:	4649      	mov	r1, r9
 800b81a:	4638      	mov	r0, r7
 800b81c:	47c0      	blx	r8
 800b81e:	3001      	adds	r0, #1
 800b820:	d0e6      	beq.n	800b7f0 <_printf_common+0xa4>
 800b822:	3601      	adds	r6, #1
 800b824:	e7d9      	b.n	800b7da <_printf_common+0x8e>
	...

0800b828 <_printf_i>:
 800b828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b82c:	460c      	mov	r4, r1
 800b82e:	4691      	mov	r9, r2
 800b830:	7e27      	ldrb	r7, [r4, #24]
 800b832:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b834:	2f78      	cmp	r7, #120	; 0x78
 800b836:	4680      	mov	r8, r0
 800b838:	469a      	mov	sl, r3
 800b83a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b83e:	d807      	bhi.n	800b850 <_printf_i+0x28>
 800b840:	2f62      	cmp	r7, #98	; 0x62
 800b842:	d80a      	bhi.n	800b85a <_printf_i+0x32>
 800b844:	2f00      	cmp	r7, #0
 800b846:	f000 80d8 	beq.w	800b9fa <_printf_i+0x1d2>
 800b84a:	2f58      	cmp	r7, #88	; 0x58
 800b84c:	f000 80a3 	beq.w	800b996 <_printf_i+0x16e>
 800b850:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b854:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b858:	e03a      	b.n	800b8d0 <_printf_i+0xa8>
 800b85a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b85e:	2b15      	cmp	r3, #21
 800b860:	d8f6      	bhi.n	800b850 <_printf_i+0x28>
 800b862:	a001      	add	r0, pc, #4	; (adr r0, 800b868 <_printf_i+0x40>)
 800b864:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b868:	0800b8c1 	.word	0x0800b8c1
 800b86c:	0800b8d5 	.word	0x0800b8d5
 800b870:	0800b851 	.word	0x0800b851
 800b874:	0800b851 	.word	0x0800b851
 800b878:	0800b851 	.word	0x0800b851
 800b87c:	0800b851 	.word	0x0800b851
 800b880:	0800b8d5 	.word	0x0800b8d5
 800b884:	0800b851 	.word	0x0800b851
 800b888:	0800b851 	.word	0x0800b851
 800b88c:	0800b851 	.word	0x0800b851
 800b890:	0800b851 	.word	0x0800b851
 800b894:	0800b9e1 	.word	0x0800b9e1
 800b898:	0800b905 	.word	0x0800b905
 800b89c:	0800b9c3 	.word	0x0800b9c3
 800b8a0:	0800b851 	.word	0x0800b851
 800b8a4:	0800b851 	.word	0x0800b851
 800b8a8:	0800ba03 	.word	0x0800ba03
 800b8ac:	0800b851 	.word	0x0800b851
 800b8b0:	0800b905 	.word	0x0800b905
 800b8b4:	0800b851 	.word	0x0800b851
 800b8b8:	0800b851 	.word	0x0800b851
 800b8bc:	0800b9cb 	.word	0x0800b9cb
 800b8c0:	680b      	ldr	r3, [r1, #0]
 800b8c2:	1d1a      	adds	r2, r3, #4
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	600a      	str	r2, [r1, #0]
 800b8c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b8cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	e0a3      	b.n	800ba1c <_printf_i+0x1f4>
 800b8d4:	6825      	ldr	r5, [r4, #0]
 800b8d6:	6808      	ldr	r0, [r1, #0]
 800b8d8:	062e      	lsls	r6, r5, #24
 800b8da:	f100 0304 	add.w	r3, r0, #4
 800b8de:	d50a      	bpl.n	800b8f6 <_printf_i+0xce>
 800b8e0:	6805      	ldr	r5, [r0, #0]
 800b8e2:	600b      	str	r3, [r1, #0]
 800b8e4:	2d00      	cmp	r5, #0
 800b8e6:	da03      	bge.n	800b8f0 <_printf_i+0xc8>
 800b8e8:	232d      	movs	r3, #45	; 0x2d
 800b8ea:	426d      	negs	r5, r5
 800b8ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8f0:	485e      	ldr	r0, [pc, #376]	; (800ba6c <_printf_i+0x244>)
 800b8f2:	230a      	movs	r3, #10
 800b8f4:	e019      	b.n	800b92a <_printf_i+0x102>
 800b8f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b8fa:	6805      	ldr	r5, [r0, #0]
 800b8fc:	600b      	str	r3, [r1, #0]
 800b8fe:	bf18      	it	ne
 800b900:	b22d      	sxthne	r5, r5
 800b902:	e7ef      	b.n	800b8e4 <_printf_i+0xbc>
 800b904:	680b      	ldr	r3, [r1, #0]
 800b906:	6825      	ldr	r5, [r4, #0]
 800b908:	1d18      	adds	r0, r3, #4
 800b90a:	6008      	str	r0, [r1, #0]
 800b90c:	0628      	lsls	r0, r5, #24
 800b90e:	d501      	bpl.n	800b914 <_printf_i+0xec>
 800b910:	681d      	ldr	r5, [r3, #0]
 800b912:	e002      	b.n	800b91a <_printf_i+0xf2>
 800b914:	0669      	lsls	r1, r5, #25
 800b916:	d5fb      	bpl.n	800b910 <_printf_i+0xe8>
 800b918:	881d      	ldrh	r5, [r3, #0]
 800b91a:	4854      	ldr	r0, [pc, #336]	; (800ba6c <_printf_i+0x244>)
 800b91c:	2f6f      	cmp	r7, #111	; 0x6f
 800b91e:	bf0c      	ite	eq
 800b920:	2308      	moveq	r3, #8
 800b922:	230a      	movne	r3, #10
 800b924:	2100      	movs	r1, #0
 800b926:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b92a:	6866      	ldr	r6, [r4, #4]
 800b92c:	60a6      	str	r6, [r4, #8]
 800b92e:	2e00      	cmp	r6, #0
 800b930:	bfa2      	ittt	ge
 800b932:	6821      	ldrge	r1, [r4, #0]
 800b934:	f021 0104 	bicge.w	r1, r1, #4
 800b938:	6021      	strge	r1, [r4, #0]
 800b93a:	b90d      	cbnz	r5, 800b940 <_printf_i+0x118>
 800b93c:	2e00      	cmp	r6, #0
 800b93e:	d04d      	beq.n	800b9dc <_printf_i+0x1b4>
 800b940:	4616      	mov	r6, r2
 800b942:	fbb5 f1f3 	udiv	r1, r5, r3
 800b946:	fb03 5711 	mls	r7, r3, r1, r5
 800b94a:	5dc7      	ldrb	r7, [r0, r7]
 800b94c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b950:	462f      	mov	r7, r5
 800b952:	42bb      	cmp	r3, r7
 800b954:	460d      	mov	r5, r1
 800b956:	d9f4      	bls.n	800b942 <_printf_i+0x11a>
 800b958:	2b08      	cmp	r3, #8
 800b95a:	d10b      	bne.n	800b974 <_printf_i+0x14c>
 800b95c:	6823      	ldr	r3, [r4, #0]
 800b95e:	07df      	lsls	r7, r3, #31
 800b960:	d508      	bpl.n	800b974 <_printf_i+0x14c>
 800b962:	6923      	ldr	r3, [r4, #16]
 800b964:	6861      	ldr	r1, [r4, #4]
 800b966:	4299      	cmp	r1, r3
 800b968:	bfde      	ittt	le
 800b96a:	2330      	movle	r3, #48	; 0x30
 800b96c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b970:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b974:	1b92      	subs	r2, r2, r6
 800b976:	6122      	str	r2, [r4, #16]
 800b978:	f8cd a000 	str.w	sl, [sp]
 800b97c:	464b      	mov	r3, r9
 800b97e:	aa03      	add	r2, sp, #12
 800b980:	4621      	mov	r1, r4
 800b982:	4640      	mov	r0, r8
 800b984:	f7ff fee2 	bl	800b74c <_printf_common>
 800b988:	3001      	adds	r0, #1
 800b98a:	d14c      	bne.n	800ba26 <_printf_i+0x1fe>
 800b98c:	f04f 30ff 	mov.w	r0, #4294967295
 800b990:	b004      	add	sp, #16
 800b992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b996:	4835      	ldr	r0, [pc, #212]	; (800ba6c <_printf_i+0x244>)
 800b998:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b99c:	6823      	ldr	r3, [r4, #0]
 800b99e:	680e      	ldr	r6, [r1, #0]
 800b9a0:	061f      	lsls	r7, r3, #24
 800b9a2:	f856 5b04 	ldr.w	r5, [r6], #4
 800b9a6:	600e      	str	r6, [r1, #0]
 800b9a8:	d514      	bpl.n	800b9d4 <_printf_i+0x1ac>
 800b9aa:	07d9      	lsls	r1, r3, #31
 800b9ac:	bf44      	itt	mi
 800b9ae:	f043 0320 	orrmi.w	r3, r3, #32
 800b9b2:	6023      	strmi	r3, [r4, #0]
 800b9b4:	b91d      	cbnz	r5, 800b9be <_printf_i+0x196>
 800b9b6:	6823      	ldr	r3, [r4, #0]
 800b9b8:	f023 0320 	bic.w	r3, r3, #32
 800b9bc:	6023      	str	r3, [r4, #0]
 800b9be:	2310      	movs	r3, #16
 800b9c0:	e7b0      	b.n	800b924 <_printf_i+0xfc>
 800b9c2:	6823      	ldr	r3, [r4, #0]
 800b9c4:	f043 0320 	orr.w	r3, r3, #32
 800b9c8:	6023      	str	r3, [r4, #0]
 800b9ca:	2378      	movs	r3, #120	; 0x78
 800b9cc:	4828      	ldr	r0, [pc, #160]	; (800ba70 <_printf_i+0x248>)
 800b9ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b9d2:	e7e3      	b.n	800b99c <_printf_i+0x174>
 800b9d4:	065e      	lsls	r6, r3, #25
 800b9d6:	bf48      	it	mi
 800b9d8:	b2ad      	uxthmi	r5, r5
 800b9da:	e7e6      	b.n	800b9aa <_printf_i+0x182>
 800b9dc:	4616      	mov	r6, r2
 800b9de:	e7bb      	b.n	800b958 <_printf_i+0x130>
 800b9e0:	680b      	ldr	r3, [r1, #0]
 800b9e2:	6826      	ldr	r6, [r4, #0]
 800b9e4:	6960      	ldr	r0, [r4, #20]
 800b9e6:	1d1d      	adds	r5, r3, #4
 800b9e8:	600d      	str	r5, [r1, #0]
 800b9ea:	0635      	lsls	r5, r6, #24
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	d501      	bpl.n	800b9f4 <_printf_i+0x1cc>
 800b9f0:	6018      	str	r0, [r3, #0]
 800b9f2:	e002      	b.n	800b9fa <_printf_i+0x1d2>
 800b9f4:	0671      	lsls	r1, r6, #25
 800b9f6:	d5fb      	bpl.n	800b9f0 <_printf_i+0x1c8>
 800b9f8:	8018      	strh	r0, [r3, #0]
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	6123      	str	r3, [r4, #16]
 800b9fe:	4616      	mov	r6, r2
 800ba00:	e7ba      	b.n	800b978 <_printf_i+0x150>
 800ba02:	680b      	ldr	r3, [r1, #0]
 800ba04:	1d1a      	adds	r2, r3, #4
 800ba06:	600a      	str	r2, [r1, #0]
 800ba08:	681e      	ldr	r6, [r3, #0]
 800ba0a:	6862      	ldr	r2, [r4, #4]
 800ba0c:	2100      	movs	r1, #0
 800ba0e:	4630      	mov	r0, r6
 800ba10:	f7f4 fbfe 	bl	8000210 <memchr>
 800ba14:	b108      	cbz	r0, 800ba1a <_printf_i+0x1f2>
 800ba16:	1b80      	subs	r0, r0, r6
 800ba18:	6060      	str	r0, [r4, #4]
 800ba1a:	6863      	ldr	r3, [r4, #4]
 800ba1c:	6123      	str	r3, [r4, #16]
 800ba1e:	2300      	movs	r3, #0
 800ba20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba24:	e7a8      	b.n	800b978 <_printf_i+0x150>
 800ba26:	6923      	ldr	r3, [r4, #16]
 800ba28:	4632      	mov	r2, r6
 800ba2a:	4649      	mov	r1, r9
 800ba2c:	4640      	mov	r0, r8
 800ba2e:	47d0      	blx	sl
 800ba30:	3001      	adds	r0, #1
 800ba32:	d0ab      	beq.n	800b98c <_printf_i+0x164>
 800ba34:	6823      	ldr	r3, [r4, #0]
 800ba36:	079b      	lsls	r3, r3, #30
 800ba38:	d413      	bmi.n	800ba62 <_printf_i+0x23a>
 800ba3a:	68e0      	ldr	r0, [r4, #12]
 800ba3c:	9b03      	ldr	r3, [sp, #12]
 800ba3e:	4298      	cmp	r0, r3
 800ba40:	bfb8      	it	lt
 800ba42:	4618      	movlt	r0, r3
 800ba44:	e7a4      	b.n	800b990 <_printf_i+0x168>
 800ba46:	2301      	movs	r3, #1
 800ba48:	4632      	mov	r2, r6
 800ba4a:	4649      	mov	r1, r9
 800ba4c:	4640      	mov	r0, r8
 800ba4e:	47d0      	blx	sl
 800ba50:	3001      	adds	r0, #1
 800ba52:	d09b      	beq.n	800b98c <_printf_i+0x164>
 800ba54:	3501      	adds	r5, #1
 800ba56:	68e3      	ldr	r3, [r4, #12]
 800ba58:	9903      	ldr	r1, [sp, #12]
 800ba5a:	1a5b      	subs	r3, r3, r1
 800ba5c:	42ab      	cmp	r3, r5
 800ba5e:	dcf2      	bgt.n	800ba46 <_printf_i+0x21e>
 800ba60:	e7eb      	b.n	800ba3a <_printf_i+0x212>
 800ba62:	2500      	movs	r5, #0
 800ba64:	f104 0619 	add.w	r6, r4, #25
 800ba68:	e7f5      	b.n	800ba56 <_printf_i+0x22e>
 800ba6a:	bf00      	nop
 800ba6c:	0800d1b9 	.word	0x0800d1b9
 800ba70:	0800d1ca 	.word	0x0800d1ca

0800ba74 <memcpy>:
 800ba74:	440a      	add	r2, r1
 800ba76:	4291      	cmp	r1, r2
 800ba78:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba7c:	d100      	bne.n	800ba80 <memcpy+0xc>
 800ba7e:	4770      	bx	lr
 800ba80:	b510      	push	{r4, lr}
 800ba82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba86:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba8a:	4291      	cmp	r1, r2
 800ba8c:	d1f9      	bne.n	800ba82 <memcpy+0xe>
 800ba8e:	bd10      	pop	{r4, pc}

0800ba90 <memmove>:
 800ba90:	4288      	cmp	r0, r1
 800ba92:	b510      	push	{r4, lr}
 800ba94:	eb01 0402 	add.w	r4, r1, r2
 800ba98:	d902      	bls.n	800baa0 <memmove+0x10>
 800ba9a:	4284      	cmp	r4, r0
 800ba9c:	4623      	mov	r3, r4
 800ba9e:	d807      	bhi.n	800bab0 <memmove+0x20>
 800baa0:	1e43      	subs	r3, r0, #1
 800baa2:	42a1      	cmp	r1, r4
 800baa4:	d008      	beq.n	800bab8 <memmove+0x28>
 800baa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800baaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800baae:	e7f8      	b.n	800baa2 <memmove+0x12>
 800bab0:	4402      	add	r2, r0
 800bab2:	4601      	mov	r1, r0
 800bab4:	428a      	cmp	r2, r1
 800bab6:	d100      	bne.n	800baba <memmove+0x2a>
 800bab8:	bd10      	pop	{r4, pc}
 800baba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800babe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bac2:	e7f7      	b.n	800bab4 <memmove+0x24>

0800bac4 <_free_r>:
 800bac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bac6:	2900      	cmp	r1, #0
 800bac8:	d048      	beq.n	800bb5c <_free_r+0x98>
 800baca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bace:	9001      	str	r0, [sp, #4]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	f1a1 0404 	sub.w	r4, r1, #4
 800bad6:	bfb8      	it	lt
 800bad8:	18e4      	addlt	r4, r4, r3
 800bada:	f000 f8d3 	bl	800bc84 <__malloc_lock>
 800bade:	4a20      	ldr	r2, [pc, #128]	; (800bb60 <_free_r+0x9c>)
 800bae0:	9801      	ldr	r0, [sp, #4]
 800bae2:	6813      	ldr	r3, [r2, #0]
 800bae4:	4615      	mov	r5, r2
 800bae6:	b933      	cbnz	r3, 800baf6 <_free_r+0x32>
 800bae8:	6063      	str	r3, [r4, #4]
 800baea:	6014      	str	r4, [r2, #0]
 800baec:	b003      	add	sp, #12
 800baee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800baf2:	f000 b8cd 	b.w	800bc90 <__malloc_unlock>
 800baf6:	42a3      	cmp	r3, r4
 800baf8:	d90b      	bls.n	800bb12 <_free_r+0x4e>
 800bafa:	6821      	ldr	r1, [r4, #0]
 800bafc:	1862      	adds	r2, r4, r1
 800bafe:	4293      	cmp	r3, r2
 800bb00:	bf04      	itt	eq
 800bb02:	681a      	ldreq	r2, [r3, #0]
 800bb04:	685b      	ldreq	r3, [r3, #4]
 800bb06:	6063      	str	r3, [r4, #4]
 800bb08:	bf04      	itt	eq
 800bb0a:	1852      	addeq	r2, r2, r1
 800bb0c:	6022      	streq	r2, [r4, #0]
 800bb0e:	602c      	str	r4, [r5, #0]
 800bb10:	e7ec      	b.n	800baec <_free_r+0x28>
 800bb12:	461a      	mov	r2, r3
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	b10b      	cbz	r3, 800bb1c <_free_r+0x58>
 800bb18:	42a3      	cmp	r3, r4
 800bb1a:	d9fa      	bls.n	800bb12 <_free_r+0x4e>
 800bb1c:	6811      	ldr	r1, [r2, #0]
 800bb1e:	1855      	adds	r5, r2, r1
 800bb20:	42a5      	cmp	r5, r4
 800bb22:	d10b      	bne.n	800bb3c <_free_r+0x78>
 800bb24:	6824      	ldr	r4, [r4, #0]
 800bb26:	4421      	add	r1, r4
 800bb28:	1854      	adds	r4, r2, r1
 800bb2a:	42a3      	cmp	r3, r4
 800bb2c:	6011      	str	r1, [r2, #0]
 800bb2e:	d1dd      	bne.n	800baec <_free_r+0x28>
 800bb30:	681c      	ldr	r4, [r3, #0]
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	6053      	str	r3, [r2, #4]
 800bb36:	4421      	add	r1, r4
 800bb38:	6011      	str	r1, [r2, #0]
 800bb3a:	e7d7      	b.n	800baec <_free_r+0x28>
 800bb3c:	d902      	bls.n	800bb44 <_free_r+0x80>
 800bb3e:	230c      	movs	r3, #12
 800bb40:	6003      	str	r3, [r0, #0]
 800bb42:	e7d3      	b.n	800baec <_free_r+0x28>
 800bb44:	6825      	ldr	r5, [r4, #0]
 800bb46:	1961      	adds	r1, r4, r5
 800bb48:	428b      	cmp	r3, r1
 800bb4a:	bf04      	itt	eq
 800bb4c:	6819      	ldreq	r1, [r3, #0]
 800bb4e:	685b      	ldreq	r3, [r3, #4]
 800bb50:	6063      	str	r3, [r4, #4]
 800bb52:	bf04      	itt	eq
 800bb54:	1949      	addeq	r1, r1, r5
 800bb56:	6021      	streq	r1, [r4, #0]
 800bb58:	6054      	str	r4, [r2, #4]
 800bb5a:	e7c7      	b.n	800baec <_free_r+0x28>
 800bb5c:	b003      	add	sp, #12
 800bb5e:	bd30      	pop	{r4, r5, pc}
 800bb60:	20000308 	.word	0x20000308

0800bb64 <_malloc_r>:
 800bb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb66:	1ccd      	adds	r5, r1, #3
 800bb68:	f025 0503 	bic.w	r5, r5, #3
 800bb6c:	3508      	adds	r5, #8
 800bb6e:	2d0c      	cmp	r5, #12
 800bb70:	bf38      	it	cc
 800bb72:	250c      	movcc	r5, #12
 800bb74:	2d00      	cmp	r5, #0
 800bb76:	4606      	mov	r6, r0
 800bb78:	db01      	blt.n	800bb7e <_malloc_r+0x1a>
 800bb7a:	42a9      	cmp	r1, r5
 800bb7c:	d903      	bls.n	800bb86 <_malloc_r+0x22>
 800bb7e:	230c      	movs	r3, #12
 800bb80:	6033      	str	r3, [r6, #0]
 800bb82:	2000      	movs	r0, #0
 800bb84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb86:	f000 f87d 	bl	800bc84 <__malloc_lock>
 800bb8a:	4921      	ldr	r1, [pc, #132]	; (800bc10 <_malloc_r+0xac>)
 800bb8c:	680a      	ldr	r2, [r1, #0]
 800bb8e:	4614      	mov	r4, r2
 800bb90:	b99c      	cbnz	r4, 800bbba <_malloc_r+0x56>
 800bb92:	4f20      	ldr	r7, [pc, #128]	; (800bc14 <_malloc_r+0xb0>)
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	b923      	cbnz	r3, 800bba2 <_malloc_r+0x3e>
 800bb98:	4621      	mov	r1, r4
 800bb9a:	4630      	mov	r0, r6
 800bb9c:	f000 f862 	bl	800bc64 <_sbrk_r>
 800bba0:	6038      	str	r0, [r7, #0]
 800bba2:	4629      	mov	r1, r5
 800bba4:	4630      	mov	r0, r6
 800bba6:	f000 f85d 	bl	800bc64 <_sbrk_r>
 800bbaa:	1c43      	adds	r3, r0, #1
 800bbac:	d123      	bne.n	800bbf6 <_malloc_r+0x92>
 800bbae:	230c      	movs	r3, #12
 800bbb0:	6033      	str	r3, [r6, #0]
 800bbb2:	4630      	mov	r0, r6
 800bbb4:	f000 f86c 	bl	800bc90 <__malloc_unlock>
 800bbb8:	e7e3      	b.n	800bb82 <_malloc_r+0x1e>
 800bbba:	6823      	ldr	r3, [r4, #0]
 800bbbc:	1b5b      	subs	r3, r3, r5
 800bbbe:	d417      	bmi.n	800bbf0 <_malloc_r+0x8c>
 800bbc0:	2b0b      	cmp	r3, #11
 800bbc2:	d903      	bls.n	800bbcc <_malloc_r+0x68>
 800bbc4:	6023      	str	r3, [r4, #0]
 800bbc6:	441c      	add	r4, r3
 800bbc8:	6025      	str	r5, [r4, #0]
 800bbca:	e004      	b.n	800bbd6 <_malloc_r+0x72>
 800bbcc:	6863      	ldr	r3, [r4, #4]
 800bbce:	42a2      	cmp	r2, r4
 800bbd0:	bf0c      	ite	eq
 800bbd2:	600b      	streq	r3, [r1, #0]
 800bbd4:	6053      	strne	r3, [r2, #4]
 800bbd6:	4630      	mov	r0, r6
 800bbd8:	f000 f85a 	bl	800bc90 <__malloc_unlock>
 800bbdc:	f104 000b 	add.w	r0, r4, #11
 800bbe0:	1d23      	adds	r3, r4, #4
 800bbe2:	f020 0007 	bic.w	r0, r0, #7
 800bbe6:	1ac2      	subs	r2, r0, r3
 800bbe8:	d0cc      	beq.n	800bb84 <_malloc_r+0x20>
 800bbea:	1a1b      	subs	r3, r3, r0
 800bbec:	50a3      	str	r3, [r4, r2]
 800bbee:	e7c9      	b.n	800bb84 <_malloc_r+0x20>
 800bbf0:	4622      	mov	r2, r4
 800bbf2:	6864      	ldr	r4, [r4, #4]
 800bbf4:	e7cc      	b.n	800bb90 <_malloc_r+0x2c>
 800bbf6:	1cc4      	adds	r4, r0, #3
 800bbf8:	f024 0403 	bic.w	r4, r4, #3
 800bbfc:	42a0      	cmp	r0, r4
 800bbfe:	d0e3      	beq.n	800bbc8 <_malloc_r+0x64>
 800bc00:	1a21      	subs	r1, r4, r0
 800bc02:	4630      	mov	r0, r6
 800bc04:	f000 f82e 	bl	800bc64 <_sbrk_r>
 800bc08:	3001      	adds	r0, #1
 800bc0a:	d1dd      	bne.n	800bbc8 <_malloc_r+0x64>
 800bc0c:	e7cf      	b.n	800bbae <_malloc_r+0x4a>
 800bc0e:	bf00      	nop
 800bc10:	20000308 	.word	0x20000308
 800bc14:	2000030c 	.word	0x2000030c

0800bc18 <_realloc_r>:
 800bc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc1a:	4607      	mov	r7, r0
 800bc1c:	4614      	mov	r4, r2
 800bc1e:	460e      	mov	r6, r1
 800bc20:	b921      	cbnz	r1, 800bc2c <_realloc_r+0x14>
 800bc22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bc26:	4611      	mov	r1, r2
 800bc28:	f7ff bf9c 	b.w	800bb64 <_malloc_r>
 800bc2c:	b922      	cbnz	r2, 800bc38 <_realloc_r+0x20>
 800bc2e:	f7ff ff49 	bl	800bac4 <_free_r>
 800bc32:	4625      	mov	r5, r4
 800bc34:	4628      	mov	r0, r5
 800bc36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc38:	f000 f830 	bl	800bc9c <_malloc_usable_size_r>
 800bc3c:	42a0      	cmp	r0, r4
 800bc3e:	d20f      	bcs.n	800bc60 <_realloc_r+0x48>
 800bc40:	4621      	mov	r1, r4
 800bc42:	4638      	mov	r0, r7
 800bc44:	f7ff ff8e 	bl	800bb64 <_malloc_r>
 800bc48:	4605      	mov	r5, r0
 800bc4a:	2800      	cmp	r0, #0
 800bc4c:	d0f2      	beq.n	800bc34 <_realloc_r+0x1c>
 800bc4e:	4631      	mov	r1, r6
 800bc50:	4622      	mov	r2, r4
 800bc52:	f7ff ff0f 	bl	800ba74 <memcpy>
 800bc56:	4631      	mov	r1, r6
 800bc58:	4638      	mov	r0, r7
 800bc5a:	f7ff ff33 	bl	800bac4 <_free_r>
 800bc5e:	e7e9      	b.n	800bc34 <_realloc_r+0x1c>
 800bc60:	4635      	mov	r5, r6
 800bc62:	e7e7      	b.n	800bc34 <_realloc_r+0x1c>

0800bc64 <_sbrk_r>:
 800bc64:	b538      	push	{r3, r4, r5, lr}
 800bc66:	4d06      	ldr	r5, [pc, #24]	; (800bc80 <_sbrk_r+0x1c>)
 800bc68:	2300      	movs	r3, #0
 800bc6a:	4604      	mov	r4, r0
 800bc6c:	4608      	mov	r0, r1
 800bc6e:	602b      	str	r3, [r5, #0]
 800bc70:	f7f6 f87c 	bl	8001d6c <_sbrk>
 800bc74:	1c43      	adds	r3, r0, #1
 800bc76:	d102      	bne.n	800bc7e <_sbrk_r+0x1a>
 800bc78:	682b      	ldr	r3, [r5, #0]
 800bc7a:	b103      	cbz	r3, 800bc7e <_sbrk_r+0x1a>
 800bc7c:	6023      	str	r3, [r4, #0]
 800bc7e:	bd38      	pop	{r3, r4, r5, pc}
 800bc80:	20007564 	.word	0x20007564

0800bc84 <__malloc_lock>:
 800bc84:	4801      	ldr	r0, [pc, #4]	; (800bc8c <__malloc_lock+0x8>)
 800bc86:	f000 b811 	b.w	800bcac <__retarget_lock_acquire_recursive>
 800bc8a:	bf00      	nop
 800bc8c:	2000756c 	.word	0x2000756c

0800bc90 <__malloc_unlock>:
 800bc90:	4801      	ldr	r0, [pc, #4]	; (800bc98 <__malloc_unlock+0x8>)
 800bc92:	f000 b80c 	b.w	800bcae <__retarget_lock_release_recursive>
 800bc96:	bf00      	nop
 800bc98:	2000756c 	.word	0x2000756c

0800bc9c <_malloc_usable_size_r>:
 800bc9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bca0:	1f18      	subs	r0, r3, #4
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	bfbc      	itt	lt
 800bca6:	580b      	ldrlt	r3, [r1, r0]
 800bca8:	18c0      	addlt	r0, r0, r3
 800bcaa:	4770      	bx	lr

0800bcac <__retarget_lock_acquire_recursive>:
 800bcac:	4770      	bx	lr

0800bcae <__retarget_lock_release_recursive>:
 800bcae:	4770      	bx	lr

0800bcb0 <_init>:
 800bcb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcb2:	bf00      	nop
 800bcb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcb6:	bc08      	pop	{r3}
 800bcb8:	469e      	mov	lr, r3
 800bcba:	4770      	bx	lr

0800bcbc <_fini>:
 800bcbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcbe:	bf00      	nop
 800bcc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcc2:	bc08      	pop	{r3}
 800bcc4:	469e      	mov	lr, r3
 800bcc6:	4770      	bx	lr
